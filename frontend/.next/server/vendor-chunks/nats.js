"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nats";
exports.ids = ["vendor-chunks/nats"];
exports.modules = {

/***/ "(rsc)/./node_modules/nats/index.js":
/*!************************************!*\
  !*** ./node_modules/nats/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Copyright 2013-2020 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nmodule.exports = __webpack_require__(/*! ./lib/src/mod */ \"(rsc)/./node_modules/nats/lib/src/mod.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7O0FBRWIscUdBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbmF0cy9pbmRleC5qcz8wZTYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDIwIFRoZSBOQVRTIEF1dGhvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9saWIvc3JjL21vZFwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/jetstream/consumer.js":
/*!*****************************************************!*\
  !*** ./node_modules/nats/lib/jetstream/consumer.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OrderedPullConsumerImpl = exports.PullConsumerImpl = exports.OrderedConsumerMessages = exports.PullConsumerMessagesImpl = exports.ConsumerDebugEvents = exports.ConsumerEvents = void 0;\n/*\n * Copyright 2022-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst util_1 = __webpack_require__(/*! ../nats-base-client/util */ \"(rsc)/./node_modules/nats/lib/nats-base-client/util.js\");\nconst nuid_1 = __webpack_require__(/*! ../nats-base-client/nuid */ \"(rsc)/./node_modules/nats/lib/nats-base-client/nuid.js\");\nconst jsutil_1 = __webpack_require__(/*! ./jsutil */ \"(rsc)/./node_modules/nats/lib/jetstream/jsutil.js\");\nconst queued_iterator_1 = __webpack_require__(/*! ../nats-base-client/queued_iterator */ \"(rsc)/./node_modules/nats/lib/nats-base-client/queued_iterator.js\");\nconst core_1 = __webpack_require__(/*! ../nats-base-client/core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nconst idleheartbeat_monitor_1 = __webpack_require__(/*! ../nats-base-client/idleheartbeat_monitor */ \"(rsc)/./node_modules/nats/lib/nats-base-client/idleheartbeat_monitor.js\");\nconst jsmsg_1 = __webpack_require__(/*! ./jsmsg */ \"(rsc)/./node_modules/nats/lib/jetstream/jsmsg.js\");\nconst jsapi_types_1 = __webpack_require__(/*! ./jsapi_types */ \"(rsc)/./node_modules/nats/lib/jetstream/jsapi_types.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/nats/lib/jetstream/types.js\");\nvar PullConsumerType;\n(function (PullConsumerType) {\n    PullConsumerType[PullConsumerType[\"Unset\"] = -1] = \"Unset\";\n    PullConsumerType[PullConsumerType[\"Consume\"] = 0] = \"Consume\";\n    PullConsumerType[PullConsumerType[\"Fetch\"] = 1] = \"Fetch\";\n})(PullConsumerType || (PullConsumerType = {}));\n/**\n * ConsumerEvents are informational notifications emitted by ConsumerMessages\n * that may be of interest to a client.\n */\nvar ConsumerEvents;\n(function (ConsumerEvents) {\n    /**\n     * Notification that heartbeats were missed. This notification is informational.\n     * The `data` portion of the status, is a number indicating the number of missed heartbeats.\n     * Note that when a client disconnects, heartbeat tracking is paused while\n     * the client is disconnected.\n     */\n    ConsumerEvents[\"HeartbeatsMissed\"] = \"heartbeats_missed\";\n    /**\n     * Notification that the consumer was not found. Consumers that were accessible at\n     * least once, will be retried for more messages regardless of the not being found\n     * or timeouts etc. This notification includes a count of consecutive attempts to\n     * find the consumer. Note that if you get this notification possibly your code should\n     * attempt to recreate the consumer. Note that this notification is only informational\n     * for ordered consumers, as the consumer will be created in those cases automatically.\n     */\n    ConsumerEvents[\"ConsumerNotFound\"] = \"consumer_not_found\";\n    /**\n     * Notification that the stream was not found. Consumers were accessible at least once,\n     * will be retried for more messages regardless of the not being found\n     * or timeouts etc. This notification includes a count of consecutive attempts to\n     * find the consumer. Note that if you get this notification possibly your code should\n     * attempt to recreate the consumer. Note that this notification is only informational\n     * for ordered consumers, as the consumer will be created in those cases automatically.\n     */\n    ConsumerEvents[\"StreamNotFound\"] = \"stream_not_found\";\n    /*\n     * Notification that the consumer was deleted. This notification\n     * means the consumer will not get messages unless it is recreated. The client\n     * will continue to attempt to pull messages. Ordered consumer will recreate it.\n     */\n    ConsumerEvents[\"ConsumerDeleted\"] = \"consumer_deleted\";\n    /**\n     * This notification is specific of ordered consumers and will be notified whenever\n     * the consumer is recreated. The argument is the name of the newly created consumer.\n     */\n    ConsumerEvents[\"OrderedConsumerRecreated\"] = \"ordered_consumer_recreated\";\n})(ConsumerEvents || (exports.ConsumerEvents = ConsumerEvents = {}));\n/**\n * These events represent informational notifications emitted by ConsumerMessages\n * that can be safely ignored by clients.\n */\nvar ConsumerDebugEvents;\n(function (ConsumerDebugEvents) {\n    /**\n     * DebugEvents are effectively statuses returned by the server that were ignored\n     * by the client. The `data` portion of the\n     * status is just a string indicating the code/message of the status.\n     */\n    ConsumerDebugEvents[\"DebugEvent\"] = \"debug\";\n    /**\n     * Requests for messages can be terminated by the server, these notifications\n     * provide information on the number of messages and/or bytes that couldn't\n     * be satisfied by the consumer request. The `data` portion of the status will\n     * have the format of `{msgsLeft: number, bytesLeft: number}`.\n     */\n    ConsumerDebugEvents[\"Discard\"] = \"discard\";\n    /**\n     * Notifies whenever there's a request for additional messages from the server.\n     * This notification telegraphs the request options, which should be treated as\n     * read-only. This notification is only useful for debugging. Data is PullOptions.\n     */\n    ConsumerDebugEvents[\"Next\"] = \"next\";\n})(ConsumerDebugEvents || (exports.ConsumerDebugEvents = ConsumerDebugEvents = {}));\nclass PullConsumerMessagesImpl extends queued_iterator_1.QueuedIteratorImpl {\n    // callback: ConsumerCallbackFn;\n    constructor(c, opts, refilling = false) {\n        super();\n        this.consumer = c;\n        this.opts = this.parseOptions(opts, refilling);\n        this.callback = opts.callback || null;\n        this.noIterator = typeof this.callback === \"function\";\n        this.monitor = null;\n        this.pong = null;\n        this.pending = { msgs: 0, bytes: 0, requests: 0 };\n        this.refilling = refilling;\n        this.stack = new Error().stack.split(\"\\n\").slice(1).join(\"\\n\");\n        this.timeout = null;\n        this.inbox = (0, core_1.createInbox)(c.api.nc.options.inboxPrefix);\n        this.listeners = [];\n        this.forOrderedConsumer = false;\n        this.start();\n    }\n    start() {\n        const { max_messages, max_bytes, idle_heartbeat, threshold_bytes, threshold_messages, } = this.opts;\n        // ordered consumer requires the ability to reset the\n        // source pull consumer, if promise is registered and\n        // close is called, the pull consumer will emit a close\n        // which will close the ordered consumer, by registering\n        // the close with a handler, we can replace it.\n        this.closed().then(() => {\n            if (this.cleanupHandler) {\n                try {\n                    this.cleanupHandler();\n                }\n                catch (_err) {\n                    // nothing\n                }\n            }\n        });\n        const { sub } = this;\n        if (sub) {\n            sub.unsubscribe();\n        }\n        this.sub = this.consumer.api.nc.subscribe(this.inbox, {\n            callback: (err, msg) => {\n                var _a, _b, _c, _d;\n                if (err) {\n                    // this is possibly only a permissions error which means\n                    // that the server rejected (eliminating the sub)\n                    // or the client never had permissions to begin with\n                    // so this is terminal\n                    this.stop();\n                    return;\n                }\n                (_a = this.monitor) === null || _a === void 0 ? void 0 : _a.work();\n                const isProtocol = msg.subject === this.inbox;\n                if (isProtocol) {\n                    if ((0, jsutil_1.isHeartbeatMsg)(msg)) {\n                        return;\n                    }\n                    const code = (_b = msg.headers) === null || _b === void 0 ? void 0 : _b.code;\n                    const description = ((_d = (_c = msg.headers) === null || _c === void 0 ? void 0 : _c.description) === null || _d === void 0 ? void 0 : _d.toLowerCase()) ||\n                        \"unknown\";\n                    const { msgsLeft, bytesLeft } = this.parseDiscard(msg.headers);\n                    if (msgsLeft > 0 || bytesLeft > 0) {\n                        this.pending.msgs -= msgsLeft;\n                        this.pending.bytes -= bytesLeft;\n                        this.pending.requests--;\n                        this.notify(ConsumerDebugEvents.Discard, { msgsLeft, bytesLeft });\n                    }\n                    else {\n                        // FIXME: 408 can be a Timeout or bad request,\n                        //  or it can be sent if a nowait request was\n                        //  sent when other waiting requests are pending\n                        //  \"Requests Pending\"\n                        // FIXME: 400 bad request Invalid Heartbeat or Unmarshalling Fails\n                        //  these are real bad values - so this is bad request\n                        //  fail on this\n                        const toErr = () => {\n                            const err = new core_1.NatsError(description, `${code}`);\n                            err.stack += `\\n\\n${this.stack}`;\n                            return err;\n                        };\n                        // we got a bad request - no progress here\n                        if (code === 400) {\n                            const error = toErr();\n                            //@ts-ignore: fn\n                            this._push(() => {\n                                this.stop(error);\n                            });\n                        }\n                        else if (code === 409 && description === \"consumer deleted\") {\n                            this.notify(ConsumerEvents.ConsumerDeleted, `${code} ${description}`);\n                        }\n                        else {\n                            this.notify(ConsumerDebugEvents.DebugEvent, `${code} ${description}`);\n                        }\n                    }\n                }\n                else {\n                    // push the user message\n                    this._push((0, jsmsg_1.toJsMsg)(msg));\n                    this.received++;\n                    if (this.pending.msgs) {\n                        this.pending.msgs--;\n                    }\n                    if (this.pending.bytes) {\n                        this.pending.bytes -= msg.size();\n                    }\n                }\n                // if we don't have pending bytes/messages we are done or starving\n                if (this.pending.msgs === 0 && this.pending.bytes === 0) {\n                    this.pending.requests = 0;\n                }\n                if (this.refilling) {\n                    // FIXME: this could result in  1/4 = 0\n                    if ((max_messages &&\n                        this.pending.msgs <= threshold_messages) ||\n                        (max_bytes && this.pending.bytes <= threshold_bytes)) {\n                        const batch = this.pullOptions();\n                        // @ts-ignore: we are pushing the pull fn\n                        this.pull(batch);\n                    }\n                }\n                else if (this.pending.requests === 0) {\n                    // @ts-ignore: we are pushing the pull fn\n                    this._push(() => {\n                        this.stop();\n                    });\n                }\n            },\n        });\n        this.sub.closed.then(() => {\n            // for ordered consumer we cannot break the iterator\n            if (this.sub.draining) {\n                // @ts-ignore: we are pushing the pull fn\n                this._push(() => {\n                    this.stop();\n                });\n            }\n        });\n        if (idle_heartbeat) {\n            this.monitor = new idleheartbeat_monitor_1.IdleHeartbeatMonitor(idle_heartbeat, (data) => {\n                // for the pull consumer - missing heartbeats may be corrected\n                // on the next pull etc - the only assumption here is we should\n                // reset and check if the consumer was deleted from under us\n                this.notify(ConsumerEvents.HeartbeatsMissed, data);\n                this.resetPending()\n                    .then(() => {\n                })\n                    .catch(() => {\n                });\n                return false;\n            }, { maxOut: 2 });\n        }\n        // now if we disconnect, the consumer could be gone\n        // or we were slow consumer'ed by the server\n        (() => __awaiter(this, void 0, void 0, function* () {\n            var _a, e_1, _b, _c;\n            var _d;\n            const status = this.consumer.api.nc.status();\n            this.statusIterator = status;\n            try {\n                for (var _e = true, status_1 = __asyncValues(status), status_1_1; status_1_1 = yield status_1.next(), _a = status_1_1.done, !_a; _e = true) {\n                    _c = status_1_1.value;\n                    _e = false;\n                    const s = _c;\n                    switch (s.type) {\n                        case core_1.Events.Disconnect:\n                            // don't spam hb errors if we are disconnected\n                            // @ts-ignore: optional chaining\n                            (_d = this.monitor) === null || _d === void 0 ? void 0 : _d.cancel();\n                            break;\n                        case core_1.Events.Reconnect:\n                            // do some sanity checks and reset\n                            // if that works resume the monitor\n                            this.resetPending()\n                                .then((ok) => {\n                                var _a;\n                                if (ok) {\n                                    // @ts-ignore: optional chaining\n                                    (_a = this.monitor) === null || _a === void 0 ? void 0 : _a.restart();\n                                }\n                            })\n                                .catch(() => {\n                                // ignored - this should have fired elsewhere\n                            });\n                            break;\n                        default:\n                        // ignored\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_e && !_a && (_b = status_1.return)) yield _b.call(status_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }))();\n        // this is the initial pull\n        this.pull(this.pullOptions());\n    }\n    _push(r) {\n        if (!this.callback) {\n            super.push(r);\n        }\n        else {\n            const fn = typeof r === \"function\" ? r : null;\n            try {\n                if (!fn) {\n                    this.callback(r);\n                }\n                else {\n                    fn();\n                }\n            }\n            catch (err) {\n                this.stop(err);\n            }\n        }\n    }\n    notify(type, data) {\n        if (this.listeners.length > 0) {\n            (() => {\n                this.listeners.forEach((l) => {\n                    if (!l.done) {\n                        l.push({ type, data });\n                    }\n                });\n            })();\n        }\n    }\n    resetPending() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let notFound = 0;\n            let streamNotFound = 0;\n            const bo = (0, util_1.backoff)();\n            let attempt = 0;\n            while (true) {\n                if (this.consumer.api.nc.isClosed()) {\n                    console.error(\"aborting resetPending - connection is closed\");\n                    return false;\n                }\n                try {\n                    // check we exist\n                    yield this.consumer.info();\n                    notFound = 0;\n                    // we exist, so effectively any pending state is gone\n                    // so reset and re-pull\n                    this.pending.msgs = 0;\n                    this.pending.bytes = 0;\n                    this.pending.requests = 0;\n                    this.pull(this.pullOptions());\n                    return true;\n                }\n                catch (err) {\n                    // game over\n                    if (err.message === \"stream not found\") {\n                        streamNotFound++;\n                        this.notify(ConsumerEvents.StreamNotFound, streamNotFound);\n                    }\n                    else if (err.message === \"consumer not found\") {\n                        notFound++;\n                        this.notify(ConsumerEvents.ConsumerNotFound, notFound);\n                        if (this.resetHandler) {\n                            try {\n                                this.resetHandler();\n                            }\n                            catch (_) {\n                                // ignored\n                            }\n                        }\n                        if (this.forOrderedConsumer) {\n                            return false;\n                        }\n                    }\n                    else {\n                        notFound = 0;\n                        streamNotFound = 0;\n                    }\n                    const to = bo.backoff(attempt);\n                    // wait for delay or till the client closes\n                    yield Promise.race([(0, util_1.delay)(to), this.consumer.api.nc.closed()]);\n                    attempt++;\n                }\n            }\n        });\n    }\n    pull(opts) {\n        var _a, _b;\n        this.pending.bytes += (_a = opts.max_bytes) !== null && _a !== void 0 ? _a : 0;\n        this.pending.msgs += (_b = opts.batch) !== null && _b !== void 0 ? _b : 0;\n        this.pending.requests++;\n        const nc = this.consumer.api.nc;\n        //@ts-ignore: iterator will pull\n        this._push(() => {\n            nc.publish(`${this.consumer.api.prefix}.CONSUMER.MSG.NEXT.${this.consumer.stream}.${this.consumer.name}`, this.consumer.api.jc.encode(opts), { reply: this.inbox });\n            this.notify(ConsumerDebugEvents.Next, opts);\n        });\n    }\n    pullOptions() {\n        const batch = this.opts.max_messages - this.pending.msgs;\n        const max_bytes = this.opts.max_bytes - this.pending.bytes;\n        const idle_heartbeat = (0, jsutil_1.nanos)(this.opts.idle_heartbeat);\n        const expires = (0, jsutil_1.nanos)(this.opts.expires);\n        return { batch, max_bytes, idle_heartbeat, expires };\n    }\n    parseDiscard(headers) {\n        const discard = {\n            msgsLeft: 0,\n            bytesLeft: 0,\n        };\n        const msgsLeft = headers === null || headers === void 0 ? void 0 : headers.get(types_1.JsHeaders.PendingMessagesHdr);\n        if (msgsLeft) {\n            discard.msgsLeft = parseInt(msgsLeft);\n        }\n        const bytesLeft = headers === null || headers === void 0 ? void 0 : headers.get(types_1.JsHeaders.PendingBytesHdr);\n        if (bytesLeft) {\n            discard.bytesLeft = parseInt(bytesLeft);\n        }\n        return discard;\n    }\n    trackTimeout(t) {\n        this.timeout = t;\n    }\n    close() {\n        this.stop();\n        return this.iterClosed;\n    }\n    closed() {\n        return this.iterClosed;\n    }\n    clearTimers() {\n        var _a, _b;\n        (_a = this.monitor) === null || _a === void 0 ? void 0 : _a.cancel();\n        this.monitor = null;\n        (_b = this.timeout) === null || _b === void 0 ? void 0 : _b.cancel();\n        this.timeout = null;\n    }\n    setCleanupHandler(fn) {\n        this.cleanupHandler = fn;\n    }\n    stop(err) {\n        var _a, _b;\n        (_a = this.sub) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        this.clearTimers();\n        (_b = this.statusIterator) === null || _b === void 0 ? void 0 : _b.stop();\n        //@ts-ignore: fn\n        this._push(() => {\n            super.stop(err);\n            this.listeners.forEach((n) => {\n                n.stop();\n            });\n        });\n    }\n    parseOptions(opts, refilling = false) {\n        const args = (opts || {});\n        args.max_messages = args.max_messages || 0;\n        args.max_bytes = args.max_bytes || 0;\n        if (args.max_messages !== 0 && args.max_bytes !== 0) {\n            throw new Error(`only specify one of max_messages or max_bytes`);\n        }\n        // we must have at least one limit - default to 100 msgs\n        // if they gave bytes but no messages, we will clamp\n        // if they gave byte limits, we still need a message limit\n        // or the server will send a single message and close the\n        // request\n        if (args.max_messages === 0) {\n            // FIXME: if the server gives end pull completion, then this is not\n            //   needed - the client will get 1 message but, we'll know that it\n            //   worked - but we'll add a lot of latency, since all requests\n            //   will end after one message\n            args.max_messages = 100;\n        }\n        args.expires = args.expires || 30000;\n        if (args.expires < 1000) {\n            throw new Error(\"expires should be at least 1000ms\");\n        }\n        // require idle_heartbeat\n        args.idle_heartbeat = args.idle_heartbeat || args.expires / 2;\n        args.idle_heartbeat = args.idle_heartbeat > 30000\n            ? 30000\n            : args.idle_heartbeat;\n        if (refilling) {\n            const minMsgs = Math.round(args.max_messages * .75) || 1;\n            args.threshold_messages = args.threshold_messages || minMsgs;\n            const minBytes = Math.round(args.max_bytes * .75) || 1;\n            args.threshold_bytes = args.threshold_bytes || minBytes;\n        }\n        return args;\n    }\n    status() {\n        const iter = new queued_iterator_1.QueuedIteratorImpl();\n        this.listeners.push(iter);\n        return Promise.resolve(iter);\n    }\n}\nexports.PullConsumerMessagesImpl = PullConsumerMessagesImpl;\nclass OrderedConsumerMessages extends queued_iterator_1.QueuedIteratorImpl {\n    constructor() {\n        super();\n        this.listeners = [];\n    }\n    setSource(src) {\n        if (this.src) {\n            this.src.resetHandler = undefined;\n            this.src.setCleanupHandler();\n            this.src.stop();\n        }\n        this.src = src;\n        this.src.setCleanupHandler(() => {\n            this.close().catch();\n        });\n        (() => __awaiter(this, void 0, void 0, function* () {\n            var _a, e_2, _b, _c;\n            const status = yield this.src.status();\n            try {\n                for (var _d = true, status_2 = __asyncValues(status), status_2_1; status_2_1 = yield status_2.next(), _a = status_2_1.done, !_a; _d = true) {\n                    _c = status_2_1.value;\n                    _d = false;\n                    const s = _c;\n                    this.notify(s.type, s.data);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = status_2.return)) yield _b.call(status_2);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }))().catch(() => { });\n    }\n    notify(type, data) {\n        if (this.listeners.length > 0) {\n            (() => {\n                this.listeners.forEach((l) => {\n                    if (!l.done) {\n                        l.push({ type, data });\n                    }\n                });\n            })();\n        }\n    }\n    stop(err) {\n        var _a;\n        (_a = this.src) === null || _a === void 0 ? void 0 : _a.stop(err);\n        super.stop(err);\n        this.listeners.forEach((n) => {\n            n.stop();\n        });\n    }\n    close() {\n        this.stop();\n        return this.iterClosed;\n    }\n    status() {\n        const iter = new queued_iterator_1.QueuedIteratorImpl();\n        this.listeners.push(iter);\n        return Promise.resolve(iter);\n    }\n}\nexports.OrderedConsumerMessages = OrderedConsumerMessages;\nclass PullConsumerImpl {\n    constructor(api, info) {\n        this.api = api;\n        this._info = info;\n        this.stream = info.stream_name;\n        this.name = info.name;\n    }\n    consume(opts = {\n        max_messages: 100,\n        expires: 30000,\n    }) {\n        return Promise.resolve(new PullConsumerMessagesImpl(this, opts, true));\n    }\n    fetch(opts = {\n        max_messages: 100,\n        expires: 30000,\n    }) {\n        const m = new PullConsumerMessagesImpl(this, opts, false);\n        // FIXME: need some way to pad this correctly\n        const to = Math.round(m.opts.expires * 1.05);\n        const timer = (0, util_1.timeout)(to);\n        m.closed().then(() => {\n            timer.cancel();\n        });\n        timer.catch(() => {\n            m.close().catch();\n        });\n        m.trackTimeout(timer);\n        return Promise.resolve(m);\n    }\n    next(opts = { expires: 30000 }) {\n        const d = (0, util_1.deferred)();\n        const fopts = opts;\n        fopts.max_messages = 1;\n        const iter = new PullConsumerMessagesImpl(this, fopts, false);\n        // FIXME: need some way to pad this correctly\n        const to = Math.round(iter.opts.expires * 1.05);\n        // watch the messages for heartbeats missed\n        if (to >= 60000) {\n            (() => __awaiter(this, void 0, void 0, function* () {\n                var _a, e_3, _b, _c;\n                try {\n                    for (var _d = true, _e = __asyncValues(yield iter.status()), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {\n                        _c = _f.value;\n                        _d = false;\n                        const s = _c;\n                        if (s.type === ConsumerEvents.HeartbeatsMissed &&\n                            s.data >= 2) {\n                            d.reject(new Error(\"consumer missed heartbeats\"));\n                            break;\n                        }\n                    }\n                }\n                catch (e_3_1) { e_3 = { error: e_3_1 }; }\n                finally {\n                    try {\n                        if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);\n                    }\n                    finally { if (e_3) throw e_3.error; }\n                }\n            }))().catch();\n        }\n        (() => __awaiter(this, void 0, void 0, function* () {\n            var _g, e_4, _h, _j;\n            try {\n                for (var _k = true, iter_1 = __asyncValues(iter), iter_1_1; iter_1_1 = yield iter_1.next(), _g = iter_1_1.done, !_g; _k = true) {\n                    _j = iter_1_1.value;\n                    _k = false;\n                    const m = _j;\n                    d.resolve(m);\n                    break;\n                }\n            }\n            catch (e_4_1) { e_4 = { error: e_4_1 }; }\n            finally {\n                try {\n                    if (!_k && !_g && (_h = iter_1.return)) yield _h.call(iter_1);\n                }\n                finally { if (e_4) throw e_4.error; }\n            }\n        }))().catch();\n        const timer = (0, util_1.timeout)(to);\n        iter.closed().then(() => {\n            d.resolve(null);\n            timer.cancel();\n        }).catch((err) => {\n            d.reject(err);\n        });\n        timer.catch((_err) => {\n            d.resolve(null);\n            iter.close().catch();\n        });\n        iter.trackTimeout(timer);\n        return d;\n    }\n    delete() {\n        const { stream_name, name } = this._info;\n        return this.api.delete(stream_name, name);\n    }\n    info(cached = false) {\n        if (cached) {\n            return Promise.resolve(this._info);\n        }\n        const { stream_name, name } = this._info;\n        return this.api.info(stream_name, name)\n            .then((ci) => {\n            this._info = ci;\n            return this._info;\n        });\n    }\n}\nexports.PullConsumerImpl = PullConsumerImpl;\nclass OrderedPullConsumerImpl {\n    constructor(api, stream, opts = {}) {\n        this.api = api;\n        this.stream = stream;\n        this.cursor = { stream_seq: 1, deliver_seq: 0 };\n        this.namePrefix = nuid_1.nuid.next();\n        this.serial = 0;\n        this.currentConsumer = null;\n        this.userCallback = null;\n        this.iter = null;\n        this.type = PullConsumerType.Unset;\n        this.consumerOpts = opts;\n        // to support a random start sequence we need to update the cursor\n        this.startSeq = this.consumerOpts.opt_start_seq || 0;\n        this.cursor.stream_seq = this.startSeq > 0 ? this.startSeq - 1 : 0;\n    }\n    getConsumerOpts(seq) {\n        // change the serial - invalidating any callback not\n        // matching the serial\n        this.serial++;\n        const name = `${this.namePrefix}_${this.serial}`;\n        seq = seq === 0 ? 1 : seq;\n        const config = {\n            name,\n            deliver_policy: jsapi_types_1.DeliverPolicy.StartSequence,\n            opt_start_seq: seq,\n            ack_policy: jsapi_types_1.AckPolicy.None,\n            inactive_threshold: (0, jsutil_1.nanos)(5 * 60 * 1000),\n            num_replicas: 1,\n        };\n        if (this.consumerOpts.headers_only === true) {\n            config.headers_only = true;\n        }\n        if (Array.isArray(this.consumerOpts.filterSubjects)) {\n            config.filter_subjects = this.consumerOpts.filterSubjects;\n        }\n        if (typeof this.consumerOpts.filterSubjects === \"string\") {\n            config.filter_subject = this.consumerOpts.filterSubjects;\n        }\n        // this is the initial request - tweak some options\n        if (seq === this.startSeq + 1) {\n            config.deliver_policy = this.consumerOpts.deliver_policy ||\n                jsapi_types_1.DeliverPolicy.StartSequence;\n            if (this.consumerOpts.deliver_policy === jsapi_types_1.DeliverPolicy.LastPerSubject ||\n                this.consumerOpts.deliver_policy === jsapi_types_1.DeliverPolicy.New ||\n                this.consumerOpts.deliver_policy === jsapi_types_1.DeliverPolicy.Last) {\n                delete config.opt_start_seq;\n                config.deliver_policy = this.consumerOpts.deliver_policy;\n            }\n            // this requires a filter subject - we only set if they didn't\n            // set anything, and to be pre-2.10 we set it as filter_subject\n            if (config.deliver_policy === jsapi_types_1.DeliverPolicy.LastPerSubject) {\n                if (typeof config.filter_subjects === \"undefined\" &&\n                    typeof config.filter_subject === \"undefined\") {\n                    config.filter_subject = \">\";\n                }\n            }\n            if (this.consumerOpts.opt_start_time) {\n                delete config.opt_start_seq;\n                config.deliver_policy = jsapi_types_1.DeliverPolicy.StartTime;\n                config.opt_start_time = this.consumerOpts.opt_start_time;\n            }\n            if (this.consumerOpts.inactive_threshold) {\n                config.inactive_threshold = (0, jsutil_1.nanos)(this.consumerOpts.inactive_threshold);\n            }\n        }\n        return config;\n    }\n    resetConsumer(seq = 0) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            // try to delete the consumer\n            (_a = this.consumer) === null || _a === void 0 ? void 0 : _a.delete().catch(() => { });\n            seq = seq === 0 ? 1 : seq;\n            // reset the consumer sequence as JetStream will renumber from 1\n            this.cursor.deliver_seq = 0;\n            const config = this.getConsumerOpts(seq);\n            config.max_deliver = 1;\n            config.mem_storage = true;\n            const bo = (0, util_1.backoff)();\n            let ci;\n            for (let i = 0;; i++) {\n                try {\n                    ci = yield this.api.add(this.stream, config);\n                    (_b = this.iter) === null || _b === void 0 ? void 0 : _b.notify(ConsumerEvents.OrderedConsumerRecreated, ci.name);\n                    break;\n                }\n                catch (err) {\n                    if (seq === 0 && i >= 30) {\n                        // consumer was never created, so we can fail this\n                        throw err;\n                    }\n                    else {\n                        yield (0, util_1.delay)(bo.backoff(i + 1));\n                    }\n                }\n            }\n            return ci;\n        });\n    }\n    internalHandler(serial) {\n        // this handler will be noop if the consumer's serial changes\n        return (m) => {\n            var _a;\n            if (this.serial !== serial) {\n                return;\n            }\n            const dseq = m.info.deliverySequence;\n            if (dseq !== this.cursor.deliver_seq + 1) {\n                this.reset(this.opts);\n                return;\n            }\n            this.cursor.deliver_seq = dseq;\n            this.cursor.stream_seq = m.info.streamSequence;\n            if (this.userCallback) {\n                this.userCallback(m);\n            }\n            else {\n                (_a = this.iter) === null || _a === void 0 ? void 0 : _a.push(m);\n            }\n        };\n    }\n    reset(opts = {\n        max_messages: 100,\n        expires: 30000,\n    }, fromFetch = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.currentConsumer = yield this.resetConsumer(this.cursor.stream_seq + 1);\n            if (this.iter === null) {\n                this.iter = new OrderedConsumerMessages();\n            }\n            this.consumer = new PullConsumerImpl(this.api, this.currentConsumer);\n            const copts = opts;\n            copts.callback = this.internalHandler(this.serial);\n            let msgs = null;\n            if (this.type === PullConsumerType.Fetch && fromFetch) {\n                // we only repull if client initiates\n                msgs = yield this.consumer.fetch(opts);\n            }\n            else if (this.type === PullConsumerType.Consume) {\n                msgs = yield this.consumer.consume(opts);\n            }\n            else {\n                return Promise.reject(\"reset called with unset consumer type\");\n            }\n            const msgsImpl = msgs;\n            msgsImpl.forOrderedConsumer = true;\n            msgsImpl.resetHandler = () => {\n                this.reset(this.opts);\n            };\n            this.iter.setSource(msgsImpl);\n            return this.iter;\n        });\n    }\n    consume(opts = {\n        max_messages: 100,\n        expires: 30000,\n    }) {\n        if (this.type === PullConsumerType.Fetch) {\n            return Promise.reject(new Error(\"ordered consumer initialized as fetch\"));\n        }\n        if (this.type === PullConsumerType.Consume) {\n            return Promise.reject(new Error(\"ordered consumer doesn't support concurrent consume\"));\n        }\n        const { callback } = opts;\n        if (callback) {\n            this.userCallback = callback;\n        }\n        this.type = PullConsumerType.Consume;\n        this.opts = opts;\n        return this.reset(opts);\n    }\n    fetch(opts = { max_messages: 100, expires: 30000 }) {\n        var _a;\n        if (this.type === PullConsumerType.Consume) {\n            return Promise.reject(new Error(\"ordered consumer already initialized as consume\"));\n        }\n        if (((_a = this.iter) === null || _a === void 0 ? void 0 : _a.done) === false) {\n            return Promise.reject(new Error(\"ordered consumer doesn't support concurrent fetch\"));\n        }\n        //@ts-ignore: allow this for tests - api doesn't use it because\n        // iterator close is the user signal that the pull is done.\n        const { callback } = opts;\n        if (callback) {\n            this.userCallback = callback;\n        }\n        this.type = PullConsumerType.Fetch;\n        this.opts = opts;\n        this.iter = new OrderedConsumerMessages();\n        return this.reset(opts, true);\n    }\n    next(opts = { expires: 30000 }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const d = (0, util_1.deferred)();\n            const copts = opts;\n            copts.max_messages = 1;\n            copts.callback = (m) => {\n                // we can clobber the callback, because they are not supported\n                // except on consume, which will fail when we try to fetch\n                this.userCallback = null;\n                d.resolve(m);\n            };\n            const iter = yield this.fetch(copts);\n            iter.iterClosed\n                .then(() => {\n                d.resolve(null);\n            })\n                .catch((err) => {\n                d.reject(err);\n            });\n            return d;\n        });\n    }\n    delete() {\n        if (!this.currentConsumer) {\n            return Promise.resolve(false);\n        }\n        return this.api.delete(this.stream, this.currentConsumer.name)\n            .then((tf) => {\n            return Promise.resolve(tf);\n        })\n            .catch((err) => {\n            return Promise.reject(err);\n        })\n            .finally(() => {\n            this.currentConsumer = null;\n        });\n    }\n    info(cached) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.currentConsumer == null) {\n                this.currentConsumer = yield this.resetConsumer(this.serial);\n                return Promise.resolve(this.currentConsumer);\n            }\n            if (cached && this.currentConsumer) {\n                return Promise.resolve(this.currentConsumer);\n            }\n            return this.api.info(this.stream, this.currentConsumer.name);\n        });\n    }\n}\nexports.OrderedPullConsumerImpl = OrderedPullConsumerImpl;\n//# sourceMappingURL=consumer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/jetstream/consumer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/jetstream/internal_mod.js":
/*!*********************************************************!*\
  !*** ./node_modules/nats/lib/jetstream/internal_mod.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConsumerEvents = exports.ConsumerDebugEvents = exports.StoreCompression = exports.StorageType = exports.RetentionPolicy = exports.ReplayPolicy = exports.DiscardPolicy = exports.DeliverPolicy = exports.AckPolicy = exports.RepublishHeaders = exports.JsHeaders = exports.isConsumerOptsBuilder = exports.DirectMsgHeaders = exports.consumerOpts = exports.AdvisoryKind = exports.nanos = exports.millis = exports.isHeartbeatMsg = exports.isFlowControlMsg = exports.checkJsError = void 0;\n/*\n * Copyright 2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar jsutil_1 = __webpack_require__(/*! ./jsutil */ \"(rsc)/./node_modules/nats/lib/jetstream/jsutil.js\");\nObject.defineProperty(exports, \"checkJsError\", ({ enumerable: true, get: function () { return jsutil_1.checkJsError; } }));\nObject.defineProperty(exports, \"isFlowControlMsg\", ({ enumerable: true, get: function () { return jsutil_1.isFlowControlMsg; } }));\nObject.defineProperty(exports, \"isHeartbeatMsg\", ({ enumerable: true, get: function () { return jsutil_1.isHeartbeatMsg; } }));\nObject.defineProperty(exports, \"millis\", ({ enumerable: true, get: function () { return jsutil_1.millis; } }));\nObject.defineProperty(exports, \"nanos\", ({ enumerable: true, get: function () { return jsutil_1.nanos; } }));\nvar types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/nats/lib/jetstream/types.js\");\nObject.defineProperty(exports, \"AdvisoryKind\", ({ enumerable: true, get: function () { return types_1.AdvisoryKind; } }));\nObject.defineProperty(exports, \"consumerOpts\", ({ enumerable: true, get: function () { return types_1.consumerOpts; } }));\nObject.defineProperty(exports, \"DirectMsgHeaders\", ({ enumerable: true, get: function () { return types_1.DirectMsgHeaders; } }));\nObject.defineProperty(exports, \"isConsumerOptsBuilder\", ({ enumerable: true, get: function () { return types_1.isConsumerOptsBuilder; } }));\nObject.defineProperty(exports, \"JsHeaders\", ({ enumerable: true, get: function () { return types_1.JsHeaders; } }));\nObject.defineProperty(exports, \"RepublishHeaders\", ({ enumerable: true, get: function () { return types_1.RepublishHeaders; } }));\nvar jsapi_types_1 = __webpack_require__(/*! ./jsapi_types */ \"(rsc)/./node_modules/nats/lib/jetstream/jsapi_types.js\");\nObject.defineProperty(exports, \"AckPolicy\", ({ enumerable: true, get: function () { return jsapi_types_1.AckPolicy; } }));\nObject.defineProperty(exports, \"DeliverPolicy\", ({ enumerable: true, get: function () { return jsapi_types_1.DeliverPolicy; } }));\nObject.defineProperty(exports, \"DiscardPolicy\", ({ enumerable: true, get: function () { return jsapi_types_1.DiscardPolicy; } }));\nObject.defineProperty(exports, \"ReplayPolicy\", ({ enumerable: true, get: function () { return jsapi_types_1.ReplayPolicy; } }));\nObject.defineProperty(exports, \"RetentionPolicy\", ({ enumerable: true, get: function () { return jsapi_types_1.RetentionPolicy; } }));\nObject.defineProperty(exports, \"StorageType\", ({ enumerable: true, get: function () { return jsapi_types_1.StorageType; } }));\nObject.defineProperty(exports, \"StoreCompression\", ({ enumerable: true, get: function () { return jsapi_types_1.StoreCompression; } }));\nvar consumer_1 = __webpack_require__(/*! ./consumer */ \"(rsc)/./node_modules/nats/lib/jetstream/consumer.js\");\nObject.defineProperty(exports, \"ConsumerDebugEvents\", ({ enumerable: true, get: function () { return consumer_1.ConsumerDebugEvents; } }));\nObject.defineProperty(exports, \"ConsumerEvents\", ({ enumerable: true, get: function () { return consumer_1.ConsumerEvents; } }));\n//# sourceMappingURL=internal_mod.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvamV0c3RyZWFtL2ludGVybmFsX21vZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRywyQkFBMkIsR0FBRyx3QkFBd0IsR0FBRyxtQkFBbUIsR0FBRyx1QkFBdUIsR0FBRyxvQkFBb0IsR0FBRyxxQkFBcUIsR0FBRyxxQkFBcUIsR0FBRyxpQkFBaUIsR0FBRyx3QkFBd0IsR0FBRyxpQkFBaUIsR0FBRyw2QkFBNkIsR0FBRyx3QkFBd0IsR0FBRyxvQkFBb0IsR0FBRyxvQkFBb0IsR0FBRyxhQUFhLEdBQUcsY0FBYyxHQUFHLHNCQUFzQixHQUFHLHdCQUF3QixHQUFHLG9CQUFvQjtBQUM5ZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLG1FQUFVO0FBQ2pDLGdEQUErQyxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQztBQUN4SCxvREFBbUQsRUFBRSxxQ0FBcUMscUNBQXFDLEVBQUM7QUFDaEksa0RBQWlELEVBQUUscUNBQXFDLG1DQUFtQyxFQUFDO0FBQzVILDBDQUF5QyxFQUFFLHFDQUFxQywyQkFBMkIsRUFBQztBQUM1Ryx5Q0FBd0MsRUFBRSxxQ0FBcUMsMEJBQTBCLEVBQUM7QUFDMUcsY0FBYyxtQkFBTyxDQUFDLGlFQUFTO0FBQy9CLGdEQUErQyxFQUFFLHFDQUFxQyxnQ0FBZ0MsRUFBQztBQUN2SCxnREFBK0MsRUFBRSxxQ0FBcUMsZ0NBQWdDLEVBQUM7QUFDdkgsb0RBQW1ELEVBQUUscUNBQXFDLG9DQUFvQyxFQUFDO0FBQy9ILHlEQUF3RCxFQUFFLHFDQUFxQyx5Q0FBeUMsRUFBQztBQUN6SSw2Q0FBNEMsRUFBRSxxQ0FBcUMsNkJBQTZCLEVBQUM7QUFDakgsb0RBQW1ELEVBQUUscUNBQXFDLG9DQUFvQyxFQUFDO0FBQy9ILG9CQUFvQixtQkFBTyxDQUFDLDZFQUFlO0FBQzNDLDZDQUE0QyxFQUFFLHFDQUFxQyxtQ0FBbUMsRUFBQztBQUN2SCxpREFBZ0QsRUFBRSxxQ0FBcUMsdUNBQXVDLEVBQUM7QUFDL0gsaURBQWdELEVBQUUscUNBQXFDLHVDQUF1QyxFQUFDO0FBQy9ILGdEQUErQyxFQUFFLHFDQUFxQyxzQ0FBc0MsRUFBQztBQUM3SCxtREFBa0QsRUFBRSxxQ0FBcUMseUNBQXlDLEVBQUM7QUFDbkksK0NBQThDLEVBQUUscUNBQXFDLHFDQUFxQyxFQUFDO0FBQzNILG9EQUFtRCxFQUFFLHFDQUFxQywwQ0FBMEMsRUFBQztBQUNySSxpQkFBaUIsbUJBQU8sQ0FBQyx1RUFBWTtBQUNyQyx1REFBc0QsRUFBRSxxQ0FBcUMsMENBQTBDLEVBQUM7QUFDeEksa0RBQWlELEVBQUUscUNBQXFDLHFDQUFxQyxFQUFDO0FBQzlIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvamV0c3RyZWFtL2ludGVybmFsX21vZC5qcz84YWQxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db25zdW1lckV2ZW50cyA9IGV4cG9ydHMuQ29uc3VtZXJEZWJ1Z0V2ZW50cyA9IGV4cG9ydHMuU3RvcmVDb21wcmVzc2lvbiA9IGV4cG9ydHMuU3RvcmFnZVR5cGUgPSBleHBvcnRzLlJldGVudGlvblBvbGljeSA9IGV4cG9ydHMuUmVwbGF5UG9saWN5ID0gZXhwb3J0cy5EaXNjYXJkUG9saWN5ID0gZXhwb3J0cy5EZWxpdmVyUG9saWN5ID0gZXhwb3J0cy5BY2tQb2xpY3kgPSBleHBvcnRzLlJlcHVibGlzaEhlYWRlcnMgPSBleHBvcnRzLkpzSGVhZGVycyA9IGV4cG9ydHMuaXNDb25zdW1lck9wdHNCdWlsZGVyID0gZXhwb3J0cy5EaXJlY3RNc2dIZWFkZXJzID0gZXhwb3J0cy5jb25zdW1lck9wdHMgPSBleHBvcnRzLkFkdmlzb3J5S2luZCA9IGV4cG9ydHMubmFub3MgPSBleHBvcnRzLm1pbGxpcyA9IGV4cG9ydHMuaXNIZWFydGJlYXRNc2cgPSBleHBvcnRzLmlzRmxvd0NvbnRyb2xNc2cgPSBleHBvcnRzLmNoZWNrSnNFcnJvciA9IHZvaWQgMDtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMyBUaGUgTkFUUyBBdXRob3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIGpzdXRpbF8xID0gcmVxdWlyZShcIi4vanN1dGlsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2hlY2tKc0Vycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBqc3V0aWxfMS5jaGVja0pzRXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0Zsb3dDb250cm9sTXNnXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBqc3V0aWxfMS5pc0Zsb3dDb250cm9sTXNnOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNIZWFydGJlYXRNc2dcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGpzdXRpbF8xLmlzSGVhcnRiZWF0TXNnOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWlsbGlzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBqc3V0aWxfMS5taWxsaXM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJuYW5vc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4ganN1dGlsXzEubmFub3M7IH0gfSk7XG52YXIgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQWR2aXNvcnlLaW5kXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlc18xLkFkdmlzb3J5S2luZDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbnN1bWVyT3B0c1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHlwZXNfMS5jb25zdW1lck9wdHM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaXJlY3RNc2dIZWFkZXJzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlc18xLkRpcmVjdE1zZ0hlYWRlcnM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0NvbnN1bWVyT3B0c0J1aWxkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR5cGVzXzEuaXNDb25zdW1lck9wdHNCdWlsZGVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSnNIZWFkZXJzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlc18xLkpzSGVhZGVyczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlcHVibGlzaEhlYWRlcnNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR5cGVzXzEuUmVwdWJsaXNoSGVhZGVyczsgfSB9KTtcbnZhciBqc2FwaV90eXBlc18xID0gcmVxdWlyZShcIi4vanNhcGlfdHlwZXNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBY2tQb2xpY3lcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGpzYXBpX3R5cGVzXzEuQWNrUG9saWN5OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGVsaXZlclBvbGljeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4ganNhcGlfdHlwZXNfMS5EZWxpdmVyUG9saWN5OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGlzY2FyZFBvbGljeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4ganNhcGlfdHlwZXNfMS5EaXNjYXJkUG9saWN5OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVwbGF5UG9saWN5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBqc2FwaV90eXBlc18xLlJlcGxheVBvbGljeTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJldGVudGlvblBvbGljeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4ganNhcGlfdHlwZXNfMS5SZXRlbnRpb25Qb2xpY3k7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdG9yYWdlVHlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4ganNhcGlfdHlwZXNfMS5TdG9yYWdlVHlwZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN0b3JlQ29tcHJlc3Npb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGpzYXBpX3R5cGVzXzEuU3RvcmVDb21wcmVzc2lvbjsgfSB9KTtcbnZhciBjb25zdW1lcl8xID0gcmVxdWlyZShcIi4vY29uc3VtZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb25zdW1lckRlYnVnRXZlbnRzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25zdW1lcl8xLkNvbnN1bWVyRGVidWdFdmVudHM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb25zdW1lckV2ZW50c1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uc3VtZXJfMS5Db25zdW1lckV2ZW50czsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVybmFsX21vZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/jetstream/internal_mod.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/jetstream/jsapi_types.js":
/*!********************************************************!*\
  !*** ./node_modules/nats/lib/jetstream/jsapi_types.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultConsumer = exports.ConsumerApiAction = exports.StoreCompression = exports.ReplayPolicy = exports.AckPolicy = exports.DeliverPolicy = exports.StorageType = exports.DiscardPolicy = exports.RetentionPolicy = void 0;\nconst jsutil_1 = __webpack_require__(/*! ./jsutil */ \"(rsc)/./node_modules/nats/lib/jetstream/jsutil.js\");\nvar RetentionPolicy;\n(function (RetentionPolicy) {\n    /**\n     * Retain messages until the limits are reached, then trigger the discard policy.\n     */\n    RetentionPolicy[\"Limits\"] = \"limits\";\n    /**\n     * Retain messages while there is consumer interest on the particular subject.\n     */\n    RetentionPolicy[\"Interest\"] = \"interest\";\n    /**\n     * Retain messages until acknowledged\n     */\n    RetentionPolicy[\"Workqueue\"] = \"workqueue\";\n})(RetentionPolicy || (exports.RetentionPolicy = RetentionPolicy = {}));\nvar DiscardPolicy;\n(function (DiscardPolicy) {\n    /**\n     * Discard old messages to make room for the new ones\n     */\n    DiscardPolicy[\"Old\"] = \"old\";\n    /**\n     * Discard the new messages\n     */\n    DiscardPolicy[\"New\"] = \"new\";\n})(DiscardPolicy || (exports.DiscardPolicy = DiscardPolicy = {}));\nvar StorageType;\n(function (StorageType) {\n    /**\n     * Store persistently on files\n     */\n    StorageType[\"File\"] = \"file\";\n    /**\n     * Store in server memory - doesn't survive server restarts\n     */\n    StorageType[\"Memory\"] = \"memory\";\n})(StorageType || (exports.StorageType = StorageType = {}));\nvar DeliverPolicy;\n(function (DeliverPolicy) {\n    /**\n     * Deliver all messages\n     */\n    DeliverPolicy[\"All\"] = \"all\";\n    /**\n     * Deliver starting with the last message\n     */\n    DeliverPolicy[\"Last\"] = \"last\";\n    /**\n     * Deliver starting with new messages\n     */\n    DeliverPolicy[\"New\"] = \"new\";\n    /**\n     * Deliver starting with the specified sequence\n     */\n    DeliverPolicy[\"StartSequence\"] = \"by_start_sequence\";\n    /**\n     * Deliver starting with the specified time\n     */\n    DeliverPolicy[\"StartTime\"] = \"by_start_time\";\n    /**\n     * Deliver starting with the last messages for every subject\n     */\n    DeliverPolicy[\"LastPerSubject\"] = \"last_per_subject\";\n})(DeliverPolicy || (exports.DeliverPolicy = DeliverPolicy = {}));\nvar AckPolicy;\n(function (AckPolicy) {\n    /**\n     * Messages don't need to be Ack'ed.\n     */\n    AckPolicy[\"None\"] = \"none\";\n    /**\n     * Ack, acknowledges all messages with a lower sequence\n     */\n    AckPolicy[\"All\"] = \"all\";\n    /**\n     * All sequences must be explicitly acknowledged\n     */\n    AckPolicy[\"Explicit\"] = \"explicit\";\n    /**\n     * @ignore\n     */\n    AckPolicy[\"NotSet\"] = \"\";\n})(AckPolicy || (exports.AckPolicy = AckPolicy = {}));\nvar ReplayPolicy;\n(function (ReplayPolicy) {\n    /**\n     * Replays messages as fast as possible\n     */\n    ReplayPolicy[\"Instant\"] = \"instant\";\n    /**\n     * Replays messages following the original delay between messages\n     */\n    ReplayPolicy[\"Original\"] = \"original\";\n})(ReplayPolicy || (exports.ReplayPolicy = ReplayPolicy = {}));\nvar StoreCompression;\n(function (StoreCompression) {\n    /**\n     * No compression\n     */\n    StoreCompression[\"None\"] = \"none\";\n    /**\n     * S2 compression\n     */\n    StoreCompression[\"S2\"] = \"s2\";\n})(StoreCompression || (exports.StoreCompression = StoreCompression = {}));\nvar ConsumerApiAction;\n(function (ConsumerApiAction) {\n    ConsumerApiAction[\"CreateOrUpdate\"] = \"\";\n    ConsumerApiAction[\"Update\"] = \"update\";\n    ConsumerApiAction[\"Create\"] = \"create\";\n})(ConsumerApiAction || (exports.ConsumerApiAction = ConsumerApiAction = {}));\nfunction defaultConsumer(name, opts = {}) {\n    return Object.assign({\n        name: name,\n        deliver_policy: DeliverPolicy.All,\n        ack_policy: AckPolicy.Explicit,\n        ack_wait: (0, jsutil_1.nanos)(30 * 1000),\n        replay_policy: ReplayPolicy.Instant,\n    }, opts);\n}\nexports.defaultConsumer = defaultConsumer;\n//# sourceMappingURL=jsapi_types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvamV0c3RyZWFtL2pzYXBpX3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyx5QkFBeUIsR0FBRyx3QkFBd0IsR0FBRyxvQkFBb0IsR0FBRyxpQkFBaUIsR0FBRyxxQkFBcUIsR0FBRyxtQkFBbUIsR0FBRyxxQkFBcUIsR0FBRyx1QkFBdUI7QUFDek4saUJBQWlCLG1CQUFPLENBQUMsbUVBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0JBQXNCLHVCQUF1Qix1QkFBdUI7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9CQUFvQixxQkFBcUIscUJBQXFCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrQkFBa0IsbUJBQW1CLG1CQUFtQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQkFBb0IscUJBQXFCLHFCQUFxQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdCQUFnQixpQkFBaUIsaUJBQWlCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxtQkFBbUIsb0JBQW9CLG9CQUFvQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsdUJBQXVCLHdCQUF3Qix3QkFBd0I7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0JBQXdCLHlCQUF5Qix5QkFBeUI7QUFDM0Usd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL25hdHMvbGliL2pldHN0cmVhbS9qc2FwaV90eXBlcy5qcz9kYzUyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDIzIFRoZSBOQVRTIEF1dGhvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHRDb25zdW1lciA9IGV4cG9ydHMuQ29uc3VtZXJBcGlBY3Rpb24gPSBleHBvcnRzLlN0b3JlQ29tcHJlc3Npb24gPSBleHBvcnRzLlJlcGxheVBvbGljeSA9IGV4cG9ydHMuQWNrUG9saWN5ID0gZXhwb3J0cy5EZWxpdmVyUG9saWN5ID0gZXhwb3J0cy5TdG9yYWdlVHlwZSA9IGV4cG9ydHMuRGlzY2FyZFBvbGljeSA9IGV4cG9ydHMuUmV0ZW50aW9uUG9saWN5ID0gdm9pZCAwO1xuY29uc3QganN1dGlsXzEgPSByZXF1aXJlKFwiLi9qc3V0aWxcIik7XG52YXIgUmV0ZW50aW9uUG9saWN5O1xuKGZ1bmN0aW9uIChSZXRlbnRpb25Qb2xpY3kpIHtcbiAgICAvKipcbiAgICAgKiBSZXRhaW4gbWVzc2FnZXMgdW50aWwgdGhlIGxpbWl0cyBhcmUgcmVhY2hlZCwgdGhlbiB0cmlnZ2VyIHRoZSBkaXNjYXJkIHBvbGljeS5cbiAgICAgKi9cbiAgICBSZXRlbnRpb25Qb2xpY3lbXCJMaW1pdHNcIl0gPSBcImxpbWl0c1wiO1xuICAgIC8qKlxuICAgICAqIFJldGFpbiBtZXNzYWdlcyB3aGlsZSB0aGVyZSBpcyBjb25zdW1lciBpbnRlcmVzdCBvbiB0aGUgcGFydGljdWxhciBzdWJqZWN0LlxuICAgICAqL1xuICAgIFJldGVudGlvblBvbGljeVtcIkludGVyZXN0XCJdID0gXCJpbnRlcmVzdFwiO1xuICAgIC8qKlxuICAgICAqIFJldGFpbiBtZXNzYWdlcyB1bnRpbCBhY2tub3dsZWRnZWRcbiAgICAgKi9cbiAgICBSZXRlbnRpb25Qb2xpY3lbXCJXb3JrcXVldWVcIl0gPSBcIndvcmtxdWV1ZVwiO1xufSkoUmV0ZW50aW9uUG9saWN5IHx8IChleHBvcnRzLlJldGVudGlvblBvbGljeSA9IFJldGVudGlvblBvbGljeSA9IHt9KSk7XG52YXIgRGlzY2FyZFBvbGljeTtcbihmdW5jdGlvbiAoRGlzY2FyZFBvbGljeSkge1xuICAgIC8qKlxuICAgICAqIERpc2NhcmQgb2xkIG1lc3NhZ2VzIHRvIG1ha2Ugcm9vbSBmb3IgdGhlIG5ldyBvbmVzXG4gICAgICovXG4gICAgRGlzY2FyZFBvbGljeVtcIk9sZFwiXSA9IFwib2xkXCI7XG4gICAgLyoqXG4gICAgICogRGlzY2FyZCB0aGUgbmV3IG1lc3NhZ2VzXG4gICAgICovXG4gICAgRGlzY2FyZFBvbGljeVtcIk5ld1wiXSA9IFwibmV3XCI7XG59KShEaXNjYXJkUG9saWN5IHx8IChleHBvcnRzLkRpc2NhcmRQb2xpY3kgPSBEaXNjYXJkUG9saWN5ID0ge30pKTtcbnZhciBTdG9yYWdlVHlwZTtcbihmdW5jdGlvbiAoU3RvcmFnZVR5cGUpIHtcbiAgICAvKipcbiAgICAgKiBTdG9yZSBwZXJzaXN0ZW50bHkgb24gZmlsZXNcbiAgICAgKi9cbiAgICBTdG9yYWdlVHlwZVtcIkZpbGVcIl0gPSBcImZpbGVcIjtcbiAgICAvKipcbiAgICAgKiBTdG9yZSBpbiBzZXJ2ZXIgbWVtb3J5IC0gZG9lc24ndCBzdXJ2aXZlIHNlcnZlciByZXN0YXJ0c1xuICAgICAqL1xuICAgIFN0b3JhZ2VUeXBlW1wiTWVtb3J5XCJdID0gXCJtZW1vcnlcIjtcbn0pKFN0b3JhZ2VUeXBlIHx8IChleHBvcnRzLlN0b3JhZ2VUeXBlID0gU3RvcmFnZVR5cGUgPSB7fSkpO1xudmFyIERlbGl2ZXJQb2xpY3k7XG4oZnVuY3Rpb24gKERlbGl2ZXJQb2xpY3kpIHtcbiAgICAvKipcbiAgICAgKiBEZWxpdmVyIGFsbCBtZXNzYWdlc1xuICAgICAqL1xuICAgIERlbGl2ZXJQb2xpY3lbXCJBbGxcIl0gPSBcImFsbFwiO1xuICAgIC8qKlxuICAgICAqIERlbGl2ZXIgc3RhcnRpbmcgd2l0aCB0aGUgbGFzdCBtZXNzYWdlXG4gICAgICovXG4gICAgRGVsaXZlclBvbGljeVtcIkxhc3RcIl0gPSBcImxhc3RcIjtcbiAgICAvKipcbiAgICAgKiBEZWxpdmVyIHN0YXJ0aW5nIHdpdGggbmV3IG1lc3NhZ2VzXG4gICAgICovXG4gICAgRGVsaXZlclBvbGljeVtcIk5ld1wiXSA9IFwibmV3XCI7XG4gICAgLyoqXG4gICAgICogRGVsaXZlciBzdGFydGluZyB3aXRoIHRoZSBzcGVjaWZpZWQgc2VxdWVuY2VcbiAgICAgKi9cbiAgICBEZWxpdmVyUG9saWN5W1wiU3RhcnRTZXF1ZW5jZVwiXSA9IFwiYnlfc3RhcnRfc2VxdWVuY2VcIjtcbiAgICAvKipcbiAgICAgKiBEZWxpdmVyIHN0YXJ0aW5nIHdpdGggdGhlIHNwZWNpZmllZCB0aW1lXG4gICAgICovXG4gICAgRGVsaXZlclBvbGljeVtcIlN0YXJ0VGltZVwiXSA9IFwiYnlfc3RhcnRfdGltZVwiO1xuICAgIC8qKlxuICAgICAqIERlbGl2ZXIgc3RhcnRpbmcgd2l0aCB0aGUgbGFzdCBtZXNzYWdlcyBmb3IgZXZlcnkgc3ViamVjdFxuICAgICAqL1xuICAgIERlbGl2ZXJQb2xpY3lbXCJMYXN0UGVyU3ViamVjdFwiXSA9IFwibGFzdF9wZXJfc3ViamVjdFwiO1xufSkoRGVsaXZlclBvbGljeSB8fCAoZXhwb3J0cy5EZWxpdmVyUG9saWN5ID0gRGVsaXZlclBvbGljeSA9IHt9KSk7XG52YXIgQWNrUG9saWN5O1xuKGZ1bmN0aW9uIChBY2tQb2xpY3kpIHtcbiAgICAvKipcbiAgICAgKiBNZXNzYWdlcyBkb24ndCBuZWVkIHRvIGJlIEFjaydlZC5cbiAgICAgKi9cbiAgICBBY2tQb2xpY3lbXCJOb25lXCJdID0gXCJub25lXCI7XG4gICAgLyoqXG4gICAgICogQWNrLCBhY2tub3dsZWRnZXMgYWxsIG1lc3NhZ2VzIHdpdGggYSBsb3dlciBzZXF1ZW5jZVxuICAgICAqL1xuICAgIEFja1BvbGljeVtcIkFsbFwiXSA9IFwiYWxsXCI7XG4gICAgLyoqXG4gICAgICogQWxsIHNlcXVlbmNlcyBtdXN0IGJlIGV4cGxpY2l0bHkgYWNrbm93bGVkZ2VkXG4gICAgICovXG4gICAgQWNrUG9saWN5W1wiRXhwbGljaXRcIl0gPSBcImV4cGxpY2l0XCI7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIEFja1BvbGljeVtcIk5vdFNldFwiXSA9IFwiXCI7XG59KShBY2tQb2xpY3kgfHwgKGV4cG9ydHMuQWNrUG9saWN5ID0gQWNrUG9saWN5ID0ge30pKTtcbnZhciBSZXBsYXlQb2xpY3k7XG4oZnVuY3Rpb24gKFJlcGxheVBvbGljeSkge1xuICAgIC8qKlxuICAgICAqIFJlcGxheXMgbWVzc2FnZXMgYXMgZmFzdCBhcyBwb3NzaWJsZVxuICAgICAqL1xuICAgIFJlcGxheVBvbGljeVtcIkluc3RhbnRcIl0gPSBcImluc3RhbnRcIjtcbiAgICAvKipcbiAgICAgKiBSZXBsYXlzIG1lc3NhZ2VzIGZvbGxvd2luZyB0aGUgb3JpZ2luYWwgZGVsYXkgYmV0d2VlbiBtZXNzYWdlc1xuICAgICAqL1xuICAgIFJlcGxheVBvbGljeVtcIk9yaWdpbmFsXCJdID0gXCJvcmlnaW5hbFwiO1xufSkoUmVwbGF5UG9saWN5IHx8IChleHBvcnRzLlJlcGxheVBvbGljeSA9IFJlcGxheVBvbGljeSA9IHt9KSk7XG52YXIgU3RvcmVDb21wcmVzc2lvbjtcbihmdW5jdGlvbiAoU3RvcmVDb21wcmVzc2lvbikge1xuICAgIC8qKlxuICAgICAqIE5vIGNvbXByZXNzaW9uXG4gICAgICovXG4gICAgU3RvcmVDb21wcmVzc2lvbltcIk5vbmVcIl0gPSBcIm5vbmVcIjtcbiAgICAvKipcbiAgICAgKiBTMiBjb21wcmVzc2lvblxuICAgICAqL1xuICAgIFN0b3JlQ29tcHJlc3Npb25bXCJTMlwiXSA9IFwiczJcIjtcbn0pKFN0b3JlQ29tcHJlc3Npb24gfHwgKGV4cG9ydHMuU3RvcmVDb21wcmVzc2lvbiA9IFN0b3JlQ29tcHJlc3Npb24gPSB7fSkpO1xudmFyIENvbnN1bWVyQXBpQWN0aW9uO1xuKGZ1bmN0aW9uIChDb25zdW1lckFwaUFjdGlvbikge1xuICAgIENvbnN1bWVyQXBpQWN0aW9uW1wiQ3JlYXRlT3JVcGRhdGVcIl0gPSBcIlwiO1xuICAgIENvbnN1bWVyQXBpQWN0aW9uW1wiVXBkYXRlXCJdID0gXCJ1cGRhdGVcIjtcbiAgICBDb25zdW1lckFwaUFjdGlvbltcIkNyZWF0ZVwiXSA9IFwiY3JlYXRlXCI7XG59KShDb25zdW1lckFwaUFjdGlvbiB8fCAoZXhwb3J0cy5Db25zdW1lckFwaUFjdGlvbiA9IENvbnN1bWVyQXBpQWN0aW9uID0ge30pKTtcbmZ1bmN0aW9uIGRlZmF1bHRDb25zdW1lcihuYW1lLCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIGRlbGl2ZXJfcG9saWN5OiBEZWxpdmVyUG9saWN5LkFsbCxcbiAgICAgICAgYWNrX3BvbGljeTogQWNrUG9saWN5LkV4cGxpY2l0LFxuICAgICAgICBhY2tfd2FpdDogKDAsIGpzdXRpbF8xLm5hbm9zKSgzMCAqIDEwMDApLFxuICAgICAgICByZXBsYXlfcG9saWN5OiBSZXBsYXlQb2xpY3kuSW5zdGFudCxcbiAgICB9LCBvcHRzKTtcbn1cbmV4cG9ydHMuZGVmYXVsdENvbnN1bWVyID0gZGVmYXVsdENvbnN1bWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anNhcGlfdHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/jetstream/jsapi_types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/jetstream/jsbaseclient_api.js":
/*!*************************************************************!*\
  !*** ./node_modules/nats/lib/jetstream/jsbaseclient_api.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright 2021-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseApiClient = exports.defaultJsOptions = void 0;\nconst encoders_1 = __webpack_require__(/*! ../nats-base-client/encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nconst codec_1 = __webpack_require__(/*! ../nats-base-client/codec */ \"(rsc)/./node_modules/nats/lib/nats-base-client/codec.js\");\nconst util_1 = __webpack_require__(/*! ../nats-base-client/util */ \"(rsc)/./node_modules/nats/lib/nats-base-client/util.js\");\nconst jsutil_1 = __webpack_require__(/*! ./jsutil */ \"(rsc)/./node_modules/nats/lib/jetstream/jsutil.js\");\nconst defaultPrefix = \"$JS.API\";\nconst defaultTimeout = 5000;\nfunction defaultJsOptions(opts) {\n    opts = opts || {};\n    if (opts.domain) {\n        opts.apiPrefix = `$JS.${opts.domain}.API`;\n        delete opts.domain;\n    }\n    return (0, util_1.extend)({ apiPrefix: defaultPrefix, timeout: defaultTimeout }, opts);\n}\nexports.defaultJsOptions = defaultJsOptions;\nclass BaseApiClient {\n    constructor(nc, opts) {\n        this.nc = nc;\n        this.opts = defaultJsOptions(opts);\n        this._parseOpts();\n        this.prefix = this.opts.apiPrefix;\n        this.timeout = this.opts.timeout;\n        this.jc = (0, codec_1.JSONCodec)();\n    }\n    getOptions() {\n        return Object.assign({}, this.opts);\n    }\n    _parseOpts() {\n        let prefix = this.opts.apiPrefix;\n        if (!prefix || prefix.length === 0) {\n            throw new Error(\"invalid empty prefix\");\n        }\n        const c = prefix[prefix.length - 1];\n        if (c === \".\") {\n            prefix = prefix.substr(0, prefix.length - 1);\n        }\n        this.opts.apiPrefix = prefix;\n    }\n    _request(subj, data = null, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            opts = opts || {};\n            opts.timeout = this.timeout;\n            let a = encoders_1.Empty;\n            if (data) {\n                a = this.jc.encode(data);\n            }\n            const m = yield this.nc.request(subj, a, opts);\n            return this.parseJsResponse(m);\n        });\n    }\n    findStream(subject) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const q = { subject };\n            const r = yield this._request(`${this.prefix}.STREAM.NAMES`, q);\n            const names = r;\n            if (!names.streams || names.streams.length !== 1) {\n                throw new Error(\"no stream matches subject\");\n            }\n            return names.streams[0];\n        });\n    }\n    getConnection() {\n        return this.nc;\n    }\n    parseJsResponse(m) {\n        const v = this.jc.decode(m.data);\n        const r = v;\n        if (r.error) {\n            const err = (0, jsutil_1.checkJsErrorCode)(r.error.code, r.error.description);\n            if (err !== null) {\n                err.api_error = r.error;\n                throw err;\n            }\n        }\n        return v;\n    }\n}\nexports.BaseApiClient = BaseApiClient;\n//# sourceMappingURL=jsbaseclient_api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvamV0c3RyZWFtL2pzYmFzZWNsaWVudF9hcGkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUIsR0FBRyx3QkFBd0I7QUFDaEQsbUJBQW1CLG1CQUFPLENBQUMsZ0dBQThCO0FBQ3pELGdCQUFnQixtQkFBTyxDQUFDLDBGQUEyQjtBQUNuRCxlQUFlLG1CQUFPLENBQUMsd0ZBQTBCO0FBQ2pELGlCQUFpQixtQkFBTyxDQUFDLG1FQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsWUFBWTtBQUM1QztBQUNBO0FBQ0EsZ0NBQWdDLG1EQUFtRDtBQUNuRjtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIsNkNBQTZDLFlBQVk7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvamV0c3RyZWFtL2pzYmFzZWNsaWVudF9hcGkuanM/MWRjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMS0yMDIzIFRoZSBOQVRTIEF1dGhvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQmFzZUFwaUNsaWVudCA9IGV4cG9ydHMuZGVmYXVsdEpzT3B0aW9ucyA9IHZvaWQgMDtcbmNvbnN0IGVuY29kZXJzXzEgPSByZXF1aXJlKFwiLi4vbmF0cy1iYXNlLWNsaWVudC9lbmNvZGVyc1wiKTtcbmNvbnN0IGNvZGVjXzEgPSByZXF1aXJlKFwiLi4vbmF0cy1iYXNlLWNsaWVudC9jb2RlY1wiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi9uYXRzLWJhc2UtY2xpZW50L3V0aWxcIik7XG5jb25zdCBqc3V0aWxfMSA9IHJlcXVpcmUoXCIuL2pzdXRpbFwiKTtcbmNvbnN0IGRlZmF1bHRQcmVmaXggPSBcIiRKUy5BUElcIjtcbmNvbnN0IGRlZmF1bHRUaW1lb3V0ID0gNTAwMDtcbmZ1bmN0aW9uIGRlZmF1bHRKc09wdGlvbnMob3B0cykge1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgIGlmIChvcHRzLmRvbWFpbikge1xuICAgICAgICBvcHRzLmFwaVByZWZpeCA9IGAkSlMuJHtvcHRzLmRvbWFpbn0uQVBJYDtcbiAgICAgICAgZGVsZXRlIG9wdHMuZG9tYWluO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIHV0aWxfMS5leHRlbmQpKHsgYXBpUHJlZml4OiBkZWZhdWx0UHJlZml4LCB0aW1lb3V0OiBkZWZhdWx0VGltZW91dCB9LCBvcHRzKTtcbn1cbmV4cG9ydHMuZGVmYXVsdEpzT3B0aW9ucyA9IGRlZmF1bHRKc09wdGlvbnM7XG5jbGFzcyBCYXNlQXBpQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvcihuYywgb3B0cykge1xuICAgICAgICB0aGlzLm5jID0gbmM7XG4gICAgICAgIHRoaXMub3B0cyA9IGRlZmF1bHRKc09wdGlvbnMob3B0cyk7XG4gICAgICAgIHRoaXMuX3BhcnNlT3B0cygpO1xuICAgICAgICB0aGlzLnByZWZpeCA9IHRoaXMub3B0cy5hcGlQcmVmaXg7XG4gICAgICAgIHRoaXMudGltZW91dCA9IHRoaXMub3B0cy50aW1lb3V0O1xuICAgICAgICB0aGlzLmpjID0gKDAsIGNvZGVjXzEuSlNPTkNvZGVjKSgpO1xuICAgIH1cbiAgICBnZXRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHRzKTtcbiAgICB9XG4gICAgX3BhcnNlT3B0cygpIHtcbiAgICAgICAgbGV0IHByZWZpeCA9IHRoaXMub3B0cy5hcGlQcmVmaXg7XG4gICAgICAgIGlmICghcHJlZml4IHx8IHByZWZpeC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZW1wdHkgcHJlZml4XCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGMgPSBwcmVmaXhbcHJlZml4Lmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAoYyA9PT0gXCIuXCIpIHtcbiAgICAgICAgICAgIHByZWZpeCA9IHByZWZpeC5zdWJzdHIoMCwgcHJlZml4Lmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0cy5hcGlQcmVmaXggPSBwcmVmaXg7XG4gICAgfVxuICAgIF9yZXF1ZXN0KHN1YmosIGRhdGEgPSBudWxsLCBvcHRzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICAgICAgICAgIG9wdHMudGltZW91dCA9IHRoaXMudGltZW91dDtcbiAgICAgICAgICAgIGxldCBhID0gZW5jb2RlcnNfMS5FbXB0eTtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgYSA9IHRoaXMuamMuZW5jb2RlKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbSA9IHlpZWxkIHRoaXMubmMucmVxdWVzdChzdWJqLCBhLCBvcHRzKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlSnNSZXNwb25zZShtKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZpbmRTdHJlYW0oc3ViamVjdCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgcSA9IHsgc3ViamVjdCB9O1xuICAgICAgICAgICAgY29uc3QgciA9IHlpZWxkIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5wcmVmaXh9LlNUUkVBTS5OQU1FU2AsIHEpO1xuICAgICAgICAgICAgY29uc3QgbmFtZXMgPSByO1xuICAgICAgICAgICAgaWYgKCFuYW1lcy5zdHJlYW1zIHx8IG5hbWVzLnN0cmVhbXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm8gc3RyZWFtIG1hdGNoZXMgc3ViamVjdFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuYW1lcy5zdHJlYW1zWzBdO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0Q29ubmVjdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmM7XG4gICAgfVxuICAgIHBhcnNlSnNSZXNwb25zZShtKSB7XG4gICAgICAgIGNvbnN0IHYgPSB0aGlzLmpjLmRlY29kZShtLmRhdGEpO1xuICAgICAgICBjb25zdCByID0gdjtcbiAgICAgICAgaWYgKHIuZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IGVyciA9ICgwLCBqc3V0aWxfMS5jaGVja0pzRXJyb3JDb2RlKShyLmVycm9yLmNvZGUsIHIuZXJyb3IuZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgaWYgKGVyciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGVyci5hcGlfZXJyb3IgPSByLmVycm9yO1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdjtcbiAgICB9XG59XG5leHBvcnRzLkJhc2VBcGlDbGllbnQgPSBCYXNlQXBpQ2xpZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anNiYXNlY2xpZW50X2FwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/jetstream/jsbaseclient_api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/jetstream/jsclient.js":
/*!*****************************************************!*\
  !*** ./node_modules/nats/lib/jetstream/jsclient.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright 2022-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JetStreamSubscriptionImpl = exports.JetStreamClientImpl = exports.PubHeaders = void 0;\nconst types_1 = __webpack_require__(/*! ../nats-base-client/types */ \"(rsc)/./node_modules/nats/lib/nats-base-client/types.js\");\nconst jsbaseclient_api_1 = __webpack_require__(/*! ./jsbaseclient_api */ \"(rsc)/./node_modules/nats/lib/jetstream/jsbaseclient_api.js\");\nconst jsutil_1 = __webpack_require__(/*! ./jsutil */ \"(rsc)/./node_modules/nats/lib/jetstream/jsutil.js\");\nconst jsmconsumer_api_1 = __webpack_require__(/*! ./jsmconsumer_api */ \"(rsc)/./node_modules/nats/lib/jetstream/jsmconsumer_api.js\");\nconst jsmsg_1 = __webpack_require__(/*! ./jsmsg */ \"(rsc)/./node_modules/nats/lib/jetstream/jsmsg.js\");\nconst typedsub_1 = __webpack_require__(/*! ../nats-base-client/typedsub */ \"(rsc)/./node_modules/nats/lib/nats-base-client/typedsub.js\");\nconst queued_iterator_1 = __webpack_require__(/*! ../nats-base-client/queued_iterator */ \"(rsc)/./node_modules/nats/lib/nats-base-client/queued_iterator.js\");\nconst util_1 = __webpack_require__(/*! ../nats-base-client/util */ \"(rsc)/./node_modules/nats/lib/nats-base-client/util.js\");\nconst headers_1 = __webpack_require__(/*! ../nats-base-client/headers */ \"(rsc)/./node_modules/nats/lib/nats-base-client/headers.js\");\nconst kv_1 = __webpack_require__(/*! ./kv */ \"(rsc)/./node_modules/nats/lib/jetstream/kv.js\");\nconst semver_1 = __webpack_require__(/*! ../nats-base-client/semver */ \"(rsc)/./node_modules/nats/lib/nats-base-client/semver.js\");\nconst objectstore_1 = __webpack_require__(/*! ./objectstore */ \"(rsc)/./node_modules/nats/lib/jetstream/objectstore.js\");\nconst idleheartbeat_monitor_1 = __webpack_require__(/*! ../nats-base-client/idleheartbeat_monitor */ \"(rsc)/./node_modules/nats/lib/nats-base-client/idleheartbeat_monitor.js\");\nconst jsmstream_api_1 = __webpack_require__(/*! ./jsmstream_api */ \"(rsc)/./node_modules/nats/lib/jetstream/jsmstream_api.js\");\nconst types_2 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/nats/lib/jetstream/types.js\");\nconst core_1 = __webpack_require__(/*! ../nats-base-client/core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nconst jsapi_types_1 = __webpack_require__(/*! ./jsapi_types */ \"(rsc)/./node_modules/nats/lib/jetstream/jsapi_types.js\");\nvar PubHeaders;\n(function (PubHeaders) {\n    PubHeaders[\"MsgIdHdr\"] = \"Nats-Msg-Id\";\n    PubHeaders[\"ExpectedStreamHdr\"] = \"Nats-Expected-Stream\";\n    PubHeaders[\"ExpectedLastSeqHdr\"] = \"Nats-Expected-Last-Sequence\";\n    PubHeaders[\"ExpectedLastMsgIdHdr\"] = \"Nats-Expected-Last-Msg-Id\";\n    PubHeaders[\"ExpectedLastSubjectSequenceHdr\"] = \"Nats-Expected-Last-Subject-Sequence\";\n})(PubHeaders || (exports.PubHeaders = PubHeaders = {}));\nclass ViewsImpl {\n    constructor(js) {\n        this.js = js;\n    }\n    kv(name, opts = {}) {\n        const jsi = this.js;\n        const { ok, min } = jsi.nc.features.get(semver_1.Feature.JS_KV);\n        if (!ok) {\n            return Promise.reject(new Error(`kv is only supported on servers ${min} or better`));\n        }\n        if (opts.bindOnly) {\n            return kv_1.Bucket.bind(this.js, name);\n        }\n        return kv_1.Bucket.create(this.js, name, opts);\n    }\n    os(name, opts = {}) {\n        var _a;\n        if (typeof ((_a = crypto === null || crypto === void 0 ? void 0 : crypto.subtle) === null || _a === void 0 ? void 0 : _a.digest) !== \"function\") {\n            return Promise.reject(new Error(\"objectstore: unable to calculate hashes - crypto.subtle.digest with sha256 support is required\"));\n        }\n        const jsi = this.js;\n        const { ok, min } = jsi.nc.features.get(semver_1.Feature.JS_OBJECTSTORE);\n        if (!ok) {\n            return Promise.reject(new Error(`objectstore is only supported on servers ${min} or better`));\n        }\n        return objectstore_1.ObjectStoreImpl.create(this.js, name, opts);\n    }\n}\nclass JetStreamClientImpl extends jsbaseclient_api_1.BaseApiClient {\n    constructor(nc, opts) {\n        super(nc, opts);\n        this.consumerAPI = new jsmconsumer_api_1.ConsumerAPIImpl(nc, opts);\n        this.streamAPI = new jsmstream_api_1.StreamAPIImpl(nc, opts);\n        this.consumers = new jsmstream_api_1.ConsumersImpl(this.consumerAPI);\n        this.streams = new jsmstream_api_1.StreamsImpl(this.streamAPI);\n    }\n    jetstreamManager(checkAPI) {\n        const opts = Object.assign({ checkAPI }, this.opts);\n        return this.nc.jetstreamManager(opts);\n    }\n    get apiPrefix() {\n        return this.prefix;\n    }\n    get views() {\n        return new ViewsImpl(this);\n    }\n    publish(subj, data = types_1.Empty, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            opts = opts || {};\n            opts.expect = opts.expect || {};\n            const mh = (opts === null || opts === void 0 ? void 0 : opts.headers) || (0, headers_1.headers)();\n            if (opts) {\n                if (opts.msgID) {\n                    mh.set(PubHeaders.MsgIdHdr, opts.msgID);\n                }\n                if (opts.expect.lastMsgID) {\n                    mh.set(PubHeaders.ExpectedLastMsgIdHdr, opts.expect.lastMsgID);\n                }\n                if (opts.expect.streamName) {\n                    mh.set(PubHeaders.ExpectedStreamHdr, opts.expect.streamName);\n                }\n                if (typeof opts.expect.lastSequence === \"number\") {\n                    mh.set(PubHeaders.ExpectedLastSeqHdr, `${opts.expect.lastSequence}`);\n                }\n                if (typeof opts.expect.lastSubjectSequence === \"number\") {\n                    mh.set(PubHeaders.ExpectedLastSubjectSequenceHdr, `${opts.expect.lastSubjectSequence}`);\n                }\n            }\n            const to = opts.timeout || this.timeout;\n            const ro = {};\n            if (to) {\n                ro.timeout = to;\n            }\n            if (opts) {\n                ro.headers = mh;\n            }\n            let { retries, retry_delay } = opts;\n            retries = retries || 1;\n            retry_delay = retry_delay || 250;\n            let r;\n            for (let i = 0; i < retries; i++) {\n                try {\n                    r = yield this.nc.request(subj, data, ro);\n                    // if here we succeeded\n                    break;\n                }\n                catch (err) {\n                    const ne = err;\n                    if (ne.code === \"503\" && i + 1 < retries) {\n                        yield (0, util_1.delay)(retry_delay);\n                    }\n                    else {\n                        throw err;\n                    }\n                }\n            }\n            const pa = this.parseJsResponse(r);\n            if (pa.stream === \"\") {\n                throw types_1.NatsError.errorForCode(core_1.ErrorCode.JetStreamInvalidAck);\n            }\n            pa.duplicate = pa.duplicate ? pa.duplicate : false;\n            return pa;\n        });\n    }\n    pull(stream, durable, expires = 0) {\n        return __awaiter(this, void 0, void 0, function* () {\n            (0, jsutil_1.validateStreamName)(stream);\n            (0, jsutil_1.validateDurableName)(durable);\n            let timeout = this.timeout;\n            if (expires > timeout) {\n                timeout = expires;\n            }\n            expires = expires < 0 ? 0 : (0, jsutil_1.nanos)(expires);\n            const pullOpts = {\n                batch: 1,\n                no_wait: expires === 0,\n                expires,\n            };\n            const msg = yield this.nc.request(`${this.prefix}.CONSUMER.MSG.NEXT.${stream}.${durable}`, this.jc.encode(pullOpts), { noMux: true, timeout });\n            const err = (0, jsutil_1.checkJsError)(msg);\n            if (err) {\n                throw err;\n            }\n            return (0, jsmsg_1.toJsMsg)(msg);\n        });\n    }\n    /*\n     * Returns available messages upto specified batch count.\n     * If expires is set the iterator will wait for the specified\n     * amount of millis before closing the subscription.\n     * If no_wait is specified, the iterator will return no messages.\n     * @param stream\n     * @param durable\n     * @param opts\n     */\n    fetch(stream, durable, opts = {}) {\n        var _a;\n        (0, jsutil_1.validateStreamName)(stream);\n        (0, jsutil_1.validateDurableName)(durable);\n        let timer = null;\n        const trackBytes = ((_a = opts.max_bytes) !== null && _a !== void 0 ? _a : 0) > 0;\n        let receivedBytes = 0;\n        const max_bytes = trackBytes ? opts.max_bytes : 0;\n        let monitor = null;\n        const args = {};\n        args.batch = opts.batch || 1;\n        if (max_bytes) {\n            const fv = this.nc.features.get(semver_1.Feature.JS_PULL_MAX_BYTES);\n            if (!fv.ok) {\n                throw new Error(`max_bytes is only supported on servers ${fv.min} or better`);\n            }\n            args.max_bytes = max_bytes;\n        }\n        args.no_wait = opts.no_wait || false;\n        if (args.no_wait && args.expires) {\n            args.expires = 0;\n        }\n        const expires = opts.expires || 0;\n        if (expires) {\n            args.expires = (0, jsutil_1.nanos)(expires);\n        }\n        if (expires === 0 && args.no_wait === false) {\n            throw new Error(\"expires or no_wait is required\");\n        }\n        const hb = opts.idle_heartbeat || 0;\n        if (hb) {\n            args.idle_heartbeat = (0, jsutil_1.nanos)(hb);\n            //@ts-ignore: for testing\n            if (opts.delay_heartbeat === true) {\n                //@ts-ignore: test option\n                args.idle_heartbeat = (0, jsutil_1.nanos)(hb * 4);\n            }\n        }\n        const qi = new queued_iterator_1.QueuedIteratorImpl();\n        const wants = args.batch;\n        let received = 0;\n        qi.protocolFilterFn = (jm, _ingest = false) => {\n            const jsmi = jm;\n            if ((0, jsutil_1.isHeartbeatMsg)(jsmi.msg)) {\n                monitor === null || monitor === void 0 ? void 0 : monitor.work();\n                return false;\n            }\n            return true;\n        };\n        // FIXME: this looks weird, we want to stop the iterator\n        //   but doing it from a dispatchedFn...\n        qi.dispatchedFn = (m) => {\n            if (m) {\n                if (trackBytes) {\n                    receivedBytes += m.data.length;\n                }\n                received++;\n                if (timer && m.info.pending === 0) {\n                    // the expiration will close it\n                    return;\n                }\n                // if we have one pending and we got the expected\n                // or there are no more stop the iterator\n                if (qi.getPending() === 1 && m.info.pending === 0 || wants === received ||\n                    (max_bytes > 0 && receivedBytes >= max_bytes)) {\n                    qi.stop();\n                }\n            }\n        };\n        const inbox = (0, core_1.createInbox)(this.nc.options.inboxPrefix);\n        const sub = this.nc.subscribe(inbox, {\n            max: opts.batch,\n            callback: (err, msg) => {\n                if (err === null) {\n                    err = (0, jsutil_1.checkJsError)(msg);\n                }\n                if (err !== null) {\n                    if (timer) {\n                        timer.cancel();\n                        timer = null;\n                    }\n                    if ((0, core_1.isNatsError)(err)) {\n                        qi.stop(hideNonTerminalJsErrors(err) === null ? undefined : err);\n                    }\n                    else {\n                        qi.stop(err);\n                    }\n                }\n                else {\n                    // if we are doing heartbeats, message resets\n                    monitor === null || monitor === void 0 ? void 0 : monitor.work();\n                    qi.received++;\n                    qi.push((0, jsmsg_1.toJsMsg)(msg));\n                }\n            },\n        });\n        // timer on the client  the issue is that the request\n        // is started on the client, which means that it will expire\n        // on the client first\n        if (expires) {\n            timer = (0, util_1.timeout)(expires);\n            timer.catch(() => {\n                if (!sub.isClosed()) {\n                    sub.drain()\n                        .catch(() => { });\n                    timer = null;\n                }\n                if (monitor) {\n                    monitor.cancel();\n                }\n            });\n        }\n        (() => __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (hb) {\n                    monitor = new idleheartbeat_monitor_1.IdleHeartbeatMonitor(hb, (v) => {\n                        //@ts-ignore: pushing a fn\n                        qi.push(() => {\n                            // this will terminate the iterator\n                            qi.err = new types_1.NatsError(`${jsutil_1.Js409Errors.IdleHeartbeatMissed}: ${v}`, core_1.ErrorCode.JetStreamIdleHeartBeat);\n                        });\n                        return true;\n                    });\n                }\n            }\n            catch (_err) {\n                // ignore it\n            }\n            // close the iterator if the connection or subscription closes unexpectedly\n            yield sub.closed;\n            if (timer !== null) {\n                timer.cancel();\n                timer = null;\n            }\n            if (monitor) {\n                monitor.cancel();\n            }\n            qi.stop();\n        }))().catch();\n        this.nc.publish(`${this.prefix}.CONSUMER.MSG.NEXT.${stream}.${durable}`, this.jc.encode(args), { reply: inbox });\n        return qi;\n    }\n    pullSubscribe(subject, opts = (0, types_2.consumerOpts)()) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cso = yield this._processOptions(subject, opts);\n            if (cso.ordered) {\n                throw new Error(\"pull subscribers cannot be be ordered\");\n            }\n            if (cso.config.deliver_subject) {\n                throw new Error(\"consumer info specifies deliver_subject - pull consumers cannot have deliver_subject set\");\n            }\n            const ackPolicy = cso.config.ack_policy;\n            if (ackPolicy === jsapi_types_1.AckPolicy.None || ackPolicy === jsapi_types_1.AckPolicy.All) {\n                throw new Error(\"ack policy for pull consumers must be explicit\");\n            }\n            const so = this._buildTypedSubscriptionOpts(cso);\n            const sub = new JetStreamPullSubscriptionImpl(this, cso.deliver, so);\n            sub.info = cso;\n            try {\n                yield this._maybeCreateConsumer(cso);\n            }\n            catch (err) {\n                sub.unsubscribe();\n                throw err;\n            }\n            return sub;\n        });\n    }\n    subscribe(subject, opts = (0, types_2.consumerOpts)()) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cso = yield this._processOptions(subject, opts);\n            // this effectively requires deliver subject to be specified\n            // as an option otherwise we have a pull consumer\n            if (!cso.isBind && !cso.config.deliver_subject) {\n                throw new Error(\"push consumer requires deliver_subject\");\n            }\n            const so = this._buildTypedSubscriptionOpts(cso);\n            const sub = new JetStreamSubscriptionImpl(this, cso.deliver, so);\n            sub.info = cso;\n            try {\n                yield this._maybeCreateConsumer(cso);\n            }\n            catch (err) {\n                sub.unsubscribe();\n                throw err;\n            }\n            sub._maybeSetupHbMonitoring();\n            return sub;\n        });\n    }\n    _processOptions(subject, opts = (0, types_2.consumerOpts)()) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const jsi = ((0, types_2.isConsumerOptsBuilder)(opts)\n                ? opts.getOpts()\n                : opts);\n            jsi.isBind = (0, types_2.isConsumerOptsBuilder)(opts) ? opts.isBind : false;\n            jsi.flow_control = {\n                heartbeat_count: 0,\n                fc_count: 0,\n                consumer_restarts: 0,\n            };\n            if (jsi.ordered) {\n                jsi.ordered_consumer_sequence = { stream_seq: 0, delivery_seq: 0 };\n                if (jsi.config.ack_policy !== jsapi_types_1.AckPolicy.NotSet &&\n                    jsi.config.ack_policy !== jsapi_types_1.AckPolicy.None) {\n                    throw new types_1.NatsError(\"ordered consumer: ack_policy can only be set to 'none'\", core_1.ErrorCode.ApiError);\n                }\n                if (jsi.config.durable_name && jsi.config.durable_name.length > 0) {\n                    throw new types_1.NatsError(\"ordered consumer: durable_name cannot be set\", core_1.ErrorCode.ApiError);\n                }\n                if (jsi.config.deliver_subject && jsi.config.deliver_subject.length > 0) {\n                    throw new types_1.NatsError(\"ordered consumer: deliver_subject cannot be set\", core_1.ErrorCode.ApiError);\n                }\n                if (jsi.config.max_deliver !== undefined && jsi.config.max_deliver > 1) {\n                    throw new types_1.NatsError(\"ordered consumer: max_deliver cannot be set\", core_1.ErrorCode.ApiError);\n                }\n                if (jsi.config.deliver_group && jsi.config.deliver_group.length > 0) {\n                    throw new types_1.NatsError(\"ordered consumer: deliver_group cannot be set\", core_1.ErrorCode.ApiError);\n                }\n                jsi.config.deliver_subject = (0, core_1.createInbox)(this.nc.options.inboxPrefix);\n                jsi.config.ack_policy = jsapi_types_1.AckPolicy.None;\n                jsi.config.max_deliver = 1;\n                jsi.config.flow_control = true;\n                jsi.config.idle_heartbeat = jsi.config.idle_heartbeat || (0, jsutil_1.nanos)(5000);\n                jsi.config.ack_wait = (0, jsutil_1.nanos)(22 * 60 * 60 * 1000);\n                jsi.config.mem_storage = true;\n                jsi.config.num_replicas = 1;\n            }\n            if (jsi.config.ack_policy === jsapi_types_1.AckPolicy.NotSet) {\n                jsi.config.ack_policy = jsapi_types_1.AckPolicy.All;\n            }\n            jsi.api = this;\n            jsi.config = jsi.config || {};\n            jsi.stream = jsi.stream ? jsi.stream : yield this.findStream(subject);\n            jsi.attached = false;\n            if (jsi.config.durable_name) {\n                try {\n                    const info = yield this.consumerAPI.info(jsi.stream, jsi.config.durable_name);\n                    if (info) {\n                        if (info.config.filter_subject && info.config.filter_subject !== subject) {\n                            throw new Error(\"subject does not match consumer\");\n                        }\n                        // check if server returned push_bound, but there's no qn\n                        const qn = (_a = jsi.config.deliver_group) !== null && _a !== void 0 ? _a : \"\";\n                        if (qn === \"\" && info.push_bound === true) {\n                            throw new Error(`duplicate subscription`);\n                        }\n                        const rqn = (_b = info.config.deliver_group) !== null && _b !== void 0 ? _b : \"\";\n                        if (qn !== rqn) {\n                            if (rqn === \"\") {\n                                throw new Error(`durable requires no queue group`);\n                            }\n                            else {\n                                throw new Error(`durable requires queue group '${rqn}'`);\n                            }\n                        }\n                        jsi.last = info;\n                        jsi.config = info.config;\n                        jsi.attached = true;\n                        // if not a durable capture the name of the ephemeral so\n                        // that consumerInfo from the sub will work\n                        if (!jsi.config.durable_name) {\n                            jsi.name = info.name;\n                        }\n                    }\n                }\n                catch (err) {\n                    //consumer doesn't exist\n                    if (err.code !== \"404\") {\n                        throw err;\n                    }\n                }\n            }\n            if (!jsi.attached && jsi.config.filter_subject === undefined &&\n                jsi.config.filter_subjects === undefined) {\n                // if no filter specified, we set the subject as the filter\n                jsi.config.filter_subject = subject;\n            }\n            jsi.deliver = jsi.config.deliver_subject ||\n                (0, core_1.createInbox)(this.nc.options.inboxPrefix);\n            return jsi;\n        });\n    }\n    _buildTypedSubscriptionOpts(jsi) {\n        const so = {};\n        so.adapter = msgAdapter(jsi.callbackFn === undefined);\n        so.ingestionFilterFn = JetStreamClientImpl.ingestionFn(jsi.ordered);\n        so.protocolFilterFn = (jm, ingest = false) => {\n            const jsmi = jm;\n            if ((0, jsutil_1.isFlowControlMsg)(jsmi.msg)) {\n                if (!ingest) {\n                    jsmi.msg.respond();\n                }\n                return false;\n            }\n            return true;\n        };\n        if (!jsi.mack && jsi.config.ack_policy !== jsapi_types_1.AckPolicy.None) {\n            so.dispatchedFn = autoAckJsMsg;\n        }\n        if (jsi.callbackFn) {\n            so.callback = jsi.callbackFn;\n        }\n        so.max = jsi.max || 0;\n        so.queue = jsi.queue;\n        return so;\n    }\n    _maybeCreateConsumer(jsi) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (jsi.attached) {\n                return;\n            }\n            if (jsi.isBind) {\n                throw new Error(`unable to bind - durable consumer ${jsi.config.durable_name} doesn't exist in ${jsi.stream}`);\n            }\n            jsi.config = Object.assign({\n                deliver_policy: jsapi_types_1.DeliverPolicy.All,\n                ack_policy: jsapi_types_1.AckPolicy.Explicit,\n                ack_wait: (0, jsutil_1.nanos)(30 * 1000),\n                replay_policy: jsapi_types_1.ReplayPolicy.Instant,\n            }, jsi.config);\n            const ci = yield this.consumerAPI.add(jsi.stream, jsi.config);\n            if (Array.isArray(jsi.config.filter_subjects && !Array.isArray(ci.config.filter_subjects))) {\n                // server didn't honor `filter_subjects`\n                throw new Error(`jetstream server doesn't support consumers with multiple filter subjects`);\n            }\n            jsi.name = ci.name;\n            jsi.config = ci.config;\n            jsi.last = ci;\n        });\n    }\n    static ingestionFn(ordered) {\n        return (jm, ctx) => {\n            var _a;\n            // ctx is expected to be the iterator (the JetstreamSubscriptionImpl)\n            const jsub = ctx;\n            // this shouldn't happen\n            if (!jm)\n                return { ingest: false, protocol: false };\n            const jmi = jm;\n            if (!(0, jsutil_1.checkJsError)(jmi.msg)) {\n                (_a = jsub.monitor) === null || _a === void 0 ? void 0 : _a.work();\n            }\n            if ((0, jsutil_1.isHeartbeatMsg)(jmi.msg)) {\n                const ingest = ordered ? jsub._checkHbOrderConsumer(jmi.msg) : true;\n                if (!ordered) {\n                    jsub.info.flow_control.heartbeat_count++;\n                }\n                return { ingest, protocol: true };\n            }\n            else if ((0, jsutil_1.isFlowControlMsg)(jmi.msg)) {\n                jsub.info.flow_control.fc_count++;\n                return { ingest: true, protocol: true };\n            }\n            const ingest = ordered ? jsub._checkOrderedConsumer(jm) : true;\n            return { ingest, protocol: false };\n        };\n    }\n}\nexports.JetStreamClientImpl = JetStreamClientImpl;\nclass JetStreamSubscriptionImpl extends typedsub_1.TypedSubscription {\n    constructor(js, subject, opts) {\n        super(js.nc, subject, opts);\n        this.js = js;\n        this.monitor = null;\n        this.sub.closed.then(() => {\n            if (this.monitor) {\n                this.monitor.cancel();\n            }\n        });\n    }\n    set info(info) {\n        this.sub.info = info;\n    }\n    get info() {\n        return this.sub.info;\n    }\n    _resetOrderedConsumer(sseq) {\n        if (this.info === null || this.sub.isClosed()) {\n            return;\n        }\n        const newDeliver = (0, core_1.createInbox)(this.js.nc.options.inboxPrefix);\n        const nci = this.js.nc;\n        nci._resub(this.sub, newDeliver);\n        const info = this.info;\n        info.ordered_consumer_sequence.delivery_seq = 0;\n        info.flow_control.heartbeat_count = 0;\n        info.flow_control.fc_count = 0;\n        info.flow_control.consumer_restarts++;\n        info.deliver = newDeliver;\n        info.config.deliver_subject = newDeliver;\n        info.config.deliver_policy = jsapi_types_1.DeliverPolicy.StartSequence;\n        info.config.opt_start_seq = sseq;\n        // put the stream name\n        const req = {};\n        req.stream_name = this.info.stream;\n        req.config = info.config;\n        const subj = `${info.api.prefix}.CONSUMER.CREATE.${info.stream}`;\n        this.js._request(subj, req)\n            .then((v) => {\n            const ci = v;\n            this.info.config = ci.config;\n            this.info.name = ci.name;\n        })\n            .catch((err) => {\n            // to inform the subscription we inject an error this will\n            // be at after the last message if using an iterator.\n            const nerr = new types_1.NatsError(`unable to recreate ordered consumer ${info.stream} at seq ${sseq}`, core_1.ErrorCode.RequestError, err);\n            this.sub.callback(nerr, {});\n        });\n    }\n    // this is called by push subscriptions, to initialize the monitoring\n    // if configured on the consumer\n    _maybeSetupHbMonitoring() {\n        var _a, _b;\n        const ns = ((_b = (_a = this.info) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.idle_heartbeat) || 0;\n        if (ns) {\n            this._setupHbMonitoring((0, jsutil_1.millis)(ns));\n        }\n    }\n    _setupHbMonitoring(millis, cancelAfter = 0) {\n        const opts = { cancelAfter: 0, maxOut: 2 };\n        if (cancelAfter) {\n            opts.cancelAfter = cancelAfter;\n        }\n        const sub = this.sub;\n        const handler = (v) => {\n            var _a, _b, _c;\n            const msg = (0, jsutil_1.newJsErrorMsg)(409, `${jsutil_1.Js409Errors.IdleHeartbeatMissed}: ${v}`, this.sub.subject);\n            const ordered = (_a = this.info) === null || _a === void 0 ? void 0 : _a.ordered;\n            // non-ordered consumers are always notified of the condition\n            // as they need to try and recover\n            if (!ordered) {\n                this.sub.callback(null, msg);\n            }\n            else {\n                if (!this.js.nc.protocol.connected) {\n                    // we are not connected don't do anything\n                    return false;\n                }\n                // reset the consumer\n                const seq = ((_c = (_b = this.info) === null || _b === void 0 ? void 0 : _b.ordered_consumer_sequence) === null || _c === void 0 ? void 0 : _c.stream_seq) || 0;\n                this._resetOrderedConsumer(seq + 1);\n                // if we are ordered, we will reset the consumer and keep\n                // feeding the iterator or callback - we are not stopping\n                return false;\n            }\n            // let the hb monitor know if we are stopping for callbacks\n            // we don't as we deliver the errors via the cb.\n            return !sub.noIterator;\n        };\n        // this only applies for push subscriptions\n        this.monitor = new idleheartbeat_monitor_1.IdleHeartbeatMonitor(millis, handler, opts);\n    }\n    _checkHbOrderConsumer(msg) {\n        const rm = msg.headers.get(types_2.JsHeaders.ConsumerStalledHdr);\n        if (rm !== \"\") {\n            const nci = this.js.nc;\n            nci.publish(rm);\n        }\n        const lastDelivered = parseInt(msg.headers.get(types_2.JsHeaders.LastConsumerSeqHdr), 10);\n        const ordered = this.info.ordered_consumer_sequence;\n        this.info.flow_control.heartbeat_count++;\n        if (lastDelivered !== ordered.delivery_seq) {\n            this._resetOrderedConsumer(ordered.stream_seq + 1);\n        }\n        return false;\n    }\n    _checkOrderedConsumer(jm) {\n        const ordered = this.info.ordered_consumer_sequence;\n        const sseq = jm.info.streamSequence;\n        const dseq = jm.info.deliverySequence;\n        if (dseq != ordered.delivery_seq + 1) {\n            this._resetOrderedConsumer(ordered.stream_seq + 1);\n            return false;\n        }\n        ordered.delivery_seq = dseq;\n        ordered.stream_seq = sseq;\n        return true;\n    }\n    destroy() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.isClosed()) {\n                yield this.drain();\n            }\n            const jinfo = this.sub.info;\n            const name = jinfo.config.durable_name || jinfo.name;\n            const subj = `${jinfo.api.prefix}.CONSUMER.DELETE.${jinfo.stream}.${name}`;\n            yield jinfo.api._request(subj);\n        });\n    }\n    consumerInfo() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const jinfo = this.sub.info;\n            const name = jinfo.config.durable_name || jinfo.name;\n            const subj = `${jinfo.api.prefix}.CONSUMER.INFO.${jinfo.stream}.${name}`;\n            const ci = yield jinfo.api._request(subj);\n            jinfo.last = ci;\n            return ci;\n        });\n    }\n}\nexports.JetStreamSubscriptionImpl = JetStreamSubscriptionImpl;\nclass JetStreamPullSubscriptionImpl extends JetStreamSubscriptionImpl {\n    constructor(js, subject, opts) {\n        super(js, subject, opts);\n    }\n    pull(opts = { batch: 1 }) {\n        var _a, _b;\n        const { stream, config, name } = this.sub.info;\n        const consumer = (_a = config.durable_name) !== null && _a !== void 0 ? _a : name;\n        const args = {};\n        args.batch = opts.batch || 1;\n        args.no_wait = opts.no_wait || false;\n        if (((_b = opts.max_bytes) !== null && _b !== void 0 ? _b : 0) > 0) {\n            const fv = this.js.nc.features.get(semver_1.Feature.JS_PULL_MAX_BYTES);\n            if (!fv.ok) {\n                throw new Error(`max_bytes is only supported on servers ${fv.min} or better`);\n            }\n            args.max_bytes = opts.max_bytes;\n        }\n        let expires = 0;\n        if (opts.expires && opts.expires > 0) {\n            expires = opts.expires;\n            args.expires = (0, jsutil_1.nanos)(expires);\n        }\n        let hb = 0;\n        if (opts.idle_heartbeat && opts.idle_heartbeat > 0) {\n            hb = opts.idle_heartbeat;\n            args.idle_heartbeat = (0, jsutil_1.nanos)(hb);\n        }\n        if (hb && expires === 0) {\n            throw new Error(\"idle_heartbeat requires expires\");\n        }\n        if (hb > expires) {\n            throw new Error(\"expires must be greater than idle_heartbeat\");\n        }\n        if (this.info) {\n            if (this.monitor) {\n                this.monitor.cancel();\n            }\n            if (expires && hb) {\n                if (!this.monitor) {\n                    this._setupHbMonitoring(hb, expires);\n                }\n                else {\n                    this.monitor._change(hb, expires);\n                }\n            }\n            const api = this.info.api;\n            const subj = `${api.prefix}.CONSUMER.MSG.NEXT.${stream}.${consumer}`;\n            const reply = this.sub.subject;\n            api.nc.publish(subj, api.jc.encode(args), { reply: reply });\n        }\n    }\n}\nfunction msgAdapter(iterator) {\n    if (iterator) {\n        return iterMsgAdapter;\n    }\n    else {\n        return cbMsgAdapter;\n    }\n}\nfunction cbMsgAdapter(err, msg) {\n    if (err) {\n        return [err, null];\n    }\n    err = (0, jsutil_1.checkJsError)(msg);\n    if (err) {\n        return [err, null];\n    }\n    // assuming that the protocolFilterFn is set!\n    return [null, (0, jsmsg_1.toJsMsg)(msg)];\n}\nfunction iterMsgAdapter(err, msg) {\n    if (err) {\n        return [err, null];\n    }\n    // iterator will close if we have an error\n    // check for errors that shouldn't close it\n    const ne = (0, jsutil_1.checkJsError)(msg);\n    if (ne !== null) {\n        return [hideNonTerminalJsErrors(ne), null];\n    }\n    // assuming that the protocolFilterFn is set\n    return [null, (0, jsmsg_1.toJsMsg)(msg)];\n}\nfunction hideNonTerminalJsErrors(ne) {\n    if (ne !== null) {\n        switch (ne.code) {\n            case core_1.ErrorCode.JetStream404NoMessages:\n            case core_1.ErrorCode.JetStream408RequestTimeout:\n                return null;\n            case core_1.ErrorCode.JetStream409:\n                if ((0, jsutil_1.isTerminal409)(ne)) {\n                    return ne;\n                }\n                return null;\n            default:\n                return ne;\n        }\n    }\n    return null;\n}\nfunction autoAckJsMsg(data) {\n    if (data) {\n        data.ack();\n    }\n}\n//# sourceMappingURL=jsclient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvamV0c3RyZWFtL2pzY2xpZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUNBQWlDLEdBQUcsMkJBQTJCLEdBQUcsa0JBQWtCO0FBQ3BGLGdCQUFnQixtQkFBTyxDQUFDLDBGQUEyQjtBQUNuRCwyQkFBMkIsbUJBQU8sQ0FBQyx1RkFBb0I7QUFDdkQsaUJBQWlCLG1CQUFPLENBQUMsbUVBQVU7QUFDbkMsMEJBQTBCLG1CQUFPLENBQUMscUZBQW1CO0FBQ3JELGdCQUFnQixtQkFBTyxDQUFDLGlFQUFTO0FBQ2pDLG1CQUFtQixtQkFBTyxDQUFDLGdHQUE4QjtBQUN6RCwwQkFBMEIsbUJBQU8sQ0FBQyw4R0FBcUM7QUFDdkUsZUFBZSxtQkFBTyxDQUFDLHdGQUEwQjtBQUNqRCxrQkFBa0IsbUJBQU8sQ0FBQyw4RkFBNkI7QUFDdkQsYUFBYSxtQkFBTyxDQUFDLDJEQUFNO0FBQzNCLGlCQUFpQixtQkFBTyxDQUFDLDRGQUE0QjtBQUNyRCxzQkFBc0IsbUJBQU8sQ0FBQyw2RUFBZTtBQUM3QyxnQ0FBZ0MsbUJBQU8sQ0FBQywwSEFBMkM7QUFDbkYsd0JBQXdCLG1CQUFPLENBQUMsaUZBQWlCO0FBQ2pELGdCQUFnQixtQkFBTyxDQUFDLGlFQUFTO0FBQ2pDLGVBQWUsbUJBQU8sQ0FBQyx3RkFBMEI7QUFDakQsc0JBQXNCLG1CQUFPLENBQUMsNkVBQWU7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGlCQUFpQixrQkFBa0Isa0JBQWtCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0EsZ0JBQWdCLFVBQVU7QUFDMUI7QUFDQSwrRUFBK0UsS0FBSztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0Esd0ZBQXdGLEtBQUs7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsVUFBVTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQseUJBQXlCO0FBQ3RGO0FBQ0E7QUFDQSx5RUFBeUUsZ0NBQWdDO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHVCQUF1QjtBQUN6QztBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsYUFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELFlBQVkscUJBQXFCLE9BQU8sR0FBRyxRQUFRLCtCQUErQixzQkFBc0I7QUFDeko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRSxRQUFRO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCx5Q0FBeUMsSUFBSSxFQUFFO0FBQzdHLHlCQUF5QjtBQUN6QjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsMkJBQTJCLFlBQVkscUJBQXFCLE9BQU8sR0FBRyxRQUFRLDJCQUEyQixjQUFjO0FBQ3ZIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixJQUFJO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSx5QkFBeUIsbUJBQW1CLFdBQVc7QUFDNUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCLG1CQUFtQixZQUFZO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esc0ZBQXNGLGFBQWEsU0FBUyxLQUFLO0FBQ2pILHNDQUFzQztBQUN0QyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQseUNBQXlDLElBQUksRUFBRTtBQUMzRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixpQkFBaUIsbUJBQW1CLGFBQWEsR0FBRyxLQUFLO0FBQ3JGO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsaUJBQWlCLGlCQUFpQixhQUFhLEdBQUcsS0FBSztBQUNuRjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixVQUFVO0FBQzVCO0FBQ0EsZ0JBQWdCLHVCQUF1QjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRSxRQUFRO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsV0FBVyxxQkFBcUIsT0FBTyxHQUFHLFNBQVM7QUFDL0U7QUFDQSx3REFBd0QsY0FBYztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL25hdHMvbGliL2pldHN0cmVhbS9qc2NsaWVudC5qcz83ZDc2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDIyLTIwMjMgVGhlIE5BVFMgQXV0aG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5KZXRTdHJlYW1TdWJzY3JpcHRpb25JbXBsID0gZXhwb3J0cy5KZXRTdHJlYW1DbGllbnRJbXBsID0gZXhwb3J0cy5QdWJIZWFkZXJzID0gdm9pZCAwO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi9uYXRzLWJhc2UtY2xpZW50L3R5cGVzXCIpO1xuY29uc3QganNiYXNlY2xpZW50X2FwaV8xID0gcmVxdWlyZShcIi4vanNiYXNlY2xpZW50X2FwaVwiKTtcbmNvbnN0IGpzdXRpbF8xID0gcmVxdWlyZShcIi4vanN1dGlsXCIpO1xuY29uc3QganNtY29uc3VtZXJfYXBpXzEgPSByZXF1aXJlKFwiLi9qc21jb25zdW1lcl9hcGlcIik7XG5jb25zdCBqc21zZ18xID0gcmVxdWlyZShcIi4vanNtc2dcIik7XG5jb25zdCB0eXBlZHN1Yl8xID0gcmVxdWlyZShcIi4uL25hdHMtYmFzZS1jbGllbnQvdHlwZWRzdWJcIik7XG5jb25zdCBxdWV1ZWRfaXRlcmF0b3JfMSA9IHJlcXVpcmUoXCIuLi9uYXRzLWJhc2UtY2xpZW50L3F1ZXVlZF9pdGVyYXRvclwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi9uYXRzLWJhc2UtY2xpZW50L3V0aWxcIik7XG5jb25zdCBoZWFkZXJzXzEgPSByZXF1aXJlKFwiLi4vbmF0cy1iYXNlLWNsaWVudC9oZWFkZXJzXCIpO1xuY29uc3Qga3ZfMSA9IHJlcXVpcmUoXCIuL2t2XCIpO1xuY29uc3Qgc2VtdmVyXzEgPSByZXF1aXJlKFwiLi4vbmF0cy1iYXNlLWNsaWVudC9zZW12ZXJcIik7XG5jb25zdCBvYmplY3RzdG9yZV8xID0gcmVxdWlyZShcIi4vb2JqZWN0c3RvcmVcIik7XG5jb25zdCBpZGxlaGVhcnRiZWF0X21vbml0b3JfMSA9IHJlcXVpcmUoXCIuLi9uYXRzLWJhc2UtY2xpZW50L2lkbGVoZWFydGJlYXRfbW9uaXRvclwiKTtcbmNvbnN0IGpzbXN0cmVhbV9hcGlfMSA9IHJlcXVpcmUoXCIuL2pzbXN0cmVhbV9hcGlcIik7XG5jb25zdCB0eXBlc18yID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiLi4vbmF0cy1iYXNlLWNsaWVudC9jb3JlXCIpO1xuY29uc3QganNhcGlfdHlwZXNfMSA9IHJlcXVpcmUoXCIuL2pzYXBpX3R5cGVzXCIpO1xudmFyIFB1YkhlYWRlcnM7XG4oZnVuY3Rpb24gKFB1YkhlYWRlcnMpIHtcbiAgICBQdWJIZWFkZXJzW1wiTXNnSWRIZHJcIl0gPSBcIk5hdHMtTXNnLUlkXCI7XG4gICAgUHViSGVhZGVyc1tcIkV4cGVjdGVkU3RyZWFtSGRyXCJdID0gXCJOYXRzLUV4cGVjdGVkLVN0cmVhbVwiO1xuICAgIFB1YkhlYWRlcnNbXCJFeHBlY3RlZExhc3RTZXFIZHJcIl0gPSBcIk5hdHMtRXhwZWN0ZWQtTGFzdC1TZXF1ZW5jZVwiO1xuICAgIFB1YkhlYWRlcnNbXCJFeHBlY3RlZExhc3RNc2dJZEhkclwiXSA9IFwiTmF0cy1FeHBlY3RlZC1MYXN0LU1zZy1JZFwiO1xuICAgIFB1YkhlYWRlcnNbXCJFeHBlY3RlZExhc3RTdWJqZWN0U2VxdWVuY2VIZHJcIl0gPSBcIk5hdHMtRXhwZWN0ZWQtTGFzdC1TdWJqZWN0LVNlcXVlbmNlXCI7XG59KShQdWJIZWFkZXJzIHx8IChleHBvcnRzLlB1YkhlYWRlcnMgPSBQdWJIZWFkZXJzID0ge30pKTtcbmNsYXNzIFZpZXdzSW1wbCB7XG4gICAgY29uc3RydWN0b3IoanMpIHtcbiAgICAgICAgdGhpcy5qcyA9IGpzO1xuICAgIH1cbiAgICBrdihuYW1lLCBvcHRzID0ge30pIHtcbiAgICAgICAgY29uc3QganNpID0gdGhpcy5qcztcbiAgICAgICAgY29uc3QgeyBvaywgbWluIH0gPSBqc2kubmMuZmVhdHVyZXMuZ2V0KHNlbXZlcl8xLkZlYXR1cmUuSlNfS1YpO1xuICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKGBrdiBpcyBvbmx5IHN1cHBvcnRlZCBvbiBzZXJ2ZXJzICR7bWlufSBvciBiZXR0ZXJgKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMuYmluZE9ubHkpIHtcbiAgICAgICAgICAgIHJldHVybiBrdl8xLkJ1Y2tldC5iaW5kKHRoaXMuanMsIG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrdl8xLkJ1Y2tldC5jcmVhdGUodGhpcy5qcywgbmFtZSwgb3B0cyk7XG4gICAgfVxuICAgIG9zKG5hbWUsIG9wdHMgPSB7fSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0eXBlb2YgKChfYSA9IGNyeXB0byA9PT0gbnVsbCB8fCBjcnlwdG8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNyeXB0by5zdWJ0bGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kaWdlc3QpICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJvYmplY3RzdG9yZTogdW5hYmxlIHRvIGNhbGN1bGF0ZSBoYXNoZXMgLSBjcnlwdG8uc3VidGxlLmRpZ2VzdCB3aXRoIHNoYTI1NiBzdXBwb3J0IGlzIHJlcXVpcmVkXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBqc2kgPSB0aGlzLmpzO1xuICAgICAgICBjb25zdCB7IG9rLCBtaW4gfSA9IGpzaS5uYy5mZWF0dXJlcy5nZXQoc2VtdmVyXzEuRmVhdHVyZS5KU19PQkpFQ1RTVE9SRSk7XG4gICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoYG9iamVjdHN0b3JlIGlzIG9ubHkgc3VwcG9ydGVkIG9uIHNlcnZlcnMgJHttaW59IG9yIGJldHRlcmApKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0c3RvcmVfMS5PYmplY3RTdG9yZUltcGwuY3JlYXRlKHRoaXMuanMsIG5hbWUsIG9wdHMpO1xuICAgIH1cbn1cbmNsYXNzIEpldFN0cmVhbUNsaWVudEltcGwgZXh0ZW5kcyBqc2Jhc2VjbGllbnRfYXBpXzEuQmFzZUFwaUNsaWVudCB7XG4gICAgY29uc3RydWN0b3IobmMsIG9wdHMpIHtcbiAgICAgICAgc3VwZXIobmMsIG9wdHMpO1xuICAgICAgICB0aGlzLmNvbnN1bWVyQVBJID0gbmV3IGpzbWNvbnN1bWVyX2FwaV8xLkNvbnN1bWVyQVBJSW1wbChuYywgb3B0cyk7XG4gICAgICAgIHRoaXMuc3RyZWFtQVBJID0gbmV3IGpzbXN0cmVhbV9hcGlfMS5TdHJlYW1BUElJbXBsKG5jLCBvcHRzKTtcbiAgICAgICAgdGhpcy5jb25zdW1lcnMgPSBuZXcganNtc3RyZWFtX2FwaV8xLkNvbnN1bWVyc0ltcGwodGhpcy5jb25zdW1lckFQSSk7XG4gICAgICAgIHRoaXMuc3RyZWFtcyA9IG5ldyBqc21zdHJlYW1fYXBpXzEuU3RyZWFtc0ltcGwodGhpcy5zdHJlYW1BUEkpO1xuICAgIH1cbiAgICBqZXRzdHJlYW1NYW5hZ2VyKGNoZWNrQVBJKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHsgY2hlY2tBUEkgfSwgdGhpcy5vcHRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubmMuamV0c3RyZWFtTWFuYWdlcihvcHRzKTtcbiAgICB9XG4gICAgZ2V0IGFwaVByZWZpeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJlZml4O1xuICAgIH1cbiAgICBnZXQgdmlld3MoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmlld3NJbXBsKHRoaXMpO1xuICAgIH1cbiAgICBwdWJsaXNoKHN1YmosIGRhdGEgPSB0eXBlc18xLkVtcHR5LCBvcHRzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICAgICAgICAgIG9wdHMuZXhwZWN0ID0gb3B0cy5leHBlY3QgfHwge307XG4gICAgICAgICAgICBjb25zdCBtaCA9IChvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuaGVhZGVycykgfHwgKDAsIGhlYWRlcnNfMS5oZWFkZXJzKSgpO1xuICAgICAgICAgICAgaWYgKG9wdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5tc2dJRCkge1xuICAgICAgICAgICAgICAgICAgICBtaC5zZXQoUHViSGVhZGVycy5Nc2dJZEhkciwgb3B0cy5tc2dJRCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRzLmV4cGVjdC5sYXN0TXNnSUQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWguc2V0KFB1YkhlYWRlcnMuRXhwZWN0ZWRMYXN0TXNnSWRIZHIsIG9wdHMuZXhwZWN0Lmxhc3RNc2dJRCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRzLmV4cGVjdC5zdHJlYW1OYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIG1oLnNldChQdWJIZWFkZXJzLkV4cGVjdGVkU3RyZWFtSGRyLCBvcHRzLmV4cGVjdC5zdHJlYW1OYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRzLmV4cGVjdC5sYXN0U2VxdWVuY2UgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbWguc2V0KFB1YkhlYWRlcnMuRXhwZWN0ZWRMYXN0U2VxSGRyLCBgJHtvcHRzLmV4cGVjdC5sYXN0U2VxdWVuY2V9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0cy5leHBlY3QubGFzdFN1YmplY3RTZXF1ZW5jZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICBtaC5zZXQoUHViSGVhZGVycy5FeHBlY3RlZExhc3RTdWJqZWN0U2VxdWVuY2VIZHIsIGAke29wdHMuZXhwZWN0Lmxhc3RTdWJqZWN0U2VxdWVuY2V9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdG8gPSBvcHRzLnRpbWVvdXQgfHwgdGhpcy50aW1lb3V0O1xuICAgICAgICAgICAgY29uc3Qgcm8gPSB7fTtcbiAgICAgICAgICAgIGlmICh0bykge1xuICAgICAgICAgICAgICAgIHJvLnRpbWVvdXQgPSB0bztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRzKSB7XG4gICAgICAgICAgICAgICAgcm8uaGVhZGVycyA9IG1oO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHsgcmV0cmllcywgcmV0cnlfZGVsYXkgfSA9IG9wdHM7XG4gICAgICAgICAgICByZXRyaWVzID0gcmV0cmllcyB8fCAxO1xuICAgICAgICAgICAgcmV0cnlfZGVsYXkgPSByZXRyeV9kZWxheSB8fCAyNTA7XG4gICAgICAgICAgICBsZXQgcjtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmV0cmllczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgciA9IHlpZWxkIHRoaXMubmMucmVxdWVzdChzdWJqLCBkYXRhLCBybyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIGhlcmUgd2Ugc3VjY2VlZGVkXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5lID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmUuY29kZSA9PT0gXCI1MDNcIiAmJiBpICsgMSA8IHJldHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICgwLCB1dGlsXzEuZGVsYXkpKHJldHJ5X2RlbGF5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhID0gdGhpcy5wYXJzZUpzUmVzcG9uc2Uocik7XG4gICAgICAgICAgICBpZiAocGEuc3RyZWFtID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgdHlwZXNfMS5OYXRzRXJyb3IuZXJyb3JGb3JDb2RlKGNvcmVfMS5FcnJvckNvZGUuSmV0U3RyZWFtSW52YWxpZEFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYS5kdXBsaWNhdGUgPSBwYS5kdXBsaWNhdGUgPyBwYS5kdXBsaWNhdGUgOiBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBwYTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHB1bGwoc3RyZWFtLCBkdXJhYmxlLCBleHBpcmVzID0gMCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgKDAsIGpzdXRpbF8xLnZhbGlkYXRlU3RyZWFtTmFtZSkoc3RyZWFtKTtcbiAgICAgICAgICAgICgwLCBqc3V0aWxfMS52YWxpZGF0ZUR1cmFibGVOYW1lKShkdXJhYmxlKTtcbiAgICAgICAgICAgIGxldCB0aW1lb3V0ID0gdGhpcy50aW1lb3V0O1xuICAgICAgICAgICAgaWYgKGV4cGlyZXMgPiB0aW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgdGltZW91dCA9IGV4cGlyZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleHBpcmVzID0gZXhwaXJlcyA8IDAgPyAwIDogKDAsIGpzdXRpbF8xLm5hbm9zKShleHBpcmVzKTtcbiAgICAgICAgICAgIGNvbnN0IHB1bGxPcHRzID0ge1xuICAgICAgICAgICAgICAgIGJhdGNoOiAxLFxuICAgICAgICAgICAgICAgIG5vX3dhaXQ6IGV4cGlyZXMgPT09IDAsXG4gICAgICAgICAgICAgICAgZXhwaXJlcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBtc2cgPSB5aWVsZCB0aGlzLm5jLnJlcXVlc3QoYCR7dGhpcy5wcmVmaXh9LkNPTlNVTUVSLk1TRy5ORVhULiR7c3RyZWFtfS4ke2R1cmFibGV9YCwgdGhpcy5qYy5lbmNvZGUocHVsbE9wdHMpLCB7IG5vTXV4OiB0cnVlLCB0aW1lb3V0IH0pO1xuICAgICAgICAgICAgY29uc3QgZXJyID0gKDAsIGpzdXRpbF8xLmNoZWNrSnNFcnJvcikobXNnKTtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKDAsIGpzbXNnXzEudG9Kc01zZykobXNnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qXG4gICAgICogUmV0dXJucyBhdmFpbGFibGUgbWVzc2FnZXMgdXB0byBzcGVjaWZpZWQgYmF0Y2ggY291bnQuXG4gICAgICogSWYgZXhwaXJlcyBpcyBzZXQgdGhlIGl0ZXJhdG9yIHdpbGwgd2FpdCBmb3IgdGhlIHNwZWNpZmllZFxuICAgICAqIGFtb3VudCBvZiBtaWxsaXMgYmVmb3JlIGNsb3NpbmcgdGhlIHN1YnNjcmlwdGlvbi5cbiAgICAgKiBJZiBub193YWl0IGlzIHNwZWNpZmllZCwgdGhlIGl0ZXJhdG9yIHdpbGwgcmV0dXJuIG5vIG1lc3NhZ2VzLlxuICAgICAqIEBwYXJhbSBzdHJlYW1cbiAgICAgKiBAcGFyYW0gZHVyYWJsZVxuICAgICAqIEBwYXJhbSBvcHRzXG4gICAgICovXG4gICAgZmV0Y2goc3RyZWFtLCBkdXJhYmxlLCBvcHRzID0ge30pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoMCwganN1dGlsXzEudmFsaWRhdGVTdHJlYW1OYW1lKShzdHJlYW0pO1xuICAgICAgICAoMCwganN1dGlsXzEudmFsaWRhdGVEdXJhYmxlTmFtZSkoZHVyYWJsZSk7XG4gICAgICAgIGxldCB0aW1lciA9IG51bGw7XG4gICAgICAgIGNvbnN0IHRyYWNrQnl0ZXMgPSAoKF9hID0gb3B0cy5tYXhfYnl0ZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDApID4gMDtcbiAgICAgICAgbGV0IHJlY2VpdmVkQnl0ZXMgPSAwO1xuICAgICAgICBjb25zdCBtYXhfYnl0ZXMgPSB0cmFja0J5dGVzID8gb3B0cy5tYXhfYnl0ZXMgOiAwO1xuICAgICAgICBsZXQgbW9uaXRvciA9IG51bGw7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB7fTtcbiAgICAgICAgYXJncy5iYXRjaCA9IG9wdHMuYmF0Y2ggfHwgMTtcbiAgICAgICAgaWYgKG1heF9ieXRlcykge1xuICAgICAgICAgICAgY29uc3QgZnYgPSB0aGlzLm5jLmZlYXR1cmVzLmdldChzZW12ZXJfMS5GZWF0dXJlLkpTX1BVTExfTUFYX0JZVEVTKTtcbiAgICAgICAgICAgIGlmICghZnYub2spIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG1heF9ieXRlcyBpcyBvbmx5IHN1cHBvcnRlZCBvbiBzZXJ2ZXJzICR7ZnYubWlufSBvciBiZXR0ZXJgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFyZ3MubWF4X2J5dGVzID0gbWF4X2J5dGVzO1xuICAgICAgICB9XG4gICAgICAgIGFyZ3Mubm9fd2FpdCA9IG9wdHMubm9fd2FpdCB8fCBmYWxzZTtcbiAgICAgICAgaWYgKGFyZ3Mubm9fd2FpdCAmJiBhcmdzLmV4cGlyZXMpIHtcbiAgICAgICAgICAgIGFyZ3MuZXhwaXJlcyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXhwaXJlcyA9IG9wdHMuZXhwaXJlcyB8fCAwO1xuICAgICAgICBpZiAoZXhwaXJlcykge1xuICAgICAgICAgICAgYXJncy5leHBpcmVzID0gKDAsIGpzdXRpbF8xLm5hbm9zKShleHBpcmVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhwaXJlcyA9PT0gMCAmJiBhcmdzLm5vX3dhaXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJleHBpcmVzIG9yIG5vX3dhaXQgaXMgcmVxdWlyZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGIgPSBvcHRzLmlkbGVfaGVhcnRiZWF0IHx8IDA7XG4gICAgICAgIGlmIChoYikge1xuICAgICAgICAgICAgYXJncy5pZGxlX2hlYXJ0YmVhdCA9ICgwLCBqc3V0aWxfMS5uYW5vcykoaGIpO1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlOiBmb3IgdGVzdGluZ1xuICAgICAgICAgICAgaWYgKG9wdHMuZGVsYXlfaGVhcnRiZWF0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlOiB0ZXN0IG9wdGlvblxuICAgICAgICAgICAgICAgIGFyZ3MuaWRsZV9oZWFydGJlYXQgPSAoMCwganN1dGlsXzEubmFub3MpKGhiICogNCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcWkgPSBuZXcgcXVldWVkX2l0ZXJhdG9yXzEuUXVldWVkSXRlcmF0b3JJbXBsKCk7XG4gICAgICAgIGNvbnN0IHdhbnRzID0gYXJncy5iYXRjaDtcbiAgICAgICAgbGV0IHJlY2VpdmVkID0gMDtcbiAgICAgICAgcWkucHJvdG9jb2xGaWx0ZXJGbiA9IChqbSwgX2luZ2VzdCA9IGZhbHNlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBqc21pID0gam07XG4gICAgICAgICAgICBpZiAoKDAsIGpzdXRpbF8xLmlzSGVhcnRiZWF0TXNnKShqc21pLm1zZykpIHtcbiAgICAgICAgICAgICAgICBtb25pdG9yID09PSBudWxsIHx8IG1vbml0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1vbml0b3Iud29yaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICAvLyBGSVhNRTogdGhpcyBsb29rcyB3ZWlyZCwgd2Ugd2FudCB0byBzdG9wIHRoZSBpdGVyYXRvclxuICAgICAgICAvLyAgIGJ1dCBkb2luZyBpdCBmcm9tIGEgZGlzcGF0Y2hlZEZuLi4uXG4gICAgICAgIHFpLmRpc3BhdGNoZWRGbiA9IChtKSA9PiB7XG4gICAgICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgICAgIGlmICh0cmFja0J5dGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkQnl0ZXMgKz0gbS5kYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQrKztcbiAgICAgICAgICAgICAgICBpZiAodGltZXIgJiYgbS5pbmZvLnBlbmRpbmcgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGV4cGlyYXRpb24gd2lsbCBjbG9zZSBpdFxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgb25lIHBlbmRpbmcgYW5kIHdlIGdvdCB0aGUgZXhwZWN0ZWRcbiAgICAgICAgICAgICAgICAvLyBvciB0aGVyZSBhcmUgbm8gbW9yZSBzdG9wIHRoZSBpdGVyYXRvclxuICAgICAgICAgICAgICAgIGlmIChxaS5nZXRQZW5kaW5nKCkgPT09IDEgJiYgbS5pbmZvLnBlbmRpbmcgPT09IDAgfHwgd2FudHMgPT09IHJlY2VpdmVkIHx8XG4gICAgICAgICAgICAgICAgICAgIChtYXhfYnl0ZXMgPiAwICYmIHJlY2VpdmVkQnl0ZXMgPj0gbWF4X2J5dGVzKSkge1xuICAgICAgICAgICAgICAgICAgICBxaS5zdG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBpbmJveCA9ICgwLCBjb3JlXzEuY3JlYXRlSW5ib3gpKHRoaXMubmMub3B0aW9ucy5pbmJveFByZWZpeCk7XG4gICAgICAgIGNvbnN0IHN1YiA9IHRoaXMubmMuc3Vic2NyaWJlKGluYm94LCB7XG4gICAgICAgICAgICBtYXg6IG9wdHMuYmF0Y2gsXG4gICAgICAgICAgICBjYWxsYmFjazogKGVyciwgbXNnKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVyciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBlcnIgPSAoMCwganN1dGlsXzEuY2hlY2tKc0Vycm9yKShtc2cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZXJyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGltZXIuY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCgwLCBjb3JlXzEuaXNOYXRzRXJyb3IpKGVycikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHFpLnN0b3AoaGlkZU5vblRlcm1pbmFsSnNFcnJvcnMoZXJyKSA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBxaS5zdG9wKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHdlIGFyZSBkb2luZyBoZWFydGJlYXRzLCBtZXNzYWdlIHJlc2V0c1xuICAgICAgICAgICAgICAgICAgICBtb25pdG9yID09PSBudWxsIHx8IG1vbml0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1vbml0b3Iud29yaygpO1xuICAgICAgICAgICAgICAgICAgICBxaS5yZWNlaXZlZCsrO1xuICAgICAgICAgICAgICAgICAgICBxaS5wdXNoKCgwLCBqc21zZ18xLnRvSnNNc2cpKG1zZykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICAvLyB0aW1lciBvbiB0aGUgY2xpZW50ICB0aGUgaXNzdWUgaXMgdGhhdCB0aGUgcmVxdWVzdFxuICAgICAgICAvLyBpcyBzdGFydGVkIG9uIHRoZSBjbGllbnQsIHdoaWNoIG1lYW5zIHRoYXQgaXQgd2lsbCBleHBpcmVcbiAgICAgICAgLy8gb24gdGhlIGNsaWVudCBmaXJzdFxuICAgICAgICBpZiAoZXhwaXJlcykge1xuICAgICAgICAgICAgdGltZXIgPSAoMCwgdXRpbF8xLnRpbWVvdXQpKGV4cGlyZXMpO1xuICAgICAgICAgICAgdGltZXIuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghc3ViLmlzQ2xvc2VkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViLmRyYWluKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgICAgICAgICAgICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtb25pdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vbml0b3IuY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgKCgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGhiKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vbml0b3IgPSBuZXcgaWRsZWhlYXJ0YmVhdF9tb25pdG9yXzEuSWRsZUhlYXJ0YmVhdE1vbml0b3IoaGIsICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmU6IHB1c2hpbmcgYSBmblxuICAgICAgICAgICAgICAgICAgICAgICAgcWkucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHRlcm1pbmF0ZSB0aGUgaXRlcmF0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxaS5lcnIgPSBuZXcgdHlwZXNfMS5OYXRzRXJyb3IoYCR7anN1dGlsXzEuSnM0MDlFcnJvcnMuSWRsZUhlYXJ0YmVhdE1pc3NlZH06ICR7dn1gLCBjb3JlXzEuRXJyb3JDb2RlLkpldFN0cmVhbUlkbGVIZWFydEJlYXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF9lcnIpIHtcbiAgICAgICAgICAgICAgICAvLyBpZ25vcmUgaXRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNsb3NlIHRoZSBpdGVyYXRvciBpZiB0aGUgY29ubmVjdGlvbiBvciBzdWJzY3JpcHRpb24gY2xvc2VzIHVuZXhwZWN0ZWRseVxuICAgICAgICAgICAgeWllbGQgc3ViLmNsb3NlZDtcbiAgICAgICAgICAgIGlmICh0aW1lciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRpbWVyLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb25pdG9yKSB7XG4gICAgICAgICAgICAgICAgbW9uaXRvci5jYW5jZWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHFpLnN0b3AoKTtcbiAgICAgICAgfSkpKCkuY2F0Y2goKTtcbiAgICAgICAgdGhpcy5uYy5wdWJsaXNoKGAke3RoaXMucHJlZml4fS5DT05TVU1FUi5NU0cuTkVYVC4ke3N0cmVhbX0uJHtkdXJhYmxlfWAsIHRoaXMuamMuZW5jb2RlKGFyZ3MpLCB7IHJlcGx5OiBpbmJveCB9KTtcbiAgICAgICAgcmV0dXJuIHFpO1xuICAgIH1cbiAgICBwdWxsU3Vic2NyaWJlKHN1YmplY3QsIG9wdHMgPSAoMCwgdHlwZXNfMi5jb25zdW1lck9wdHMpKCkpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNzbyA9IHlpZWxkIHRoaXMuX3Byb2Nlc3NPcHRpb25zKHN1YmplY3QsIG9wdHMpO1xuICAgICAgICAgICAgaWYgKGNzby5vcmRlcmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicHVsbCBzdWJzY3JpYmVycyBjYW5ub3QgYmUgYmUgb3JkZXJlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjc28uY29uZmlnLmRlbGl2ZXJfc3ViamVjdCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNvbnN1bWVyIGluZm8gc3BlY2lmaWVzIGRlbGl2ZXJfc3ViamVjdCAtIHB1bGwgY29uc3VtZXJzIGNhbm5vdCBoYXZlIGRlbGl2ZXJfc3ViamVjdCBzZXRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhY2tQb2xpY3kgPSBjc28uY29uZmlnLmFja19wb2xpY3k7XG4gICAgICAgICAgICBpZiAoYWNrUG9saWN5ID09PSBqc2FwaV90eXBlc18xLkFja1BvbGljeS5Ob25lIHx8IGFja1BvbGljeSA9PT0ganNhcGlfdHlwZXNfMS5BY2tQb2xpY3kuQWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWNrIHBvbGljeSBmb3IgcHVsbCBjb25zdW1lcnMgbXVzdCBiZSBleHBsaWNpdFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNvID0gdGhpcy5fYnVpbGRUeXBlZFN1YnNjcmlwdGlvbk9wdHMoY3NvKTtcbiAgICAgICAgICAgIGNvbnN0IHN1YiA9IG5ldyBKZXRTdHJlYW1QdWxsU3Vic2NyaXB0aW9uSW1wbCh0aGlzLCBjc28uZGVsaXZlciwgc28pO1xuICAgICAgICAgICAgc3ViLmluZm8gPSBjc287XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuX21heWJlQ3JlYXRlQ29uc3VtZXIoY3NvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3ViO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3Vic2NyaWJlKHN1YmplY3QsIG9wdHMgPSAoMCwgdHlwZXNfMi5jb25zdW1lck9wdHMpKCkpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNzbyA9IHlpZWxkIHRoaXMuX3Byb2Nlc3NPcHRpb25zKHN1YmplY3QsIG9wdHMpO1xuICAgICAgICAgICAgLy8gdGhpcyBlZmZlY3RpdmVseSByZXF1aXJlcyBkZWxpdmVyIHN1YmplY3QgdG8gYmUgc3BlY2lmaWVkXG4gICAgICAgICAgICAvLyBhcyBhbiBvcHRpb24gb3RoZXJ3aXNlIHdlIGhhdmUgYSBwdWxsIGNvbnN1bWVyXG4gICAgICAgICAgICBpZiAoIWNzby5pc0JpbmQgJiYgIWNzby5jb25maWcuZGVsaXZlcl9zdWJqZWN0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicHVzaCBjb25zdW1lciByZXF1aXJlcyBkZWxpdmVyX3N1YmplY3RcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzbyA9IHRoaXMuX2J1aWxkVHlwZWRTdWJzY3JpcHRpb25PcHRzKGNzbyk7XG4gICAgICAgICAgICBjb25zdCBzdWIgPSBuZXcgSmV0U3RyZWFtU3Vic2NyaXB0aW9uSW1wbCh0aGlzLCBjc28uZGVsaXZlciwgc28pO1xuICAgICAgICAgICAgc3ViLmluZm8gPSBjc287XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuX21heWJlQ3JlYXRlQ29uc3VtZXIoY3NvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWIuX21heWJlU2V0dXBIYk1vbml0b3JpbmcoKTtcbiAgICAgICAgICAgIHJldHVybiBzdWI7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfcHJvY2Vzc09wdGlvbnMoc3ViamVjdCwgb3B0cyA9ICgwLCB0eXBlc18yLmNvbnN1bWVyT3B0cykoKSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QganNpID0gKCgwLCB0eXBlc18yLmlzQ29uc3VtZXJPcHRzQnVpbGRlcikob3B0cylcbiAgICAgICAgICAgICAgICA/IG9wdHMuZ2V0T3B0cygpXG4gICAgICAgICAgICAgICAgOiBvcHRzKTtcbiAgICAgICAgICAgIGpzaS5pc0JpbmQgPSAoMCwgdHlwZXNfMi5pc0NvbnN1bWVyT3B0c0J1aWxkZXIpKG9wdHMpID8gb3B0cy5pc0JpbmQgOiBmYWxzZTtcbiAgICAgICAgICAgIGpzaS5mbG93X2NvbnRyb2wgPSB7XG4gICAgICAgICAgICAgICAgaGVhcnRiZWF0X2NvdW50OiAwLFxuICAgICAgICAgICAgICAgIGZjX2NvdW50OiAwLFxuICAgICAgICAgICAgICAgIGNvbnN1bWVyX3Jlc3RhcnRzOiAwLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChqc2kub3JkZXJlZCkge1xuICAgICAgICAgICAgICAgIGpzaS5vcmRlcmVkX2NvbnN1bWVyX3NlcXVlbmNlID0geyBzdHJlYW1fc2VxOiAwLCBkZWxpdmVyeV9zZXE6IDAgfTtcbiAgICAgICAgICAgICAgICBpZiAoanNpLmNvbmZpZy5hY2tfcG9saWN5ICE9PSBqc2FwaV90eXBlc18xLkFja1BvbGljeS5Ob3RTZXQgJiZcbiAgICAgICAgICAgICAgICAgICAganNpLmNvbmZpZy5hY2tfcG9saWN5ICE9PSBqc2FwaV90eXBlc18xLkFja1BvbGljeS5Ob25lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyB0eXBlc18xLk5hdHNFcnJvcihcIm9yZGVyZWQgY29uc3VtZXI6IGFja19wb2xpY3kgY2FuIG9ubHkgYmUgc2V0IHRvICdub25lJ1wiLCBjb3JlXzEuRXJyb3JDb2RlLkFwaUVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGpzaS5jb25maWcuZHVyYWJsZV9uYW1lICYmIGpzaS5jb25maWcuZHVyYWJsZV9uYW1lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuTmF0c0Vycm9yKFwib3JkZXJlZCBjb25zdW1lcjogZHVyYWJsZV9uYW1lIGNhbm5vdCBiZSBzZXRcIiwgY29yZV8xLkVycm9yQ29kZS5BcGlFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChqc2kuY29uZmlnLmRlbGl2ZXJfc3ViamVjdCAmJiBqc2kuY29uZmlnLmRlbGl2ZXJfc3ViamVjdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyB0eXBlc18xLk5hdHNFcnJvcihcIm9yZGVyZWQgY29uc3VtZXI6IGRlbGl2ZXJfc3ViamVjdCBjYW5ub3QgYmUgc2V0XCIsIGNvcmVfMS5FcnJvckNvZGUuQXBpRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoanNpLmNvbmZpZy5tYXhfZGVsaXZlciAhPT0gdW5kZWZpbmVkICYmIGpzaS5jb25maWcubWF4X2RlbGl2ZXIgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyB0eXBlc18xLk5hdHNFcnJvcihcIm9yZGVyZWQgY29uc3VtZXI6IG1heF9kZWxpdmVyIGNhbm5vdCBiZSBzZXRcIiwgY29yZV8xLkVycm9yQ29kZS5BcGlFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChqc2kuY29uZmlnLmRlbGl2ZXJfZ3JvdXAgJiYganNpLmNvbmZpZy5kZWxpdmVyX2dyb3VwLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuTmF0c0Vycm9yKFwib3JkZXJlZCBjb25zdW1lcjogZGVsaXZlcl9ncm91cCBjYW5ub3QgYmUgc2V0XCIsIGNvcmVfMS5FcnJvckNvZGUuQXBpRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBqc2kuY29uZmlnLmRlbGl2ZXJfc3ViamVjdCA9ICgwLCBjb3JlXzEuY3JlYXRlSW5ib3gpKHRoaXMubmMub3B0aW9ucy5pbmJveFByZWZpeCk7XG4gICAgICAgICAgICAgICAganNpLmNvbmZpZy5hY2tfcG9saWN5ID0ganNhcGlfdHlwZXNfMS5BY2tQb2xpY3kuTm9uZTtcbiAgICAgICAgICAgICAgICBqc2kuY29uZmlnLm1heF9kZWxpdmVyID0gMTtcbiAgICAgICAgICAgICAgICBqc2kuY29uZmlnLmZsb3dfY29udHJvbCA9IHRydWU7XG4gICAgICAgICAgICAgICAganNpLmNvbmZpZy5pZGxlX2hlYXJ0YmVhdCA9IGpzaS5jb25maWcuaWRsZV9oZWFydGJlYXQgfHwgKDAsIGpzdXRpbF8xLm5hbm9zKSg1MDAwKTtcbiAgICAgICAgICAgICAgICBqc2kuY29uZmlnLmFja193YWl0ID0gKDAsIGpzdXRpbF8xLm5hbm9zKSgyMiAqIDYwICogNjAgKiAxMDAwKTtcbiAgICAgICAgICAgICAgICBqc2kuY29uZmlnLm1lbV9zdG9yYWdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBqc2kuY29uZmlnLm51bV9yZXBsaWNhcyA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoanNpLmNvbmZpZy5hY2tfcG9saWN5ID09PSBqc2FwaV90eXBlc18xLkFja1BvbGljeS5Ob3RTZXQpIHtcbiAgICAgICAgICAgICAgICBqc2kuY29uZmlnLmFja19wb2xpY3kgPSBqc2FwaV90eXBlc18xLkFja1BvbGljeS5BbGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqc2kuYXBpID0gdGhpcztcbiAgICAgICAgICAgIGpzaS5jb25maWcgPSBqc2kuY29uZmlnIHx8IHt9O1xuICAgICAgICAgICAganNpLnN0cmVhbSA9IGpzaS5zdHJlYW0gPyBqc2kuc3RyZWFtIDogeWllbGQgdGhpcy5maW5kU3RyZWFtKHN1YmplY3QpO1xuICAgICAgICAgICAganNpLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoanNpLmNvbmZpZy5kdXJhYmxlX25hbWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0geWllbGQgdGhpcy5jb25zdW1lckFQSS5pbmZvKGpzaS5zdHJlYW0sIGpzaS5jb25maWcuZHVyYWJsZV9uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLmNvbmZpZy5maWx0ZXJfc3ViamVjdCAmJiBpbmZvLmNvbmZpZy5maWx0ZXJfc3ViamVjdCAhPT0gc3ViamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInN1YmplY3QgZG9lcyBub3QgbWF0Y2ggY29uc3VtZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBzZXJ2ZXIgcmV0dXJuZWQgcHVzaF9ib3VuZCwgYnV0IHRoZXJlJ3Mgbm8gcW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHFuID0gKF9hID0ganNpLmNvbmZpZy5kZWxpdmVyX2dyb3VwKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHFuID09PSBcIlwiICYmIGluZm8ucHVzaF9ib3VuZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZHVwbGljYXRlIHN1YnNjcmlwdGlvbmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcnFuID0gKF9iID0gaW5mby5jb25maWcuZGVsaXZlcl9ncm91cCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxbiAhPT0gcnFuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJxbiA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGR1cmFibGUgcmVxdWlyZXMgbm8gcXVldWUgZ3JvdXBgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZHVyYWJsZSByZXF1aXJlcyBxdWV1ZSBncm91cCAnJHtycW59J2ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGpzaS5sYXN0ID0gaW5mbztcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzaS5jb25maWcgPSBpbmZvLmNvbmZpZztcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzaS5hdHRhY2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBub3QgYSBkdXJhYmxlIGNhcHR1cmUgdGhlIG5hbWUgb2YgdGhlIGVwaGVtZXJhbCBzb1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhhdCBjb25zdW1lckluZm8gZnJvbSB0aGUgc3ViIHdpbGwgd29ya1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFqc2kuY29uZmlnLmR1cmFibGVfbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzaS5uYW1lID0gaW5mby5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zdW1lciBkb2Vzbid0IGV4aXN0XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIuY29kZSAhPT0gXCI0MDRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFqc2kuYXR0YWNoZWQgJiYganNpLmNvbmZpZy5maWx0ZXJfc3ViamVjdCA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAganNpLmNvbmZpZy5maWx0ZXJfc3ViamVjdHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGlmIG5vIGZpbHRlciBzcGVjaWZpZWQsIHdlIHNldCB0aGUgc3ViamVjdCBhcyB0aGUgZmlsdGVyXG4gICAgICAgICAgICAgICAganNpLmNvbmZpZy5maWx0ZXJfc3ViamVjdCA9IHN1YmplY3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqc2kuZGVsaXZlciA9IGpzaS5jb25maWcuZGVsaXZlcl9zdWJqZWN0IHx8XG4gICAgICAgICAgICAgICAgKDAsIGNvcmVfMS5jcmVhdGVJbmJveCkodGhpcy5uYy5vcHRpb25zLmluYm94UHJlZml4KTtcbiAgICAgICAgICAgIHJldHVybiBqc2k7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfYnVpbGRUeXBlZFN1YnNjcmlwdGlvbk9wdHMoanNpKSB7XG4gICAgICAgIGNvbnN0IHNvID0ge307XG4gICAgICAgIHNvLmFkYXB0ZXIgPSBtc2dBZGFwdGVyKGpzaS5jYWxsYmFja0ZuID09PSB1bmRlZmluZWQpO1xuICAgICAgICBzby5pbmdlc3Rpb25GaWx0ZXJGbiA9IEpldFN0cmVhbUNsaWVudEltcGwuaW5nZXN0aW9uRm4oanNpLm9yZGVyZWQpO1xuICAgICAgICBzby5wcm90b2NvbEZpbHRlckZuID0gKGptLCBpbmdlc3QgPSBmYWxzZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QganNtaSA9IGptO1xuICAgICAgICAgICAgaWYgKCgwLCBqc3V0aWxfMS5pc0Zsb3dDb250cm9sTXNnKShqc21pLm1zZykpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWluZ2VzdCkge1xuICAgICAgICAgICAgICAgICAgICBqc21pLm1zZy5yZXNwb25kKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoIWpzaS5tYWNrICYmIGpzaS5jb25maWcuYWNrX3BvbGljeSAhPT0ganNhcGlfdHlwZXNfMS5BY2tQb2xpY3kuTm9uZSkge1xuICAgICAgICAgICAgc28uZGlzcGF0Y2hlZEZuID0gYXV0b0Fja0pzTXNnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqc2kuY2FsbGJhY2tGbikge1xuICAgICAgICAgICAgc28uY2FsbGJhY2sgPSBqc2kuY2FsbGJhY2tGbjtcbiAgICAgICAgfVxuICAgICAgICBzby5tYXggPSBqc2kubWF4IHx8IDA7XG4gICAgICAgIHNvLnF1ZXVlID0ganNpLnF1ZXVlO1xuICAgICAgICByZXR1cm4gc287XG4gICAgfVxuICAgIF9tYXliZUNyZWF0ZUNvbnN1bWVyKGpzaSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKGpzaS5hdHRhY2hlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChqc2kuaXNCaW5kKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmFibGUgdG8gYmluZCAtIGR1cmFibGUgY29uc3VtZXIgJHtqc2kuY29uZmlnLmR1cmFibGVfbmFtZX0gZG9lc24ndCBleGlzdCBpbiAke2pzaS5zdHJlYW19YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqc2kuY29uZmlnID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICAgICAgZGVsaXZlcl9wb2xpY3k6IGpzYXBpX3R5cGVzXzEuRGVsaXZlclBvbGljeS5BbGwsXG4gICAgICAgICAgICAgICAgYWNrX3BvbGljeToganNhcGlfdHlwZXNfMS5BY2tQb2xpY3kuRXhwbGljaXQsXG4gICAgICAgICAgICAgICAgYWNrX3dhaXQ6ICgwLCBqc3V0aWxfMS5uYW5vcykoMzAgKiAxMDAwKSxcbiAgICAgICAgICAgICAgICByZXBsYXlfcG9saWN5OiBqc2FwaV90eXBlc18xLlJlcGxheVBvbGljeS5JbnN0YW50LFxuICAgICAgICAgICAgfSwganNpLmNvbmZpZyk7XG4gICAgICAgICAgICBjb25zdCBjaSA9IHlpZWxkIHRoaXMuY29uc3VtZXJBUEkuYWRkKGpzaS5zdHJlYW0sIGpzaS5jb25maWcpO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoanNpLmNvbmZpZy5maWx0ZXJfc3ViamVjdHMgJiYgIUFycmF5LmlzQXJyYXkoY2kuY29uZmlnLmZpbHRlcl9zdWJqZWN0cykpKSB7XG4gICAgICAgICAgICAgICAgLy8gc2VydmVyIGRpZG4ndCBob25vciBgZmlsdGVyX3N1YmplY3RzYFxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgamV0c3RyZWFtIHNlcnZlciBkb2Vzbid0IHN1cHBvcnQgY29uc3VtZXJzIHdpdGggbXVsdGlwbGUgZmlsdGVyIHN1YmplY3RzYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqc2kubmFtZSA9IGNpLm5hbWU7XG4gICAgICAgICAgICBqc2kuY29uZmlnID0gY2kuY29uZmlnO1xuICAgICAgICAgICAganNpLmxhc3QgPSBjaTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBpbmdlc3Rpb25GbihvcmRlcmVkKSB7XG4gICAgICAgIHJldHVybiAoam0sIGN0eCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgLy8gY3R4IGlzIGV4cGVjdGVkIHRvIGJlIHRoZSBpdGVyYXRvciAodGhlIEpldHN0cmVhbVN1YnNjcmlwdGlvbkltcGwpXG4gICAgICAgICAgICBjb25zdCBqc3ViID0gY3R4O1xuICAgICAgICAgICAgLy8gdGhpcyBzaG91bGRuJ3QgaGFwcGVuXG4gICAgICAgICAgICBpZiAoIWptKVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGluZ2VzdDogZmFsc2UsIHByb3RvY29sOiBmYWxzZSB9O1xuICAgICAgICAgICAgY29uc3Qgam1pID0gam07XG4gICAgICAgICAgICBpZiAoISgwLCBqc3V0aWxfMS5jaGVja0pzRXJyb3IpKGptaS5tc2cpKSB7XG4gICAgICAgICAgICAgICAgKF9hID0ganN1Yi5tb25pdG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eud29yaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCgwLCBqc3V0aWxfMS5pc0hlYXJ0YmVhdE1zZykoam1pLm1zZykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmdlc3QgPSBvcmRlcmVkID8ganN1Yi5fY2hlY2tIYk9yZGVyQ29uc3VtZXIoam1pLm1zZykgOiB0cnVlO1xuICAgICAgICAgICAgICAgIGlmICghb3JkZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICBqc3ViLmluZm8uZmxvd19jb250cm9sLmhlYXJ0YmVhdF9jb3VudCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBpbmdlc3QsIHByb3RvY29sOiB0cnVlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgoMCwganN1dGlsXzEuaXNGbG93Q29udHJvbE1zZykoam1pLm1zZykpIHtcbiAgICAgICAgICAgICAgICBqc3ViLmluZm8uZmxvd19jb250cm9sLmZjX2NvdW50Kys7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgaW5nZXN0OiB0cnVlLCBwcm90b2NvbDogdHJ1ZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaW5nZXN0ID0gb3JkZXJlZCA/IGpzdWIuX2NoZWNrT3JkZXJlZENvbnN1bWVyKGptKSA6IHRydWU7XG4gICAgICAgICAgICByZXR1cm4geyBpbmdlc3QsIHByb3RvY29sOiBmYWxzZSB9O1xuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuSmV0U3RyZWFtQ2xpZW50SW1wbCA9IEpldFN0cmVhbUNsaWVudEltcGw7XG5jbGFzcyBKZXRTdHJlYW1TdWJzY3JpcHRpb25JbXBsIGV4dGVuZHMgdHlwZWRzdWJfMS5UeXBlZFN1YnNjcmlwdGlvbiB7XG4gICAgY29uc3RydWN0b3IoanMsIHN1YmplY3QsIG9wdHMpIHtcbiAgICAgICAgc3VwZXIoanMubmMsIHN1YmplY3QsIG9wdHMpO1xuICAgICAgICB0aGlzLmpzID0ganM7XG4gICAgICAgIHRoaXMubW9uaXRvciA9IG51bGw7XG4gICAgICAgIHRoaXMuc3ViLmNsb3NlZC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1vbml0b3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vbml0b3IuY2FuY2VsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXQgaW5mbyhpbmZvKSB7XG4gICAgICAgIHRoaXMuc3ViLmluZm8gPSBpbmZvO1xuICAgIH1cbiAgICBnZXQgaW5mbygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ViLmluZm87XG4gICAgfVxuICAgIF9yZXNldE9yZGVyZWRDb25zdW1lcihzc2VxKSB7XG4gICAgICAgIGlmICh0aGlzLmluZm8gPT09IG51bGwgfHwgdGhpcy5zdWIuaXNDbG9zZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld0RlbGl2ZXIgPSAoMCwgY29yZV8xLmNyZWF0ZUluYm94KSh0aGlzLmpzLm5jLm9wdGlvbnMuaW5ib3hQcmVmaXgpO1xuICAgICAgICBjb25zdCBuY2kgPSB0aGlzLmpzLm5jO1xuICAgICAgICBuY2kuX3Jlc3ViKHRoaXMuc3ViLCBuZXdEZWxpdmVyKTtcbiAgICAgICAgY29uc3QgaW5mbyA9IHRoaXMuaW5mbztcbiAgICAgICAgaW5mby5vcmRlcmVkX2NvbnN1bWVyX3NlcXVlbmNlLmRlbGl2ZXJ5X3NlcSA9IDA7XG4gICAgICAgIGluZm8uZmxvd19jb250cm9sLmhlYXJ0YmVhdF9jb3VudCA9IDA7XG4gICAgICAgIGluZm8uZmxvd19jb250cm9sLmZjX2NvdW50ID0gMDtcbiAgICAgICAgaW5mby5mbG93X2NvbnRyb2wuY29uc3VtZXJfcmVzdGFydHMrKztcbiAgICAgICAgaW5mby5kZWxpdmVyID0gbmV3RGVsaXZlcjtcbiAgICAgICAgaW5mby5jb25maWcuZGVsaXZlcl9zdWJqZWN0ID0gbmV3RGVsaXZlcjtcbiAgICAgICAgaW5mby5jb25maWcuZGVsaXZlcl9wb2xpY3kgPSBqc2FwaV90eXBlc18xLkRlbGl2ZXJQb2xpY3kuU3RhcnRTZXF1ZW5jZTtcbiAgICAgICAgaW5mby5jb25maWcub3B0X3N0YXJ0X3NlcSA9IHNzZXE7XG4gICAgICAgIC8vIHB1dCB0aGUgc3RyZWFtIG5hbWVcbiAgICAgICAgY29uc3QgcmVxID0ge307XG4gICAgICAgIHJlcS5zdHJlYW1fbmFtZSA9IHRoaXMuaW5mby5zdHJlYW07XG4gICAgICAgIHJlcS5jb25maWcgPSBpbmZvLmNvbmZpZztcbiAgICAgICAgY29uc3Qgc3ViaiA9IGAke2luZm8uYXBpLnByZWZpeH0uQ09OU1VNRVIuQ1JFQVRFLiR7aW5mby5zdHJlYW19YDtcbiAgICAgICAgdGhpcy5qcy5fcmVxdWVzdChzdWJqLCByZXEpXG4gICAgICAgICAgICAudGhlbigodikgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2kgPSB2O1xuICAgICAgICAgICAgdGhpcy5pbmZvLmNvbmZpZyA9IGNpLmNvbmZpZztcbiAgICAgICAgICAgIHRoaXMuaW5mby5uYW1lID0gY2kubmFtZTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAvLyB0byBpbmZvcm0gdGhlIHN1YnNjcmlwdGlvbiB3ZSBpbmplY3QgYW4gZXJyb3IgdGhpcyB3aWxsXG4gICAgICAgICAgICAvLyBiZSBhdCBhZnRlciB0aGUgbGFzdCBtZXNzYWdlIGlmIHVzaW5nIGFuIGl0ZXJhdG9yLlxuICAgICAgICAgICAgY29uc3QgbmVyciA9IG5ldyB0eXBlc18xLk5hdHNFcnJvcihgdW5hYmxlIHRvIHJlY3JlYXRlIG9yZGVyZWQgY29uc3VtZXIgJHtpbmZvLnN0cmVhbX0gYXQgc2VxICR7c3NlcX1gLCBjb3JlXzEuRXJyb3JDb2RlLlJlcXVlc3RFcnJvciwgZXJyKTtcbiAgICAgICAgICAgIHRoaXMuc3ViLmNhbGxiYWNrKG5lcnIsIHt9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIHRoaXMgaXMgY2FsbGVkIGJ5IHB1c2ggc3Vic2NyaXB0aW9ucywgdG8gaW5pdGlhbGl6ZSB0aGUgbW9uaXRvcmluZ1xuICAgIC8vIGlmIGNvbmZpZ3VyZWQgb24gdGhlIGNvbnN1bWVyXG4gICAgX21heWJlU2V0dXBIYk1vbml0b3JpbmcoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IG5zID0gKChfYiA9IChfYSA9IHRoaXMuaW5mbykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbmZpZykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmlkbGVfaGVhcnRiZWF0KSB8fCAwO1xuICAgICAgICBpZiAobnMpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldHVwSGJNb25pdG9yaW5nKCgwLCBqc3V0aWxfMS5taWxsaXMpKG5zKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3NldHVwSGJNb25pdG9yaW5nKG1pbGxpcywgY2FuY2VsQWZ0ZXIgPSAwKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB7IGNhbmNlbEFmdGVyOiAwLCBtYXhPdXQ6IDIgfTtcbiAgICAgICAgaWYgKGNhbmNlbEFmdGVyKSB7XG4gICAgICAgICAgICBvcHRzLmNhbmNlbEFmdGVyID0gY2FuY2VsQWZ0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3ViID0gdGhpcy5zdWI7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSAodikgPT4ge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSAoMCwganN1dGlsXzEubmV3SnNFcnJvck1zZykoNDA5LCBgJHtqc3V0aWxfMS5KczQwOUVycm9ycy5JZGxlSGVhcnRiZWF0TWlzc2VkfTogJHt2fWAsIHRoaXMuc3ViLnN1YmplY3QpO1xuICAgICAgICAgICAgY29uc3Qgb3JkZXJlZCA9IChfYSA9IHRoaXMuaW5mbykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9yZGVyZWQ7XG4gICAgICAgICAgICAvLyBub24tb3JkZXJlZCBjb25zdW1lcnMgYXJlIGFsd2F5cyBub3RpZmllZCBvZiB0aGUgY29uZGl0aW9uXG4gICAgICAgICAgICAvLyBhcyB0aGV5IG5lZWQgdG8gdHJ5IGFuZCByZWNvdmVyXG4gICAgICAgICAgICBpZiAoIW9yZGVyZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1Yi5jYWxsYmFjayhudWxsLCBtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmpzLm5jLnByb3RvY29sLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBhcmUgbm90IGNvbm5lY3RlZCBkb24ndCBkbyBhbnl0aGluZ1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBjb25zdW1lclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlcSA9ICgoX2MgPSAoX2IgPSB0aGlzLmluZm8pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5vcmRlcmVkX2NvbnN1bWVyX3NlcXVlbmNlKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Muc3RyZWFtX3NlcSkgfHwgMDtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNldE9yZGVyZWRDb25zdW1lcihzZXEgKyAxKTtcbiAgICAgICAgICAgICAgICAvLyBpZiB3ZSBhcmUgb3JkZXJlZCwgd2Ugd2lsbCByZXNldCB0aGUgY29uc3VtZXIgYW5kIGtlZXBcbiAgICAgICAgICAgICAgICAvLyBmZWVkaW5nIHRoZSBpdGVyYXRvciBvciBjYWxsYmFjayAtIHdlIGFyZSBub3Qgc3RvcHBpbmdcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBsZXQgdGhlIGhiIG1vbml0b3Iga25vdyBpZiB3ZSBhcmUgc3RvcHBpbmcgZm9yIGNhbGxiYWNrc1xuICAgICAgICAgICAgLy8gd2UgZG9uJ3QgYXMgd2UgZGVsaXZlciB0aGUgZXJyb3JzIHZpYSB0aGUgY2IuXG4gICAgICAgICAgICByZXR1cm4gIXN1Yi5ub0l0ZXJhdG9yO1xuICAgICAgICB9O1xuICAgICAgICAvLyB0aGlzIG9ubHkgYXBwbGllcyBmb3IgcHVzaCBzdWJzY3JpcHRpb25zXG4gICAgICAgIHRoaXMubW9uaXRvciA9IG5ldyBpZGxlaGVhcnRiZWF0X21vbml0b3JfMS5JZGxlSGVhcnRiZWF0TW9uaXRvcihtaWxsaXMsIGhhbmRsZXIsIG9wdHMpO1xuICAgIH1cbiAgICBfY2hlY2tIYk9yZGVyQ29uc3VtZXIobXNnKSB7XG4gICAgICAgIGNvbnN0IHJtID0gbXNnLmhlYWRlcnMuZ2V0KHR5cGVzXzIuSnNIZWFkZXJzLkNvbnN1bWVyU3RhbGxlZEhkcik7XG4gICAgICAgIGlmIChybSAhPT0gXCJcIikge1xuICAgICAgICAgICAgY29uc3QgbmNpID0gdGhpcy5qcy5uYztcbiAgICAgICAgICAgIG5jaS5wdWJsaXNoKHJtKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYXN0RGVsaXZlcmVkID0gcGFyc2VJbnQobXNnLmhlYWRlcnMuZ2V0KHR5cGVzXzIuSnNIZWFkZXJzLkxhc3RDb25zdW1lclNlcUhkciksIDEwKTtcbiAgICAgICAgY29uc3Qgb3JkZXJlZCA9IHRoaXMuaW5mby5vcmRlcmVkX2NvbnN1bWVyX3NlcXVlbmNlO1xuICAgICAgICB0aGlzLmluZm8uZmxvd19jb250cm9sLmhlYXJ0YmVhdF9jb3VudCsrO1xuICAgICAgICBpZiAobGFzdERlbGl2ZXJlZCAhPT0gb3JkZXJlZC5kZWxpdmVyeV9zZXEpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2V0T3JkZXJlZENvbnN1bWVyKG9yZGVyZWQuc3RyZWFtX3NlcSArIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgX2NoZWNrT3JkZXJlZENvbnN1bWVyKGptKSB7XG4gICAgICAgIGNvbnN0IG9yZGVyZWQgPSB0aGlzLmluZm8ub3JkZXJlZF9jb25zdW1lcl9zZXF1ZW5jZTtcbiAgICAgICAgY29uc3Qgc3NlcSA9IGptLmluZm8uc3RyZWFtU2VxdWVuY2U7XG4gICAgICAgIGNvbnN0IGRzZXEgPSBqbS5pbmZvLmRlbGl2ZXJ5U2VxdWVuY2U7XG4gICAgICAgIGlmIChkc2VxICE9IG9yZGVyZWQuZGVsaXZlcnlfc2VxICsgMSkge1xuICAgICAgICAgICAgdGhpcy5fcmVzZXRPcmRlcmVkQ29uc3VtZXIob3JkZXJlZC5zdHJlYW1fc2VxICsgMSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgb3JkZXJlZC5kZWxpdmVyeV9zZXEgPSBkc2VxO1xuICAgICAgICBvcmRlcmVkLnN0cmVhbV9zZXEgPSBzc2VxO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0Nsb3NlZCgpKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgdGhpcy5kcmFpbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgamluZm8gPSB0aGlzLnN1Yi5pbmZvO1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGppbmZvLmNvbmZpZy5kdXJhYmxlX25hbWUgfHwgamluZm8ubmFtZTtcbiAgICAgICAgICAgIGNvbnN0IHN1YmogPSBgJHtqaW5mby5hcGkucHJlZml4fS5DT05TVU1FUi5ERUxFVEUuJHtqaW5mby5zdHJlYW19LiR7bmFtZX1gO1xuICAgICAgICAgICAgeWllbGQgamluZm8uYXBpLl9yZXF1ZXN0KHN1YmopO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3VtZXJJbmZvKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgamluZm8gPSB0aGlzLnN1Yi5pbmZvO1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGppbmZvLmNvbmZpZy5kdXJhYmxlX25hbWUgfHwgamluZm8ubmFtZTtcbiAgICAgICAgICAgIGNvbnN0IHN1YmogPSBgJHtqaW5mby5hcGkucHJlZml4fS5DT05TVU1FUi5JTkZPLiR7amluZm8uc3RyZWFtfS4ke25hbWV9YDtcbiAgICAgICAgICAgIGNvbnN0IGNpID0geWllbGQgamluZm8uYXBpLl9yZXF1ZXN0KHN1YmopO1xuICAgICAgICAgICAgamluZm8ubGFzdCA9IGNpO1xuICAgICAgICAgICAgcmV0dXJuIGNpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkpldFN0cmVhbVN1YnNjcmlwdGlvbkltcGwgPSBKZXRTdHJlYW1TdWJzY3JpcHRpb25JbXBsO1xuY2xhc3MgSmV0U3RyZWFtUHVsbFN1YnNjcmlwdGlvbkltcGwgZXh0ZW5kcyBKZXRTdHJlYW1TdWJzY3JpcHRpb25JbXBsIHtcbiAgICBjb25zdHJ1Y3Rvcihqcywgc3ViamVjdCwgb3B0cykge1xuICAgICAgICBzdXBlcihqcywgc3ViamVjdCwgb3B0cyk7XG4gICAgfVxuICAgIHB1bGwob3B0cyA9IHsgYmF0Y2g6IDEgfSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCB7IHN0cmVhbSwgY29uZmlnLCBuYW1lIH0gPSB0aGlzLnN1Yi5pbmZvO1xuICAgICAgICBjb25zdCBjb25zdW1lciA9IChfYSA9IGNvbmZpZy5kdXJhYmxlX25hbWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5hbWU7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB7fTtcbiAgICAgICAgYXJncy5iYXRjaCA9IG9wdHMuYmF0Y2ggfHwgMTtcbiAgICAgICAgYXJncy5ub193YWl0ID0gb3B0cy5ub193YWl0IHx8IGZhbHNlO1xuICAgICAgICBpZiAoKChfYiA9IG9wdHMubWF4X2J5dGVzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwKSA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGZ2ID0gdGhpcy5qcy5uYy5mZWF0dXJlcy5nZXQoc2VtdmVyXzEuRmVhdHVyZS5KU19QVUxMX01BWF9CWVRFUyk7XG4gICAgICAgICAgICBpZiAoIWZ2Lm9rKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBtYXhfYnl0ZXMgaXMgb25seSBzdXBwb3J0ZWQgb24gc2VydmVycyAke2Z2Lm1pbn0gb3IgYmV0dGVyYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhcmdzLm1heF9ieXRlcyA9IG9wdHMubWF4X2J5dGVzO1xuICAgICAgICB9XG4gICAgICAgIGxldCBleHBpcmVzID0gMDtcbiAgICAgICAgaWYgKG9wdHMuZXhwaXJlcyAmJiBvcHRzLmV4cGlyZXMgPiAwKSB7XG4gICAgICAgICAgICBleHBpcmVzID0gb3B0cy5leHBpcmVzO1xuICAgICAgICAgICAgYXJncy5leHBpcmVzID0gKDAsIGpzdXRpbF8xLm5hbm9zKShleHBpcmVzKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaGIgPSAwO1xuICAgICAgICBpZiAob3B0cy5pZGxlX2hlYXJ0YmVhdCAmJiBvcHRzLmlkbGVfaGVhcnRiZWF0ID4gMCkge1xuICAgICAgICAgICAgaGIgPSBvcHRzLmlkbGVfaGVhcnRiZWF0O1xuICAgICAgICAgICAgYXJncy5pZGxlX2hlYXJ0YmVhdCA9ICgwLCBqc3V0aWxfMS5uYW5vcykoaGIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYiAmJiBleHBpcmVzID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpZGxlX2hlYXJ0YmVhdCByZXF1aXJlcyBleHBpcmVzXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYiA+IGV4cGlyZXMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImV4cGlyZXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gaWRsZV9oZWFydGJlYXRcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW5mbykge1xuICAgICAgICAgICAgaWYgKHRoaXMubW9uaXRvcikge1xuICAgICAgICAgICAgICAgIHRoaXMubW9uaXRvci5jYW5jZWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChleHBpcmVzICYmIGhiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1vbml0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0dXBIYk1vbml0b3JpbmcoaGIsIGV4cGlyZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb25pdG9yLl9jaGFuZ2UoaGIsIGV4cGlyZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGFwaSA9IHRoaXMuaW5mby5hcGk7XG4gICAgICAgICAgICBjb25zdCBzdWJqID0gYCR7YXBpLnByZWZpeH0uQ09OU1VNRVIuTVNHLk5FWFQuJHtzdHJlYW19LiR7Y29uc3VtZXJ9YDtcbiAgICAgICAgICAgIGNvbnN0IHJlcGx5ID0gdGhpcy5zdWIuc3ViamVjdDtcbiAgICAgICAgICAgIGFwaS5uYy5wdWJsaXNoKHN1YmosIGFwaS5qYy5lbmNvZGUoYXJncyksIHsgcmVwbHk6IHJlcGx5IH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gbXNnQWRhcHRlcihpdGVyYXRvcikge1xuICAgIGlmIChpdGVyYXRvcikge1xuICAgICAgICByZXR1cm4gaXRlck1zZ0FkYXB0ZXI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gY2JNc2dBZGFwdGVyO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNiTXNnQWRhcHRlcihlcnIsIG1zZykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIFtlcnIsIG51bGxdO1xuICAgIH1cbiAgICBlcnIgPSAoMCwganN1dGlsXzEuY2hlY2tKc0Vycm9yKShtc2cpO1xuICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIFtlcnIsIG51bGxdO1xuICAgIH1cbiAgICAvLyBhc3N1bWluZyB0aGF0IHRoZSBwcm90b2NvbEZpbHRlckZuIGlzIHNldCFcbiAgICByZXR1cm4gW251bGwsICgwLCBqc21zZ18xLnRvSnNNc2cpKG1zZyldO1xufVxuZnVuY3Rpb24gaXRlck1zZ0FkYXB0ZXIoZXJyLCBtc2cpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBbZXJyLCBudWxsXTtcbiAgICB9XG4gICAgLy8gaXRlcmF0b3Igd2lsbCBjbG9zZSBpZiB3ZSBoYXZlIGFuIGVycm9yXG4gICAgLy8gY2hlY2sgZm9yIGVycm9ycyB0aGF0IHNob3VsZG4ndCBjbG9zZSBpdFxuICAgIGNvbnN0IG5lID0gKDAsIGpzdXRpbF8xLmNoZWNrSnNFcnJvcikobXNnKTtcbiAgICBpZiAobmUgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtoaWRlTm9uVGVybWluYWxKc0Vycm9ycyhuZSksIG51bGxdO1xuICAgIH1cbiAgICAvLyBhc3N1bWluZyB0aGF0IHRoZSBwcm90b2NvbEZpbHRlckZuIGlzIHNldFxuICAgIHJldHVybiBbbnVsbCwgKDAsIGpzbXNnXzEudG9Kc01zZykobXNnKV07XG59XG5mdW5jdGlvbiBoaWRlTm9uVGVybWluYWxKc0Vycm9ycyhuZSkge1xuICAgIGlmIChuZSAhPT0gbnVsbCkge1xuICAgICAgICBzd2l0Y2ggKG5lLmNvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgY29yZV8xLkVycm9yQ29kZS5KZXRTdHJlYW00MDROb01lc3NhZ2VzOlxuICAgICAgICAgICAgY2FzZSBjb3JlXzEuRXJyb3JDb2RlLkpldFN0cmVhbTQwOFJlcXVlc3RUaW1lb3V0OlxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgY2FzZSBjb3JlXzEuRXJyb3JDb2RlLkpldFN0cmVhbTQwOTpcbiAgICAgICAgICAgICAgICBpZiAoKDAsIGpzdXRpbF8xLmlzVGVybWluYWw0MDkpKG5lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBhdXRvQWNrSnNNc2coZGF0YSkge1xuICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGRhdGEuYWNrKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anNjbGllbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/jetstream/jsclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/jetstream/jslister.js":
/*!*****************************************************!*\
  !*** ./node_modules/nats/lib/jetstream/jslister.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListerImpl = void 0;\nclass ListerImpl {\n    constructor(subject, filter, jsm, payload) {\n        if (!subject) {\n            throw new Error(\"subject is required\");\n        }\n        this.subject = subject;\n        this.jsm = jsm;\n        this.offset = 0;\n        this.pageInfo = {};\n        this.filter = filter;\n        this.payload = payload || {};\n    }\n    next() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.err) {\n                return [];\n            }\n            if (this.pageInfo && this.offset >= this.pageInfo.total) {\n                return [];\n            }\n            const offset = { offset: this.offset };\n            if (this.payload) {\n                Object.assign(offset, this.payload);\n            }\n            try {\n                const r = yield this.jsm._request(this.subject, offset, { timeout: this.jsm.timeout });\n                this.pageInfo = r;\n                // offsets are reported in total, so need to count\n                // all the entries returned\n                const count = this.countResponse(r);\n                if (count === 0) {\n                    // we are done if we get a null set of infos\n                    return [];\n                }\n                this.offset += count;\n                const a = this.filter(r);\n                return a;\n            }\n            catch (err) {\n                this.err = err;\n                throw err;\n            }\n        });\n    }\n    countResponse(r) {\n        var _a, _b, _c;\n        switch (r === null || r === void 0 ? void 0 : r.type) {\n            case \"io.nats.jetstream.api.v1.stream_names_response\":\n            case \"io.nats.jetstream.api.v1.stream_list_response\":\n                return ((_a = r.streams) === null || _a === void 0 ? void 0 : _a.length) || 0;\n            case \"io.nats.jetstream.api.v1.consumer_list_response\":\n                return ((_b = r.consumers) === null || _b === void 0 ? void 0 : _b.length) || 0;\n            default:\n                console.error(`jslister.ts: unknown API response for paged output: ${r === null || r === void 0 ? void 0 : r.type}`);\n                // has to be a stream...\n                return ((_c = r.streams) === null || _c === void 0 ? void 0 : _c.length) || 0;\n        }\n        return 0;\n    }\n    [Symbol.asyncIterator]() {\n        return __asyncGenerator(this, arguments, function* _a() {\n            let page = yield __await(this.next());\n            while (page.length > 0) {\n                for (const item of page) {\n                    yield yield __await(item);\n                }\n                page = yield __await(this.next());\n            }\n        });\n    }\n}\nexports.ListerImpl = ListerImpl;\n//# sourceMappingURL=jslister.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvamV0c3RyZWFtL2pzbGlzdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsb0dBQW9HLGNBQWM7QUFDbkksOEJBQThCLHNCQUFzQjtBQUNwRCwwQkFBMEIsWUFBWSxzQkFBc0IscUNBQXFDLDJDQUEyQyxNQUFNO0FBQ2xKLDRCQUE0QixNQUFNLGlCQUFpQixZQUFZO0FBQy9ELHVCQUF1QjtBQUN2Qiw4QkFBOEI7QUFDOUIsNkJBQTZCO0FBQzdCLDRCQUE0QjtBQUM1QjtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRSwyQkFBMkI7QUFDckc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUYsNkNBQTZDO0FBQ2xJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL25hdHMvbGliL2pldHN0cmVhbS9qc2xpc3Rlci5qcz82OTFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19hd2FpdCA9ICh0aGlzICYmIHRoaXMuX19hd2FpdCkgfHwgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7IH1cbnZhciBfX2FzeW5jR2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2FzeW5jR2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiwgYXdhaXRSZXR1cm4pLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gICAgZnVuY3Rpb24gYXdhaXRSZXR1cm4oZikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGYsIHJlamVjdCk7IH07IH1cbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaWYgKGdbbl0pIHsgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgaWYgKGYpIGlbbl0gPSBmKGlbbl0pOyB9IH1cbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaXN0ZXJJbXBsID0gdm9pZCAwO1xuY2xhc3MgTGlzdGVySW1wbCB7XG4gICAgY29uc3RydWN0b3Ioc3ViamVjdCwgZmlsdGVyLCBqc20sIHBheWxvYWQpIHtcbiAgICAgICAgaWYgKCFzdWJqZWN0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzdWJqZWN0IGlzIHJlcXVpcmVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gICAgICAgIHRoaXMuanNtID0ganNtO1xuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMucGFnZUluZm8gPSB7fTtcbiAgICAgICAgdGhpcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQgfHwge307XG4gICAgfVxuICAgIG5leHQoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5wYWdlSW5mbyAmJiB0aGlzLm9mZnNldCA+PSB0aGlzLnBhZ2VJbmZvLnRvdGFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0geyBvZmZzZXQ6IHRoaXMub2Zmc2V0IH07XG4gICAgICAgICAgICBpZiAodGhpcy5wYXlsb2FkKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihvZmZzZXQsIHRoaXMucGF5bG9hZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB5aWVsZCB0aGlzLmpzbS5fcmVxdWVzdCh0aGlzLnN1YmplY3QsIG9mZnNldCwgeyB0aW1lb3V0OiB0aGlzLmpzbS50aW1lb3V0IH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucGFnZUluZm8gPSByO1xuICAgICAgICAgICAgICAgIC8vIG9mZnNldHMgYXJlIHJlcG9ydGVkIGluIHRvdGFsLCBzbyBuZWVkIHRvIGNvdW50XG4gICAgICAgICAgICAgICAgLy8gYWxsIHRoZSBlbnRyaWVzIHJldHVybmVkXG4gICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSB0aGlzLmNvdW50UmVzcG9uc2Uocik7XG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBkb25lIGlmIHdlIGdldCBhIG51bGwgc2V0IG9mIGluZm9zXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgKz0gY291bnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IHRoaXMuZmlsdGVyKHIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyID0gZXJyO1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvdW50UmVzcG9uc2Uocikge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgc3dpdGNoIChyID09PSBudWxsIHx8IHIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHIudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5zdHJlYW1fbmFtZXNfcmVzcG9uc2VcIjpcbiAgICAgICAgICAgIGNhc2UgXCJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuc3RyZWFtX2xpc3RfcmVzcG9uc2VcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gKChfYSA9IHIuc3RyZWFtcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgfHwgMDtcbiAgICAgICAgICAgIGNhc2UgXCJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuY29uc3VtZXJfbGlzdF9yZXNwb25zZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiAoKF9iID0gci5jb25zdW1lcnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5sZW5ndGgpIHx8IDA7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYGpzbGlzdGVyLnRzOiB1bmtub3duIEFQSSByZXNwb25zZSBmb3IgcGFnZWQgb3V0cHV0OiAke3IgPT09IG51bGwgfHwgciA9PT0gdm9pZCAwID8gdm9pZCAwIDogci50eXBlfWApO1xuICAgICAgICAgICAgICAgIC8vIGhhcyB0byBiZSBhIHN0cmVhbS4uLlxuICAgICAgICAgICAgICAgIHJldHVybiAoKF9jID0gci5zdHJlYW1zKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MubGVuZ3RoKSB8fCAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKiBfYSgpIHtcbiAgICAgICAgICAgIGxldCBwYWdlID0geWllbGQgX19hd2FpdCh0aGlzLm5leHQoKSk7XG4gICAgICAgICAgICB3aGlsZSAocGFnZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHBhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgeWllbGQgX19hd2FpdChpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFnZSA9IHlpZWxkIF9fYXdhaXQodGhpcy5uZXh0KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkxpc3RlckltcGwgPSBMaXN0ZXJJbXBsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anNsaXN0ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/jetstream/jslister.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/jetstream/jsm.js":
/*!************************************************!*\
  !*** ./node_modules/nats/lib/jetstream/jsm.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright 2021-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JetStreamManagerImpl = exports.DirectMsgImpl = exports.DirectStreamAPIImpl = void 0;\nconst jsbaseclient_api_1 = __webpack_require__(/*! ./jsbaseclient_api */ \"(rsc)/./node_modules/nats/lib/jetstream/jsbaseclient_api.js\");\nconst jsmstream_api_1 = __webpack_require__(/*! ./jsmstream_api */ \"(rsc)/./node_modules/nats/lib/jetstream/jsmstream_api.js\");\nconst jsmconsumer_api_1 = __webpack_require__(/*! ./jsmconsumer_api */ \"(rsc)/./node_modules/nats/lib/jetstream/jsmconsumer_api.js\");\nconst queued_iterator_1 = __webpack_require__(/*! ../nats-base-client/queued_iterator */ \"(rsc)/./node_modules/nats/lib/nats-base-client/queued_iterator.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/nats/lib/jetstream/types.js\");\nconst jsutil_1 = __webpack_require__(/*! ./jsutil */ \"(rsc)/./node_modules/nats/lib/jetstream/jsutil.js\");\nconst encoders_1 = __webpack_require__(/*! ../nats-base-client/encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nconst codec_1 = __webpack_require__(/*! ../nats-base-client/codec */ \"(rsc)/./node_modules/nats/lib/nats-base-client/codec.js\");\nclass DirectStreamAPIImpl extends jsbaseclient_api_1.BaseApiClient {\n    constructor(nc, opts) {\n        super(nc, opts);\n    }\n    getMessage(stream, query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            (0, jsutil_1.validateStreamName)(stream);\n            // if doing a last_by_subj request, we append the subject\n            // this allows last_by_subj to be subject to permissions (KV)\n            let qq = query;\n            const { last_by_subj } = qq;\n            if (last_by_subj) {\n                qq = null;\n            }\n            const payload = qq ? this.jc.encode(qq) : encoders_1.Empty;\n            const pre = this.opts.apiPrefix || \"$JS.API\";\n            const subj = last_by_subj\n                ? `${pre}.DIRECT.GET.${stream}.${last_by_subj}`\n                : `${pre}.DIRECT.GET.${stream}`;\n            const r = yield this.nc.request(subj, payload);\n            // response is not a JS.API response\n            const err = (0, jsutil_1.checkJsError)(r);\n            if (err) {\n                return Promise.reject(err);\n            }\n            const dm = new DirectMsgImpl(r);\n            return Promise.resolve(dm);\n        });\n    }\n}\nexports.DirectStreamAPIImpl = DirectStreamAPIImpl;\nclass DirectMsgImpl {\n    constructor(m) {\n        if (!m.headers) {\n            throw new Error(\"headers expected\");\n        }\n        this.data = m.data;\n        this.header = m.headers;\n    }\n    get subject() {\n        return this.header.last(types_1.DirectMsgHeaders.Subject);\n    }\n    get seq() {\n        const v = this.header.last(types_1.DirectMsgHeaders.Sequence);\n        return typeof v === \"string\" ? parseInt(v) : 0;\n    }\n    get time() {\n        return new Date(Date.parse(this.timestamp));\n    }\n    get timestamp() {\n        return this.header.last(types_1.DirectMsgHeaders.TimeStamp);\n    }\n    get stream() {\n        return this.header.last(types_1.DirectMsgHeaders.Stream);\n    }\n    json(reviver) {\n        return (0, codec_1.JSONCodec)(reviver).decode(this.data);\n    }\n    string() {\n        return encoders_1.TD.decode(this.data);\n    }\n}\nexports.DirectMsgImpl = DirectMsgImpl;\nclass JetStreamManagerImpl extends jsbaseclient_api_1.BaseApiClient {\n    constructor(nc, opts) {\n        super(nc, opts);\n        this.streams = new jsmstream_api_1.StreamAPIImpl(nc, opts);\n        this.consumers = new jsmconsumer_api_1.ConsumerAPIImpl(nc, opts);\n        this.direct = new DirectStreamAPIImpl(nc, opts);\n    }\n    getAccountInfo() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const r = yield this._request(`${this.prefix}.INFO`);\n            return r;\n        });\n    }\n    jetstream() {\n        return this.nc.jetstream(this.getOptions());\n    }\n    advisories() {\n        const iter = new queued_iterator_1.QueuedIteratorImpl();\n        this.nc.subscribe(`$JS.EVENT.ADVISORY.>`, {\n            callback: (err, msg) => {\n                if (err) {\n                    throw err;\n                }\n                try {\n                    const d = this.parseJsResponse(msg);\n                    const chunks = d.type.split(\".\");\n                    const kind = chunks[chunks.length - 1];\n                    iter.push({ kind: kind, data: d });\n                }\n                catch (err) {\n                    iter.stop(err);\n                }\n            },\n        });\n        return iter;\n    }\n}\nexports.JetStreamManagerImpl = JetStreamManagerImpl;\n//# sourceMappingURL=jsm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/jetstream/jsm.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/jetstream/jsmconsumer_api.js":
/*!************************************************************!*\
  !*** ./node_modules/nats/lib/jetstream/jsmconsumer_api.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConsumerAPIImpl = void 0;\n/*\n * Copyright 2021-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst jsbaseclient_api_1 = __webpack_require__(/*! ./jsbaseclient_api */ \"(rsc)/./node_modules/nats/lib/jetstream/jsbaseclient_api.js\");\nconst jslister_1 = __webpack_require__(/*! ./jslister */ \"(rsc)/./node_modules/nats/lib/jetstream/jslister.js\");\nconst jsutil_1 = __webpack_require__(/*! ./jsutil */ \"(rsc)/./node_modules/nats/lib/jetstream/jsutil.js\");\nconst semver_1 = __webpack_require__(/*! ../nats-base-client/semver */ \"(rsc)/./node_modules/nats/lib/nats-base-client/semver.js\");\nconst jsapi_types_1 = __webpack_require__(/*! ./jsapi_types */ \"(rsc)/./node_modules/nats/lib/jetstream/jsapi_types.js\");\nclass ConsumerAPIImpl extends jsbaseclient_api_1.BaseApiClient {\n    constructor(nc, opts) {\n        super(nc, opts);\n    }\n    add(stream, cfg, action = jsapi_types_1.ConsumerApiAction.Create) {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function* () {\n            (0, jsutil_1.validateStreamName)(stream);\n            if (cfg.deliver_group && cfg.flow_control) {\n                throw new Error(\"jetstream flow control is not supported with queue groups\");\n            }\n            if (cfg.deliver_group && cfg.idle_heartbeat) {\n                throw new Error(\"jetstream idle heartbeat is not supported with queue groups\");\n            }\n            const cr = {};\n            cr.config = cfg;\n            cr.stream_name = stream;\n            cr.action = action;\n            if (cr.config.durable_name) {\n                (0, jsutil_1.validateDurableName)(cr.config.durable_name);\n            }\n            const nci = this.nc;\n            let { min, ok: newAPI } = nci.features.get(semver_1.Feature.JS_NEW_CONSUMER_CREATE_API);\n            const name = cfg.name === \"\" ? undefined : cfg.name;\n            if (name && !newAPI) {\n                throw new Error(`consumer 'name' requires server ${min}`);\n            }\n            if (name) {\n                try {\n                    (0, jsutil_1.minValidation)(\"name\", name);\n                }\n                catch (err) {\n                    // if we have a cannot contain the message, massage a bit\n                    const m = err.message;\n                    const idx = m.indexOf(\"cannot contain\");\n                    if (idx !== -1) {\n                        throw new Error(`consumer 'name' ${m.substring(idx)}`);\n                    }\n                    throw err;\n                }\n            }\n            let subj;\n            let consumerName = \"\";\n            // new api doesn't support multiple filter subjects\n            // this delayed until here because the consumer in an update could have\n            // been created with the new API, and have a `name`\n            if (Array.isArray(cfg.filter_subjects)) {\n                const { min, ok } = nci.features.get(semver_1.Feature.JS_MULTIPLE_CONSUMER_FILTER);\n                if (!ok) {\n                    throw new Error(`consumer 'filter_subjects' requires server ${min}`);\n                }\n                newAPI = false;\n            }\n            if (cfg.metadata) {\n                const { min, ok } = nci.features.get(semver_1.Feature.JS_STREAM_CONSUMER_METADATA);\n                if (!ok) {\n                    throw new Error(`consumer 'metadata' requires server ${min}`);\n                }\n            }\n            if (newAPI) {\n                consumerName = (_b = (_a = cfg.name) !== null && _a !== void 0 ? _a : cfg.durable_name) !== null && _b !== void 0 ? _b : \"\";\n            }\n            if (consumerName !== \"\") {\n                let fs = (_c = cfg.filter_subject) !== null && _c !== void 0 ? _c : undefined;\n                if (fs === \">\") {\n                    fs = undefined;\n                }\n                subj = fs !== undefined\n                    ? `${this.prefix}.CONSUMER.CREATE.${stream}.${consumerName}.${fs}`\n                    : `${this.prefix}.CONSUMER.CREATE.${stream}.${consumerName}`;\n            }\n            else {\n                subj = cfg.durable_name\n                    ? `${this.prefix}.CONSUMER.DURABLE.CREATE.${stream}.${cfg.durable_name}`\n                    : `${this.prefix}.CONSUMER.CREATE.${stream}`;\n            }\n            const r = yield this._request(subj, cr);\n            return r;\n        });\n    }\n    update(stream, durable, cfg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const ci = yield this.info(stream, durable);\n            const changable = cfg;\n            return this.add(stream, Object.assign(ci.config, changable), jsapi_types_1.ConsumerApiAction.Update);\n        });\n    }\n    info(stream, name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            (0, jsutil_1.validateStreamName)(stream);\n            (0, jsutil_1.validateDurableName)(name);\n            const r = yield this._request(`${this.prefix}.CONSUMER.INFO.${stream}.${name}`);\n            return r;\n        });\n    }\n    delete(stream, name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            (0, jsutil_1.validateStreamName)(stream);\n            (0, jsutil_1.validateDurableName)(name);\n            const r = yield this._request(`${this.prefix}.CONSUMER.DELETE.${stream}.${name}`);\n            const cr = r;\n            return cr.success;\n        });\n    }\n    list(stream) {\n        (0, jsutil_1.validateStreamName)(stream);\n        const filter = (v) => {\n            const clr = v;\n            return clr.consumers;\n        };\n        const subj = `${this.prefix}.CONSUMER.LIST.${stream}`;\n        return new jslister_1.ListerImpl(subj, filter, this);\n    }\n}\nexports.ConsumerAPIImpl = ConsumerAPIImpl;\n//# sourceMappingURL=jsmconsumer_api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/jetstream/jsmconsumer_api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/jetstream/jsmsg.js":
/*!**************************************************!*\
  !*** ./node_modules/nats/lib/jetstream/jsmsg.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JsMsgImpl = exports.parseInfo = exports.toJsMsg = exports.ACK = void 0;\n/*\n * Copyright 2021-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst databuffer_1 = __webpack_require__(/*! ../nats-base-client/databuffer */ \"(rsc)/./node_modules/nats/lib/nats-base-client/databuffer.js\");\nconst codec_1 = __webpack_require__(/*! ../nats-base-client/codec */ \"(rsc)/./node_modules/nats/lib/nats-base-client/codec.js\");\nconst request_1 = __webpack_require__(/*! ../nats-base-client/request */ \"(rsc)/./node_modules/nats/lib/nats-base-client/request.js\");\nconst jsutil_1 = __webpack_require__(/*! ./jsutil */ \"(rsc)/./node_modules/nats/lib/jetstream/jsutil.js\");\nexports.ACK = Uint8Array.of(43, 65, 67, 75);\nconst NAK = Uint8Array.of(45, 78, 65, 75);\nconst WPI = Uint8Array.of(43, 87, 80, 73);\nconst NXT = Uint8Array.of(43, 78, 88, 84);\nconst TERM = Uint8Array.of(43, 84, 69, 82, 77);\nconst SPACE = Uint8Array.of(32);\nfunction toJsMsg(m) {\n    return new JsMsgImpl(m);\n}\nexports.toJsMsg = toJsMsg;\nfunction parseInfo(s) {\n    const tokens = s.split(\".\");\n    if (tokens.length === 9) {\n        tokens.splice(2, 0, \"_\", \"\");\n    }\n    if ((tokens.length < 11) || tokens[0] !== \"$JS\" || tokens[1] !== \"ACK\") {\n        throw new Error(`not js message`);\n    }\n    // old\n    // \"$JS.ACK.<stream>.<consumer>.<redeliveryCount><streamSeq><deliverySequence>.<timestamp>.<pending>\"\n    // new\n    // $JS.ACK.<domain>.<accounthash>.<stream>.<consumer>.<redeliveryCount>.<streamSeq>.<deliverySequence>.<timestamp>.<pending>.<random>\n    const di = {};\n    // if domain is \"_\", replace with blank\n    di.domain = tokens[2] === \"_\" ? \"\" : tokens[2];\n    di.account_hash = tokens[3];\n    di.stream = tokens[4];\n    di.consumer = tokens[5];\n    di.redeliveryCount = parseInt(tokens[6], 10);\n    di.redelivered = di.redeliveryCount > 1;\n    di.streamSequence = parseInt(tokens[7], 10);\n    di.deliverySequence = parseInt(tokens[8], 10);\n    di.timestampNanos = parseInt(tokens[9], 10);\n    di.pending = parseInt(tokens[10], 10);\n    return di;\n}\nexports.parseInfo = parseInfo;\nclass JsMsgImpl {\n    constructor(msg) {\n        this.msg = msg;\n        this.didAck = false;\n    }\n    get subject() {\n        return this.msg.subject;\n    }\n    get sid() {\n        return this.msg.sid;\n    }\n    get data() {\n        return this.msg.data;\n    }\n    get headers() {\n        return this.msg.headers;\n    }\n    get info() {\n        if (!this.di) {\n            this.di = parseInfo(this.reply);\n        }\n        return this.di;\n    }\n    get redelivered() {\n        return this.info.redeliveryCount > 1;\n    }\n    get reply() {\n        return this.msg.reply || \"\";\n    }\n    get seq() {\n        return this.info.streamSequence;\n    }\n    doAck(payload) {\n        if (!this.didAck) {\n            // all acks are final with the exception of +WPI\n            this.didAck = !this.isWIP(payload);\n            this.msg.respond(payload);\n        }\n    }\n    isWIP(p) {\n        return p.length === 4 && p[0] === WPI[0] && p[1] === WPI[1] &&\n            p[2] === WPI[2] && p[3] === WPI[3];\n    }\n    // this has to dig into the internals as the message has access\n    // to the protocol but not the high-level client.\n    ackAck() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.didAck) {\n                this.didAck = true;\n                if (this.msg.reply) {\n                    const mi = this.msg;\n                    const proto = mi.publisher;\n                    const trace = !(((_a = proto.options) === null || _a === void 0 ? void 0 : _a.noAsyncTraces) || false);\n                    const r = new request_1.RequestOne(proto.muxSubscriptions, this.msg.reply, {\n                        timeout: 1000,\n                    }, trace);\n                    proto.request(r);\n                    try {\n                        proto.publish(this.msg.reply, exports.ACK, {\n                            reply: `${proto.muxSubscriptions.baseInbox}${r.token}`,\n                        });\n                    }\n                    catch (err) {\n                        r.cancel(err);\n                    }\n                    try {\n                        yield Promise.race([r.timer, r.deferred]);\n                        return true;\n                    }\n                    catch (err) {\n                        r.cancel(err);\n                    }\n                }\n            }\n            return false;\n        });\n    }\n    ack() {\n        this.doAck(exports.ACK);\n    }\n    nak(millis) {\n        let payload = NAK;\n        if (millis) {\n            payload = (0, codec_1.StringCodec)().encode(`-NAK ${JSON.stringify({ delay: (0, jsutil_1.nanos)(millis) })}`);\n        }\n        this.doAck(payload);\n    }\n    working() {\n        this.doAck(WPI);\n    }\n    next(subj, opts = { batch: 1 }) {\n        const args = {};\n        args.batch = opts.batch || 1;\n        args.no_wait = opts.no_wait || false;\n        if (opts.expires && opts.expires > 0) {\n            args.expires = (0, jsutil_1.nanos)(opts.expires);\n        }\n        const data = (0, codec_1.JSONCodec)().encode(args);\n        const payload = databuffer_1.DataBuffer.concat(NXT, SPACE, data);\n        const reqOpts = subj ? { reply: subj } : undefined;\n        this.msg.respond(payload, reqOpts);\n    }\n    term(reason = \"\") {\n        let term = TERM;\n        if ((reason === null || reason === void 0 ? void 0 : reason.length) > 0) {\n            term = (0, codec_1.StringCodec)().encode(`+TERM ${reason}`);\n        }\n        this.doAck(term);\n    }\n    json() {\n        return this.msg.json();\n    }\n    string() {\n        return this.msg.string();\n    }\n}\nexports.JsMsgImpl = JsMsgImpl;\n//# sourceMappingURL=jsmsg.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/jetstream/jsmsg.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/jetstream/jsmstream_api.js":
/*!**********************************************************!*\
  !*** ./node_modules/nats/lib/jetstream/jsmstream_api.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright 2021-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamsImpl = exports.StoredMsgImpl = exports.StreamAPIImpl = exports.StreamImpl = exports.ConsumersImpl = exports.convertStreamSourceDomain = void 0;\nconst types_1 = __webpack_require__(/*! ../nats-base-client/types */ \"(rsc)/./node_modules/nats/lib/nats-base-client/types.js\");\nconst jsbaseclient_api_1 = __webpack_require__(/*! ./jsbaseclient_api */ \"(rsc)/./node_modules/nats/lib/jetstream/jsbaseclient_api.js\");\nconst jslister_1 = __webpack_require__(/*! ./jslister */ \"(rsc)/./node_modules/nats/lib/jetstream/jslister.js\");\nconst jsutil_1 = __webpack_require__(/*! ./jsutil */ \"(rsc)/./node_modules/nats/lib/jetstream/jsutil.js\");\nconst headers_1 = __webpack_require__(/*! ../nats-base-client/headers */ \"(rsc)/./node_modules/nats/lib/nats-base-client/headers.js\");\nconst kv_1 = __webpack_require__(/*! ./kv */ \"(rsc)/./node_modules/nats/lib/jetstream/kv.js\");\nconst objectstore_1 = __webpack_require__(/*! ./objectstore */ \"(rsc)/./node_modules/nats/lib/jetstream/objectstore.js\");\nconst codec_1 = __webpack_require__(/*! ../nats-base-client/codec */ \"(rsc)/./node_modules/nats/lib/nats-base-client/codec.js\");\nconst encoders_1 = __webpack_require__(/*! ../nats-base-client/encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nconst semver_1 = __webpack_require__(/*! ../nats-base-client/semver */ \"(rsc)/./node_modules/nats/lib/nats-base-client/semver.js\");\nconst types_2 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/nats/lib/jetstream/types.js\");\nconst consumer_1 = __webpack_require__(/*! ./consumer */ \"(rsc)/./node_modules/nats/lib/jetstream/consumer.js\");\nconst jsmconsumer_api_1 = __webpack_require__(/*! ./jsmconsumer_api */ \"(rsc)/./node_modules/nats/lib/jetstream/jsmconsumer_api.js\");\nfunction convertStreamSourceDomain(s) {\n    if (s === undefined) {\n        return undefined;\n    }\n    const { domain } = s;\n    if (domain === undefined) {\n        return s;\n    }\n    const copy = Object.assign({}, s);\n    delete copy.domain;\n    if (domain === \"\") {\n        return copy;\n    }\n    if (copy.external) {\n        throw new Error(\"domain and external are both set\");\n    }\n    copy.external = { api: `$JS.${domain}.API` };\n    return copy;\n}\nexports.convertStreamSourceDomain = convertStreamSourceDomain;\nclass ConsumersImpl {\n    constructor(api) {\n        this.api = api;\n        this.notified = false;\n    }\n    checkVersion() {\n        const fv = this.api.nc.features.get(semver_1.Feature.JS_SIMPLIFICATION);\n        if (!fv.ok) {\n            return Promise.reject(new Error(`consumers framework is only supported on servers ${fv.min} or better`));\n        }\n        return Promise.resolve();\n    }\n    get(stream, name = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof name === \"object\") {\n                return this.ordered(stream, name);\n            }\n            // check we have support for pending msgs and header notifications\n            yield this.checkVersion();\n            return this.api.info(stream, name)\n                .then((ci) => {\n                if (ci.config.deliver_subject !== undefined) {\n                    return Promise.reject(new Error(\"push consumer not supported\"));\n                }\n                return new consumer_1.PullConsumerImpl(this.api, ci);\n            })\n                .catch((err) => {\n                return Promise.reject(err);\n            });\n        });\n    }\n    ordered(stream, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.checkVersion();\n            const impl = this.api;\n            const sapi = new StreamAPIImpl(impl.nc, impl.opts);\n            return sapi.info(stream)\n                .then((_si) => {\n                return Promise.resolve(new consumer_1.OrderedPullConsumerImpl(this.api, stream, opts));\n            })\n                .catch((err) => {\n                return Promise.reject(err);\n            });\n        });\n    }\n}\nexports.ConsumersImpl = ConsumersImpl;\nclass StreamImpl {\n    constructor(api, info) {\n        this.api = api;\n        this._info = info;\n    }\n    get name() {\n        return this._info.config.name;\n    }\n    alternates() {\n        return this.info()\n            .then((si) => {\n            return si.alternates ? si.alternates : [];\n        });\n    }\n    best() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.info();\n            if (this._info.alternates) {\n                const asi = yield this.api.info(this._info.alternates[0].name);\n                return new StreamImpl(this.api, asi);\n            }\n            else {\n                return this;\n            }\n        });\n    }\n    info(cached = false, opts) {\n        if (cached) {\n            return Promise.resolve(this._info);\n        }\n        return this.api.info(this.name, opts)\n            .then((si) => {\n            this._info = si;\n            return this._info;\n        });\n    }\n    getConsumer(name) {\n        return new ConsumersImpl(new jsmconsumer_api_1.ConsumerAPIImpl(this.api.nc, this.api.opts))\n            .get(this.name, name);\n    }\n    getMessage(query) {\n        return this.api.getMessage(this.name, query);\n    }\n    deleteMessage(seq, erase) {\n        return this.api.deleteMessage(this.name, seq, erase);\n    }\n}\nexports.StreamImpl = StreamImpl;\nclass StreamAPIImpl extends jsbaseclient_api_1.BaseApiClient {\n    constructor(nc, opts) {\n        super(nc, opts);\n    }\n    checkStreamConfigVersions(cfg) {\n        const nci = this.nc;\n        if (cfg.metadata) {\n            const { min, ok } = nci.features.get(semver_1.Feature.JS_STREAM_CONSUMER_METADATA);\n            if (!ok) {\n                throw new Error(`stream 'metadata' requires server ${min}`);\n            }\n        }\n        if (cfg.first_seq) {\n            const { min, ok } = nci.features.get(semver_1.Feature.JS_STREAM_FIRST_SEQ);\n            if (!ok) {\n                throw new Error(`stream 'first_seq' requires server ${min}`);\n            }\n        }\n        if (cfg.subject_transform) {\n            const { min, ok } = nci.features.get(semver_1.Feature.JS_STREAM_SUBJECT_TRANSFORM);\n            if (!ok) {\n                throw new Error(`stream 'subject_transform' requires server ${min}`);\n            }\n        }\n        if (cfg.compression) {\n            const { min, ok } = nci.features.get(semver_1.Feature.JS_STREAM_COMPRESSION);\n            if (!ok) {\n                throw new Error(`stream 'compression' requires server ${min}`);\n            }\n        }\n        if (cfg.consumer_limits) {\n            const { min, ok } = nci.features.get(semver_1.Feature.JS_DEFAULT_CONSUMER_LIMITS);\n            if (!ok) {\n                throw new Error(`stream 'consumer_limits' requires server ${min}`);\n            }\n        }\n        function validateStreamSource(context, src) {\n            var _a;\n            const count = ((_a = src.subject_transforms) === null || _a === void 0 ? void 0 : _a.length) || 0;\n            if (count > 0) {\n                const { min, ok } = nci.features.get(semver_1.Feature.JS_STREAM_SOURCE_SUBJECT_TRANSFORM);\n                if (!ok) {\n                    throw new Error(`${context} 'subject_transforms' requires server ${min}`);\n                }\n            }\n        }\n        if (cfg.sources) {\n            cfg.sources.forEach((src) => {\n                validateStreamSource(\"stream sources\", src);\n            });\n        }\n        if (cfg.mirror) {\n            validateStreamSource(\"stream mirror\", cfg.mirror);\n        }\n    }\n    add(cfg = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            this.checkStreamConfigVersions(cfg);\n            (0, jsutil_1.validateStreamName)(cfg.name);\n            cfg.mirror = convertStreamSourceDomain(cfg.mirror);\n            //@ts-ignore: the sources are either set or not - so no item should be undefined in the list\n            cfg.sources = (_a = cfg.sources) === null || _a === void 0 ? void 0 : _a.map(convertStreamSourceDomain);\n            const r = yield this._request(`${this.prefix}.STREAM.CREATE.${cfg.name}`, cfg);\n            const si = r;\n            this._fixInfo(si);\n            return si;\n        });\n    }\n    delete(stream) {\n        return __awaiter(this, void 0, void 0, function* () {\n            (0, jsutil_1.validateStreamName)(stream);\n            const r = yield this._request(`${this.prefix}.STREAM.DELETE.${stream}`);\n            const cr = r;\n            return cr.success;\n        });\n    }\n    update(name, cfg = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof name === \"object\") {\n                const sc = name;\n                name = sc.name;\n                cfg = sc;\n                console.trace(`\\u001B[33m >> streams.update(config: StreamConfig) api changed to streams.update(name: string, config: StreamUpdateConfig) - this shim will be removed - update your code.  \\u001B[0m`);\n            }\n            this.checkStreamConfigVersions(cfg);\n            (0, jsutil_1.validateStreamName)(name);\n            const old = yield this.info(name);\n            const update = Object.assign(old.config, cfg);\n            update.mirror = convertStreamSourceDomain(update.mirror);\n            //@ts-ignore: the sources are either set or not - so no item should be undefined in the list\n            update.sources = (_a = update.sources) === null || _a === void 0 ? void 0 : _a.map(convertStreamSourceDomain);\n            const r = yield this._request(`${this.prefix}.STREAM.UPDATE.${name}`, update);\n            const si = r;\n            this._fixInfo(si);\n            return si;\n        });\n    }\n    info(name, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            (0, jsutil_1.validateStreamName)(name);\n            const subj = `${this.prefix}.STREAM.INFO.${name}`;\n            const r = yield this._request(subj, data);\n            let si = r;\n            let { total, limit } = si;\n            // check how many subjects we got in the first request\n            let have = si.state.subjects\n                ? Object.getOwnPropertyNames(si.state.subjects).length\n                : 1;\n            // if the response is paged, we have a large list of subjects\n            // handle the paging and return a StreamInfo with all of it\n            if (total && total > have) {\n                const infos = [si];\n                const paged = data || {};\n                let i = 0;\n                // total could change, so it is possible to have collected\n                // more that the total\n                while (total > have) {\n                    i++;\n                    paged.offset = limit * i;\n                    const r = yield this._request(subj, paged);\n                    // update it in case it changed\n                    total = r.total;\n                    infos.push(r);\n                    const count = Object.getOwnPropertyNames(r.state.subjects).length;\n                    have += count;\n                    // if request returns less than limit it is done\n                    if (count < limit) {\n                        // done\n                        break;\n                    }\n                }\n                // collect all the subjects\n                let subjects = {};\n                for (let i = 0; i < infos.length; i++) {\n                    si = infos[i];\n                    if (si.state.subjects) {\n                        subjects = Object.assign(subjects, si.state.subjects);\n                    }\n                }\n                // don't give the impression we paged\n                si.offset = 0;\n                si.total = 0;\n                si.limit = 0;\n                si.state.subjects = subjects;\n            }\n            this._fixInfo(si);\n            return si;\n        });\n    }\n    list(subject = \"\") {\n        const payload = (subject === null || subject === void 0 ? void 0 : subject.length) ? { subject } : {};\n        const listerFilter = (v) => {\n            const slr = v;\n            slr.streams.forEach((si) => {\n                this._fixInfo(si);\n            });\n            return slr.streams;\n        };\n        const subj = `${this.prefix}.STREAM.LIST`;\n        return new jslister_1.ListerImpl(subj, listerFilter, this, payload);\n    }\n    // FIXME: init of sealed, deny_delete, deny_purge shouldn't be necessary\n    //  https://github.com/nats-io/nats-server/issues/2633\n    _fixInfo(si) {\n        si.config.sealed = si.config.sealed || false;\n        si.config.deny_delete = si.config.deny_delete || false;\n        si.config.deny_purge = si.config.deny_purge || false;\n        si.config.allow_rollup_hdrs = si.config.allow_rollup_hdrs || false;\n    }\n    purge(name, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (opts) {\n                const { keep, seq } = opts;\n                if (typeof keep === \"number\" && typeof seq === \"number\") {\n                    throw new Error(\"can specify one of keep or seq\");\n                }\n            }\n            (0, jsutil_1.validateStreamName)(name);\n            const v = yield this._request(`${this.prefix}.STREAM.PURGE.${name}`, opts);\n            return v;\n        });\n    }\n    deleteMessage(stream, seq, erase = true) {\n        return __awaiter(this, void 0, void 0, function* () {\n            (0, jsutil_1.validateStreamName)(stream);\n            const dr = { seq };\n            if (!erase) {\n                dr.no_erase = true;\n            }\n            const r = yield this._request(`${this.prefix}.STREAM.MSG.DELETE.${stream}`, dr);\n            const cr = r;\n            return cr.success;\n        });\n    }\n    getMessage(stream, query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            (0, jsutil_1.validateStreamName)(stream);\n            const r = yield this._request(`${this.prefix}.STREAM.MSG.GET.${stream}`, query);\n            const sm = r;\n            return new StoredMsgImpl(sm);\n        });\n    }\n    find(subject) {\n        return this.findStream(subject);\n    }\n    listKvs() {\n        const filter = (v) => {\n            var _a, _b;\n            const slr = v;\n            const kvStreams = slr.streams.filter((v) => {\n                return v.config.name.startsWith(types_2.kvPrefix);\n            });\n            kvStreams.forEach((si) => {\n                this._fixInfo(si);\n            });\n            let cluster = \"\";\n            if (kvStreams.length) {\n                cluster = (_b = (_a = this.nc.info) === null || _a === void 0 ? void 0 : _a.cluster) !== null && _b !== void 0 ? _b : \"\";\n            }\n            const status = kvStreams.map((si) => {\n                return new kv_1.KvStatusImpl(si, cluster);\n            });\n            return status;\n        };\n        const subj = `${this.prefix}.STREAM.LIST`;\n        return new jslister_1.ListerImpl(subj, filter, this);\n    }\n    listObjectStores() {\n        const filter = (v) => {\n            const slr = v;\n            const objStreams = slr.streams.filter((v) => {\n                return v.config.name.startsWith(objectstore_1.osPrefix);\n            });\n            objStreams.forEach((si) => {\n                this._fixInfo(si);\n            });\n            const status = objStreams.map((si) => {\n                return new objectstore_1.ObjectStoreStatusImpl(si);\n            });\n            return status;\n        };\n        const subj = `${this.prefix}.STREAM.LIST`;\n        return new jslister_1.ListerImpl(subj, filter, this);\n    }\n    names(subject = \"\") {\n        const payload = (subject === null || subject === void 0 ? void 0 : subject.length) ? { subject } : {};\n        const listerFilter = (v) => {\n            const sr = v;\n            return sr.streams;\n        };\n        const subj = `${this.prefix}.STREAM.NAMES`;\n        return new jslister_1.ListerImpl(subj, listerFilter, this, payload);\n    }\n    get(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const si = yield this.info(name);\n            return Promise.resolve(new StreamImpl(this, si));\n        });\n    }\n}\nexports.StreamAPIImpl = StreamAPIImpl;\nclass StoredMsgImpl {\n    constructor(smr) {\n        this.smr = smr;\n    }\n    get subject() {\n        return this.smr.message.subject;\n    }\n    get seq() {\n        return this.smr.message.seq;\n    }\n    get timestamp() {\n        return this.smr.message.time;\n    }\n    get time() {\n        return new Date(Date.parse(this.timestamp));\n    }\n    get data() {\n        return this.smr.message.data ? this._parse(this.smr.message.data) : types_1.Empty;\n    }\n    get header() {\n        if (!this._header) {\n            if (this.smr.message.hdrs) {\n                const hd = this._parse(this.smr.message.hdrs);\n                this._header = headers_1.MsgHdrsImpl.decode(hd);\n            }\n            else {\n                this._header = (0, headers_1.headers)();\n            }\n        }\n        return this._header;\n    }\n    _parse(s) {\n        const bs = atob(s);\n        const len = bs.length;\n        const bytes = new Uint8Array(len);\n        for (let i = 0; i < len; i++) {\n            bytes[i] = bs.charCodeAt(i);\n        }\n        return bytes;\n    }\n    json(reviver) {\n        return (0, codec_1.JSONCodec)(reviver).decode(this.data);\n    }\n    string() {\n        return encoders_1.TD.decode(this.data);\n    }\n}\nexports.StoredMsgImpl = StoredMsgImpl;\nclass StreamsImpl {\n    constructor(api) {\n        this.api = api;\n    }\n    get(stream) {\n        return this.api.info(stream)\n            .then((si) => {\n            return new StreamImpl(this.api, si);\n        });\n    }\n}\nexports.StreamsImpl = StreamsImpl;\n//# sourceMappingURL=jsmstream_api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/jetstream/jsmstream_api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/jetstream/jsutil.js":
/*!***************************************************!*\
  !*** ./node_modules/nats/lib/jetstream/jsutil.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.checkJsErrorCode = exports.isTerminal409 = exports.setMaxWaitingToFail = exports.Js409Errors = exports.checkJsError = exports.newJsErrorMsg = exports.isHeartbeatMsg = exports.isFlowControlMsg = exports.millis = exports.nanos = exports.validName = exports.validateName = exports.minValidation = exports.validateStreamName = exports.validateDurableName = void 0;\n/*\n * Copyright 2021-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst encoders_1 = __webpack_require__(/*! ../nats-base-client/encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nconst headers_1 = __webpack_require__(/*! ../nats-base-client/headers */ \"(rsc)/./node_modules/nats/lib/nats-base-client/headers.js\");\nconst msg_1 = __webpack_require__(/*! ../nats-base-client/msg */ \"(rsc)/./node_modules/nats/lib/nats-base-client/msg.js\");\nconst core_1 = __webpack_require__(/*! ../nats-base-client/core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nfunction validateDurableName(name) {\n    return minValidation(\"durable\", name);\n}\nexports.validateDurableName = validateDurableName;\nfunction validateStreamName(name) {\n    return minValidation(\"stream\", name);\n}\nexports.validateStreamName = validateStreamName;\nfunction minValidation(context, name = \"\") {\n    // minimum validation on streams/consumers matches nats cli\n    if (name === \"\") {\n        throw Error(`${context} name required`);\n    }\n    const bad = [\".\", \"*\", \">\", \"/\", \"\\\\\", \" \", \"\\t\", \"\\n\", \"\\r\"];\n    bad.forEach((v) => {\n        if (name.indexOf(v) !== -1) {\n            // make the error have a meaningful character\n            switch (v) {\n                case \"\\n\":\n                    v = \"\\\\n\";\n                    break;\n                case \"\\r\":\n                    v = \"\\\\r\";\n                    break;\n                case \"\\t\":\n                    v = \"\\\\t\";\n                    break;\n                default:\n                // nothing\n            }\n            throw Error(`invalid ${context} name - ${context} name cannot contain '${v}'`);\n        }\n    });\n    return \"\";\n}\nexports.minValidation = minValidation;\nfunction validateName(context, name = \"\") {\n    if (name === \"\") {\n        throw Error(`${context} name required`);\n    }\n    const m = validName(name);\n    if (m.length) {\n        throw new Error(`invalid ${context} name - ${context} name ${m}`);\n    }\n}\nexports.validateName = validateName;\nfunction validName(name = \"\") {\n    if (name === \"\") {\n        throw Error(`name required`);\n    }\n    const RE = /^[-\\w]+$/g;\n    const m = name.match(RE);\n    if (m === null) {\n        for (const c of name.split(\"\")) {\n            const mm = c.match(RE);\n            if (mm === null) {\n                return `cannot contain '${c}'`;\n            }\n        }\n    }\n    return \"\";\n}\nexports.validName = validName;\n/**\n * Converts the specified millis into Nanos\n * @param millis\n */\nfunction nanos(millis) {\n    return millis * 1000000;\n}\nexports.nanos = nanos;\n/**\n * Convert the specified Nanos into millis\n * @param ns\n */\nfunction millis(ns) {\n    return Math.floor(ns / 1000000);\n}\nexports.millis = millis;\n/**\n * Returns true if the message is a flow control message\n * @param msg\n */\nfunction isFlowControlMsg(msg) {\n    if (msg.data.length > 0) {\n        return false;\n    }\n    const h = msg.headers;\n    if (!h) {\n        return false;\n    }\n    return h.code >= 100 && h.code < 200;\n}\nexports.isFlowControlMsg = isFlowControlMsg;\n/**\n * Returns true if the message is a heart beat message\n * @param msg\n */\nfunction isHeartbeatMsg(msg) {\n    var _a;\n    return isFlowControlMsg(msg) && ((_a = msg.headers) === null || _a === void 0 ? void 0 : _a.description) === \"Idle Heartbeat\";\n}\nexports.isHeartbeatMsg = isHeartbeatMsg;\nfunction newJsErrorMsg(code, description, subject) {\n    const h = (0, headers_1.headers)(code, description);\n    const arg = { hdr: 1, sid: 0, size: 0 };\n    const msg = new msg_1.MsgImpl(arg, encoders_1.Empty, {});\n    msg._headers = h;\n    msg._subject = subject;\n    return msg;\n}\nexports.newJsErrorMsg = newJsErrorMsg;\nfunction checkJsError(msg) {\n    // JS error only if no payload - otherwise assume it is application data\n    if (msg.data.length !== 0) {\n        return null;\n    }\n    const h = msg.headers;\n    if (!h) {\n        return null;\n    }\n    return checkJsErrorCode(h.code, h.description);\n}\nexports.checkJsError = checkJsError;\nvar Js409Errors;\n(function (Js409Errors) {\n    Js409Errors[\"MaxBatchExceeded\"] = \"exceeded maxrequestbatch of\";\n    Js409Errors[\"MaxExpiresExceeded\"] = \"exceeded maxrequestexpires of\";\n    Js409Errors[\"MaxBytesExceeded\"] = \"exceeded maxrequestmaxbytes of\";\n    Js409Errors[\"MaxMessageSizeExceeded\"] = \"message size exceeds maxbytes\";\n    Js409Errors[\"PushConsumer\"] = \"consumer is push based\";\n    Js409Errors[\"MaxWaitingExceeded\"] = \"exceeded maxwaiting\";\n    Js409Errors[\"IdleHeartbeatMissed\"] = \"idle heartbeats missed\";\n    Js409Errors[\"ConsumerDeleted\"] = \"consumer deleted\";\n    // FIXME: consumer deleted - instead of no responder (terminal error)\n    //   leadership changed -\n})(Js409Errors || (exports.Js409Errors = Js409Errors = {}));\nlet MAX_WAITING_FAIL = false;\nfunction setMaxWaitingToFail(tf) {\n    MAX_WAITING_FAIL = tf;\n}\nexports.setMaxWaitingToFail = setMaxWaitingToFail;\nfunction isTerminal409(err) {\n    if (err.code !== core_1.ErrorCode.JetStream409) {\n        return false;\n    }\n    const fatal = [\n        Js409Errors.MaxBatchExceeded,\n        Js409Errors.MaxExpiresExceeded,\n        Js409Errors.MaxBytesExceeded,\n        Js409Errors.MaxMessageSizeExceeded,\n        Js409Errors.PushConsumer,\n        Js409Errors.IdleHeartbeatMissed,\n        Js409Errors.ConsumerDeleted,\n    ];\n    if (MAX_WAITING_FAIL) {\n        fatal.push(Js409Errors.MaxWaitingExceeded);\n    }\n    return fatal.find((s) => {\n        return err.message.indexOf(s) !== -1;\n    }) !== undefined;\n}\nexports.isTerminal409 = isTerminal409;\nfunction checkJsErrorCode(code, description = \"\") {\n    if (code < 300) {\n        return null;\n    }\n    description = description.toLowerCase();\n    switch (code) {\n        case 404:\n            // 404 for jetstream will provide different messages ensure we\n            // keep whatever the server returned\n            return new core_1.NatsError(description, core_1.ErrorCode.JetStream404NoMessages);\n        case 408:\n            return new core_1.NatsError(description, core_1.ErrorCode.JetStream408RequestTimeout);\n        case 409: {\n            // the description can be exceeded max waiting or max ack pending, which are\n            // recoverable, but can also be terminal errors where the request exceeds\n            // some value in the consumer configuration\n            const ec = description.startsWith(Js409Errors.IdleHeartbeatMissed)\n                ? core_1.ErrorCode.JetStreamIdleHeartBeat\n                : core_1.ErrorCode.JetStream409;\n            return new core_1.NatsError(description, ec);\n        }\n        case 503:\n            return core_1.NatsError.errorForCode(core_1.ErrorCode.JetStreamNotEnabled, new Error(description));\n        default:\n            if (description === \"\") {\n                description = core_1.ErrorCode.Unknown;\n            }\n            return new core_1.NatsError(description, `${code}`);\n    }\n}\nexports.checkJsErrorCode = checkJsErrorCode;\n//# sourceMappingURL=jsutil.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/jetstream/jsutil.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/jetstream/kv.js":
/*!***********************************************!*\
  !*** ./node_modules/nats/lib/jetstream/kv.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright 2021-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KvStatusImpl = exports.Bucket = exports.validateBucket = exports.hasWildcards = exports.validateSearchKey = exports.validateKey = exports.kvOperationHdr = exports.defaultBucketOpts = exports.NoopKvCodecs = exports.Base64KeyCodec = void 0;\nconst core_1 = __webpack_require__(/*! ../nats-base-client/core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nconst jsutil_1 = __webpack_require__(/*! ./jsutil */ \"(rsc)/./node_modules/nats/lib/jetstream/jsutil.js\");\nconst queued_iterator_1 = __webpack_require__(/*! ../nats-base-client/queued_iterator */ \"(rsc)/./node_modules/nats/lib/nats-base-client/queued_iterator.js\");\nconst headers_1 = __webpack_require__(/*! ../nats-base-client/headers */ \"(rsc)/./node_modules/nats/lib/nats-base-client/headers.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/nats/lib/jetstream/types.js\");\nconst semver_1 = __webpack_require__(/*! ../nats-base-client/semver */ \"(rsc)/./node_modules/nats/lib/nats-base-client/semver.js\");\nconst util_1 = __webpack_require__(/*! ../nats-base-client/util */ \"(rsc)/./node_modules/nats/lib/nats-base-client/util.js\");\nconst encoders_1 = __webpack_require__(/*! ../nats-base-client/encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nconst jsapi_types_1 = __webpack_require__(/*! ./jsapi_types */ \"(rsc)/./node_modules/nats/lib/jetstream/jsapi_types.js\");\nconst jsclient_1 = __webpack_require__(/*! ./jsclient */ \"(rsc)/./node_modules/nats/lib/jetstream/jsclient.js\");\nfunction Base64KeyCodec() {\n    return {\n        encode(key) {\n            return btoa(key);\n        },\n        decode(bkey) {\n            return atob(bkey);\n        },\n    };\n}\nexports.Base64KeyCodec = Base64KeyCodec;\nfunction NoopKvCodecs() {\n    return {\n        key: {\n            encode(k) {\n                return k;\n            },\n            decode(k) {\n                return k;\n            },\n        },\n        value: {\n            encode(v) {\n                return v;\n            },\n            decode(v) {\n                return v;\n            },\n        },\n    };\n}\nexports.NoopKvCodecs = NoopKvCodecs;\nfunction defaultBucketOpts() {\n    return {\n        replicas: 1,\n        history: 1,\n        timeout: 2000,\n        maxBucketSize: -1,\n        maxValueSize: -1,\n        codec: NoopKvCodecs(),\n        storage: jsapi_types_1.StorageType.File,\n    };\n}\nexports.defaultBucketOpts = defaultBucketOpts;\nexports.kvOperationHdr = \"KV-Operation\";\nconst kvSubjectPrefix = \"$KV\";\nconst validKeyRe = /^[-/=.\\w]+$/;\nconst validSearchKey = /^[-/=.>*\\w]+$/;\nconst validBucketRe = /^[-\\w]+$/;\n// this exported for tests\nfunction validateKey(k) {\n    if (k.startsWith(\".\") || k.endsWith(\".\") || !validKeyRe.test(k)) {\n        throw new Error(`invalid key: ${k}`);\n    }\n}\nexports.validateKey = validateKey;\nfunction validateSearchKey(k) {\n    if (k.startsWith(\".\") || k.endsWith(\".\") || !validSearchKey.test(k)) {\n        throw new Error(`invalid key: ${k}`);\n    }\n}\nexports.validateSearchKey = validateSearchKey;\nfunction hasWildcards(k) {\n    if (k.startsWith(\".\") || k.endsWith(\".\")) {\n        throw new Error(`invalid key: ${k}`);\n    }\n    const chunks = k.split(\".\");\n    let hasWildcards = false;\n    for (let i = 0; i < chunks.length; i++) {\n        switch (chunks[i]) {\n            case \"*\":\n                hasWildcards = true;\n                break;\n            case \">\":\n                if (i !== chunks.length - 1) {\n                    throw new Error(`invalid key: ${k}`);\n                }\n                hasWildcards = true;\n                break;\n            default:\n            // continue\n        }\n    }\n    return hasWildcards;\n}\nexports.hasWildcards = hasWildcards;\n// this exported for tests\nfunction validateBucket(name) {\n    if (!validBucketRe.test(name)) {\n        throw new Error(`invalid bucket name: ${name}`);\n    }\n}\nexports.validateBucket = validateBucket;\nclass Bucket {\n    constructor(bucket, js, jsm) {\n        this.validateKey = validateKey;\n        this.validateSearchKey = validateSearchKey;\n        this.hasWildcards = hasWildcards;\n        validateBucket(bucket);\n        this.js = js;\n        this.jsm = jsm;\n        this.bucket = bucket;\n        this.prefix = kvSubjectPrefix;\n        this.editPrefix = \"\";\n        this.useJsPrefix = false;\n        this._prefixLen = 0;\n    }\n    static create(js, name, opts = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            validateBucket(name);\n            const jsm = yield js.jetstreamManager();\n            const bucket = new Bucket(name, js, jsm);\n            yield bucket.init(opts);\n            return bucket;\n        });\n    }\n    static bind(js, name, opts = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const jsm = yield js.jetstreamManager();\n            const info = yield jsm.streams.info(`${types_1.kvPrefix}${name}`);\n            validateBucket(info.config.name);\n            const bucket = new Bucket(name, js, jsm);\n            Object.assign(bucket, info);\n            bucket.codec = opts.codec || NoopKvCodecs();\n            bucket.direct = (_a = info.config.allow_direct) !== null && _a !== void 0 ? _a : false;\n            bucket.initializePrefixes(info);\n            return bucket;\n        });\n    }\n    init(opts = {}) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const bo = Object.assign(defaultBucketOpts(), opts);\n            this.codec = bo.codec;\n            const sc = {};\n            this.stream = sc.name = (_a = opts.streamName) !== null && _a !== void 0 ? _a : this.bucketName();\n            sc.retention = jsapi_types_1.RetentionPolicy.Limits;\n            sc.max_msgs_per_subject = bo.history;\n            if (bo.maxBucketSize) {\n                bo.max_bytes = bo.maxBucketSize;\n            }\n            if (bo.max_bytes) {\n                sc.max_bytes = bo.max_bytes;\n            }\n            sc.max_msg_size = bo.maxValueSize;\n            sc.storage = bo.storage;\n            const location = (_b = opts.placementCluster) !== null && _b !== void 0 ? _b : \"\";\n            if (location) {\n                opts.placement = {};\n                opts.placement.cluster = location;\n                opts.placement.tags = [];\n            }\n            if (opts.placement) {\n                sc.placement = opts.placement;\n            }\n            if (opts.republish) {\n                sc.republish = opts.republish;\n            }\n            if (opts.description) {\n                sc.description = opts.description;\n            }\n            if (opts.mirror) {\n                const mirror = Object.assign({}, opts.mirror);\n                if (!mirror.name.startsWith(types_1.kvPrefix)) {\n                    mirror.name = `${types_1.kvPrefix}${mirror.name}`;\n                }\n                sc.mirror = mirror;\n                sc.mirror_direct = true;\n            }\n            else if (opts.sources) {\n                const sources = opts.sources.map((s) => {\n                    const c = Object.assign({}, s);\n                    if (!c.name.startsWith(types_1.kvPrefix)) {\n                        c.name = `${types_1.kvPrefix}${c.name}`;\n                    }\n                });\n                sc.sources = sources;\n            }\n            else {\n                sc.subjects = [this.subjectForBucket()];\n            }\n            if (opts.metadata) {\n                sc.metadata = opts.metadata;\n            }\n            if (typeof opts.compression === \"boolean\") {\n                sc.compression = opts.compression\n                    ? jsapi_types_1.StoreCompression.S2\n                    : jsapi_types_1.StoreCompression.None;\n            }\n            const nci = this.js.nc;\n            const have = nci.getServerVersion();\n            const discardNew = have ? (0, semver_1.compare)(have, (0, semver_1.parseSemVer)(\"2.7.2\")) >= 0 : false;\n            sc.discard = discardNew ? jsapi_types_1.DiscardPolicy.New : jsapi_types_1.DiscardPolicy.Old;\n            const { ok: direct, min } = nci.features.get(semver_1.Feature.JS_ALLOW_DIRECT);\n            if (!direct && opts.allow_direct === true) {\n                const v = have\n                    ? `${have.major}.${have.minor}.${have.micro}`\n                    : \"unknown\";\n                return Promise.reject(new Error(`allow_direct is not available on server version ${v} - requires ${min}`));\n            }\n            // if we are given allow_direct we use it, otherwise what\n            // the server supports - in creation this will always rule,\n            // but allows the client to opt-in even if it is already\n            // available on the stream\n            opts.allow_direct = typeof opts.allow_direct === \"boolean\"\n                ? opts.allow_direct\n                : direct;\n            sc.allow_direct = opts.allow_direct;\n            this.direct = sc.allow_direct;\n            sc.num_replicas = bo.replicas;\n            if (bo.ttl) {\n                sc.max_age = (0, jsutil_1.nanos)(bo.ttl);\n            }\n            sc.allow_rollup_hdrs = true;\n            let info;\n            try {\n                info = yield this.jsm.streams.info(sc.name);\n                if (!info.config.allow_direct && this.direct === true) {\n                    this.direct = false;\n                }\n            }\n            catch (err) {\n                if (err.message === \"stream not found\") {\n                    info = yield this.jsm.streams.add(sc);\n                }\n                else {\n                    throw err;\n                }\n            }\n            this.initializePrefixes(info);\n        });\n    }\n    initializePrefixes(info) {\n        this._prefixLen = 0;\n        this.prefix = `$KV.${this.bucket}`;\n        this.useJsPrefix = this.js.apiPrefix !== \"$JS.API\";\n        const { mirror } = info.config;\n        if (mirror) {\n            let n = mirror.name;\n            if (n.startsWith(types_1.kvPrefix)) {\n                n = n.substring(types_1.kvPrefix.length);\n            }\n            if (mirror.external && mirror.external.api !== \"\") {\n                const mb = mirror.name.substring(types_1.kvPrefix.length);\n                this.useJsPrefix = false;\n                this.prefix = `$KV.${mb}`;\n                this.editPrefix = `${mirror.external.api}.$KV.${n}`;\n            }\n            else {\n                this.editPrefix = this.prefix;\n            }\n        }\n    }\n    bucketName() {\n        var _a;\n        return (_a = this.stream) !== null && _a !== void 0 ? _a : `${types_1.kvPrefix}${this.bucket}`;\n    }\n    subjectForBucket() {\n        return `${this.prefix}.${this.bucket}.>`;\n    }\n    subjectForKey(k, edit = false) {\n        const builder = [];\n        if (edit) {\n            if (this.useJsPrefix) {\n                builder.push(this.js.apiPrefix);\n            }\n            if (this.editPrefix !== \"\") {\n                builder.push(this.editPrefix);\n            }\n            else {\n                builder.push(this.prefix);\n            }\n        }\n        else {\n            if (this.prefix) {\n                builder.push(this.prefix);\n            }\n        }\n        builder.push(k);\n        return builder.join(\".\");\n    }\n    fullKeyName(k) {\n        if (this.prefix !== \"\") {\n            return `${this.prefix}.${k}`;\n        }\n        return `${kvSubjectPrefix}.${this.bucket}.${k}`;\n    }\n    get prefixLen() {\n        if (this._prefixLen === 0) {\n            this._prefixLen = this.prefix.length + 1;\n        }\n        return this._prefixLen;\n    }\n    encodeKey(key) {\n        const chunks = [];\n        for (const t of key.split(\".\")) {\n            switch (t) {\n                case \">\":\n                case \"*\":\n                    chunks.push(t);\n                    break;\n                default:\n                    chunks.push(this.codec.key.encode(t));\n                    break;\n            }\n        }\n        return chunks.join(\".\");\n    }\n    decodeKey(ekey) {\n        const chunks = [];\n        for (const t of ekey.split(\".\")) {\n            switch (t) {\n                case \">\":\n                case \"*\":\n                    chunks.push(t);\n                    break;\n                default:\n                    chunks.push(this.codec.key.decode(t));\n                    break;\n            }\n        }\n        return chunks.join(\".\");\n    }\n    close() {\n        return Promise.resolve();\n    }\n    dataLen(data, h) {\n        const slen = h ? h.get(types_1.JsHeaders.MessageSizeHdr) || \"\" : \"\";\n        if (slen !== \"\") {\n            return parseInt(slen, 10);\n        }\n        return data.length;\n    }\n    smToEntry(sm) {\n        return new KvStoredEntryImpl(this.bucket, this.prefixLen, sm);\n    }\n    jmToEntry(jm) {\n        const key = this.decodeKey(jm.subject.substring(this.prefixLen));\n        return new KvJsMsgEntryImpl(this.bucket, key, jm);\n    }\n    create(k, data) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            let firstErr;\n            try {\n                const n = yield this.put(k, data, { previousSeq: 0 });\n                return Promise.resolve(n);\n            }\n            catch (err) {\n                firstErr = err;\n                if (((_a = err === null || err === void 0 ? void 0 : err.api_error) === null || _a === void 0 ? void 0 : _a.err_code) !== 10071) {\n                    return Promise.reject(err);\n                }\n            }\n            let rev = 0;\n            try {\n                const e = yield this.get(k);\n                if ((e === null || e === void 0 ? void 0 : e.operation) === \"DEL\" || (e === null || e === void 0 ? void 0 : e.operation) === \"PURGE\") {\n                    rev = e !== null ? e.revision : 0;\n                    return this.update(k, data, rev);\n                }\n                else {\n                    return Promise.reject(firstErr);\n                }\n            }\n            catch (err) {\n                return Promise.reject(err);\n            }\n        });\n    }\n    update(k, data, version) {\n        if (version <= 0) {\n            throw new Error(\"version must be greater than 0\");\n        }\n        return this.put(k, data, { previousSeq: version });\n    }\n    put(k, data, opts = {}) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const ek = this.encodeKey(k);\n            this.validateKey(ek);\n            const o = {};\n            if (opts.previousSeq !== undefined) {\n                const h = (0, headers_1.headers)();\n                o.headers = h;\n                h.set(jsclient_1.PubHeaders.ExpectedLastSubjectSequenceHdr, `${opts.previousSeq}`);\n            }\n            try {\n                const pa = yield this.js.publish(this.subjectForKey(ek, true), data, o);\n                return pa.seq;\n            }\n            catch (err) {\n                const ne = err;\n                if (ne.isJetStreamError()) {\n                    ne.message = (_a = ne.api_error) === null || _a === void 0 ? void 0 : _a.description;\n                    ne.code = `${(_b = ne.api_error) === null || _b === void 0 ? void 0 : _b.code}`;\n                    return Promise.reject(ne);\n                }\n                return Promise.reject(err);\n            }\n        });\n    }\n    get(k, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const ek = this.encodeKey(k);\n            this.validateKey(ek);\n            let arg = { last_by_subj: this.subjectForKey(ek) };\n            if (opts && opts.revision > 0) {\n                arg = { seq: opts.revision };\n            }\n            let sm;\n            try {\n                if (this.direct) {\n                    const direct = this.jsm.direct;\n                    sm = yield direct.getMessage(this.bucketName(), arg);\n                }\n                else {\n                    sm = yield this.jsm.streams.getMessage(this.bucketName(), arg);\n                }\n                const ke = this.smToEntry(sm);\n                if (ke.key !== ek) {\n                    return null;\n                }\n                return ke;\n            }\n            catch (err) {\n                if (err.code === core_1.ErrorCode.JetStream404NoMessages) {\n                    return null;\n                }\n                throw err;\n            }\n        });\n    }\n    purge(k) {\n        return this._deleteOrPurge(k, \"PURGE\");\n    }\n    delete(k) {\n        return this._deleteOrPurge(k, \"DEL\");\n    }\n    purgeDeletes(olderMillis = 30 * 60 * 1000) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const done = (0, util_1.deferred)();\n            const buf = [];\n            const i = yield this.watch({\n                key: \">\",\n                initializedFn: () => {\n                    done.resolve();\n                },\n            });\n            (() => __awaiter(this, void 0, void 0, function* () {\n                var _a, e_1, _b, _c;\n                try {\n                    for (var _d = true, i_1 = __asyncValues(i), i_1_1; i_1_1 = yield i_1.next(), _a = i_1_1.done, !_a; _d = true) {\n                        _c = i_1_1.value;\n                        _d = false;\n                        const e = _c;\n                        if (e.operation === \"DEL\" || e.operation === \"PURGE\") {\n                            buf.push(e);\n                        }\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (!_d && !_a && (_b = i_1.return)) yield _b.call(i_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }))().then();\n            yield done;\n            i.stop();\n            const min = Date.now() - olderMillis;\n            const proms = buf.map((e) => {\n                const subj = this.subjectForKey(e.key);\n                if (e.created.getTime() >= min) {\n                    return this.jsm.streams.purge(this.stream, { filter: subj, keep: 1 });\n                }\n                else {\n                    return this.jsm.streams.purge(this.stream, { filter: subj, keep: 0 });\n                }\n            });\n            const purged = yield Promise.all(proms);\n            purged.unshift({ success: true, purged: 0 });\n            return purged.reduce((pv, cv) => {\n                pv.purged += cv.purged;\n                return pv;\n            });\n        });\n    }\n    _deleteOrPurge(k, op) {\n        var _a, e_2, _b, _c;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.hasWildcards(k)) {\n                return this._doDeleteOrPurge(k, op);\n            }\n            const iter = yield this.keys(k);\n            const buf = [];\n            try {\n                for (var _d = true, iter_1 = __asyncValues(iter), iter_1_1; iter_1_1 = yield iter_1.next(), _a = iter_1_1.done, !_a; _d = true) {\n                    _c = iter_1_1.value;\n                    _d = false;\n                    const k = _c;\n                    buf.push(this._doDeleteOrPurge(k, op));\n                    if (buf.length === 100) {\n                        yield Promise.all(buf);\n                        buf.length = 0;\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iter_1.return)) yield _b.call(iter_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            if (buf.length > 0) {\n                yield Promise.all(buf);\n            }\n        });\n    }\n    _doDeleteOrPurge(k, op) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const ek = this.encodeKey(k);\n            this.validateKey(ek);\n            const h = (0, headers_1.headers)();\n            h.set(exports.kvOperationHdr, op);\n            if (op === \"PURGE\") {\n                h.set(types_1.JsHeaders.RollupHdr, types_1.JsHeaders.RollupValueSubject);\n            }\n            yield this.js.publish(this.subjectForKey(ek, true), encoders_1.Empty, { headers: h });\n        });\n    }\n    _buildCC(k, content, opts = {}) {\n        const ek = this.encodeKey(k);\n        this.validateSearchKey(k);\n        let deliver_policy = jsapi_types_1.DeliverPolicy.LastPerSubject;\n        if (content === types_1.KvWatchInclude.AllHistory) {\n            deliver_policy = jsapi_types_1.DeliverPolicy.All;\n        }\n        if (content === types_1.KvWatchInclude.UpdatesOnly) {\n            deliver_policy = jsapi_types_1.DeliverPolicy.New;\n        }\n        return Object.assign({\n            deliver_policy,\n            \"ack_policy\": jsapi_types_1.AckPolicy.None,\n            \"filter_subject\": this.fullKeyName(ek),\n            \"flow_control\": true,\n            \"idle_heartbeat\": (0, jsutil_1.nanos)(5 * 1000),\n        }, opts);\n    }\n    remove(k) {\n        return this.purge(k);\n    }\n    history(opts = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const k = (_a = opts.key) !== null && _a !== void 0 ? _a : \">\";\n            const qi = new queued_iterator_1.QueuedIteratorImpl();\n            const co = {};\n            co.headers_only = opts.headers_only || false;\n            let fn;\n            fn = () => {\n                qi.stop();\n            };\n            let count = 0;\n            const cc = this._buildCC(k, types_1.KvWatchInclude.AllHistory, co);\n            const subj = cc.filter_subject;\n            const copts = (0, types_1.consumerOpts)(cc);\n            copts.bindStream(this.stream);\n            copts.orderedConsumer();\n            copts.callback((err, jm) => {\n                if (err) {\n                    // sub done\n                    qi.stop(err);\n                    return;\n                }\n                if (jm) {\n                    const e = this.jmToEntry(jm);\n                    qi.push(e);\n                    qi.received++;\n                    //@ts-ignore - function will be removed\n                    if (fn && count > 0 && qi.received >= count || jm.info.pending === 0) {\n                        //@ts-ignore: we are injecting an unexpected type\n                        qi.push(fn);\n                        fn = undefined;\n                    }\n                }\n            });\n            const sub = yield this.js.subscribe(subj, copts);\n            // by the time we are here, likely the subscription got messages\n            if (fn) {\n                const { info: { last } } = sub;\n                // this doesn't sound correct - we should be looking for a seq number instead\n                // then if we see a greater one, we are done.\n                const expect = last.num_pending + last.delivered.consumer_seq;\n                // if the iterator already queued - the only issue is other modifications\n                // did happen like stream was pruned, and the ordered consumer reset, etc\n                // we won't get what we are expecting - so the notification will never fire\n                // the sentinel ought to be coming from the server\n                if (expect === 0 || qi.received >= expect) {\n                    try {\n                        fn();\n                    }\n                    catch (err) {\n                        // fail it - there's something wrong in the user callback\n                        qi.stop(err);\n                    }\n                    finally {\n                        fn = undefined;\n                    }\n                }\n                else {\n                    count = expect;\n                }\n            }\n            qi._data = sub;\n            qi.iterClosed.then(() => {\n                sub.unsubscribe();\n            });\n            sub.closed.then(() => {\n                qi.stop();\n            }).catch((err) => {\n                qi.stop(err);\n            });\n            return qi;\n        });\n    }\n    watch(opts = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const k = (_a = opts.key) !== null && _a !== void 0 ? _a : \">\";\n            const qi = new queued_iterator_1.QueuedIteratorImpl();\n            const co = {};\n            co.headers_only = opts.headers_only || false;\n            let content = types_1.KvWatchInclude.LastValue;\n            if (opts.include === types_1.KvWatchInclude.AllHistory) {\n                content = types_1.KvWatchInclude.AllHistory;\n            }\n            else if (opts.include === types_1.KvWatchInclude.UpdatesOnly) {\n                content = types_1.KvWatchInclude.UpdatesOnly;\n            }\n            const ignoreDeletes = opts.ignoreDeletes === true;\n            let fn = opts.initializedFn;\n            let count = 0;\n            const cc = this._buildCC(k, content, co);\n            const subj = cc.filter_subject;\n            const copts = (0, types_1.consumerOpts)(cc);\n            copts.bindStream(this.stream);\n            copts.orderedConsumer();\n            copts.callback((err, jm) => {\n                if (err) {\n                    // sub done\n                    qi.stop(err);\n                    return;\n                }\n                if (jm) {\n                    const e = this.jmToEntry(jm);\n                    if (ignoreDeletes && e.operation === \"DEL\") {\n                        return;\n                    }\n                    qi.push(e);\n                    qi.received++;\n                    // count could have changed or has already been received\n                    if (fn && (count > 0 && qi.received >= count || jm.info.pending === 0)) {\n                        //@ts-ignore: we are injecting an unexpected type\n                        qi.push(fn);\n                        fn = undefined;\n                    }\n                }\n            });\n            const sub = yield this.js.subscribe(subj, copts);\n            // by the time we are here, likely the subscription got messages\n            if (fn) {\n                const { info: { last } } = sub;\n                // this doesn't sound correct - we should be looking for a seq number instead\n                // then if we see a greater one, we are done.\n                const expect = last.num_pending + last.delivered.consumer_seq;\n                // if the iterator already queued - the only issue is other modifications\n                // did happen like stream was pruned, and the ordered consumer reset, etc\n                // we won't get what we are expecting - so the notification will never fire\n                // the sentinel ought to be coming from the server\n                if (expect === 0 || qi.received >= expect) {\n                    try {\n                        fn();\n                    }\n                    catch (err) {\n                        // fail it - there's something wrong in the user callback\n                        qi.stop(err);\n                    }\n                    finally {\n                        fn = undefined;\n                    }\n                }\n                else {\n                    count = expect;\n                }\n            }\n            qi._data = sub;\n            qi.iterClosed.then(() => {\n                sub.unsubscribe();\n            });\n            sub.closed.then(() => {\n                qi.stop();\n            }).catch((err) => {\n                qi.stop(err);\n            });\n            return qi;\n        });\n    }\n    keys(k = \">\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            const keys = new queued_iterator_1.QueuedIteratorImpl();\n            const cc = this._buildCC(k, types_1.KvWatchInclude.LastValue, {\n                headers_only: true,\n            });\n            const subj = cc.filter_subject;\n            const copts = (0, types_1.consumerOpts)(cc);\n            copts.bindStream(this.stream);\n            copts.orderedConsumer();\n            const sub = yield this.js.subscribe(subj, copts);\n            (() => __awaiter(this, void 0, void 0, function* () {\n                var _a, e_3, _b, _c;\n                var _d;\n                try {\n                    for (var _e = true, sub_1 = __asyncValues(sub), sub_1_1; sub_1_1 = yield sub_1.next(), _a = sub_1_1.done, !_a; _e = true) {\n                        _c = sub_1_1.value;\n                        _e = false;\n                        const jm = _c;\n                        const op = (_d = jm.headers) === null || _d === void 0 ? void 0 : _d.get(exports.kvOperationHdr);\n                        if (op !== \"DEL\" && op !== \"PURGE\") {\n                            const key = this.decodeKey(jm.subject.substring(this.prefixLen));\n                            keys.push(key);\n                        }\n                        if (jm.info.pending === 0) {\n                            sub.unsubscribe();\n                        }\n                    }\n                }\n                catch (e_3_1) { e_3 = { error: e_3_1 }; }\n                finally {\n                    try {\n                        if (!_e && !_a && (_b = sub_1.return)) yield _b.call(sub_1);\n                    }\n                    finally { if (e_3) throw e_3.error; }\n                }\n            }))()\n                .then(() => {\n                keys.stop();\n            })\n                .catch((err) => {\n                keys.stop(err);\n            });\n            const si = sub;\n            if (si.info.last.num_pending === 0) {\n                sub.unsubscribe();\n            }\n            return keys;\n        });\n    }\n    purgeBucket(opts) {\n        return this.jsm.streams.purge(this.bucketName(), opts);\n    }\n    destroy() {\n        return this.jsm.streams.delete(this.bucketName());\n    }\n    status() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const nc = this.js.nc;\n            const cluster = (_b = (_a = nc.info) === null || _a === void 0 ? void 0 : _a.cluster) !== null && _b !== void 0 ? _b : \"\";\n            const bn = this.bucketName();\n            const si = yield this.jsm.streams.info(bn);\n            return new KvStatusImpl(si, cluster);\n        });\n    }\n}\nexports.Bucket = Bucket;\nclass KvStatusImpl {\n    constructor(si, cluster = \"\") {\n        this.si = si;\n        this.cluster = cluster;\n    }\n    get bucket() {\n        return this.si.config.name.startsWith(types_1.kvPrefix)\n            ? this.si.config.name.substring(types_1.kvPrefix.length)\n            : this.si.config.name;\n    }\n    get values() {\n        return this.si.state.messages;\n    }\n    get history() {\n        return this.si.config.max_msgs_per_subject;\n    }\n    get ttl() {\n        return (0, jsutil_1.millis)(this.si.config.max_age);\n    }\n    get bucket_location() {\n        return this.cluster;\n    }\n    get backingStore() {\n        return this.si.config.storage;\n    }\n    get storage() {\n        return this.si.config.storage;\n    }\n    get replicas() {\n        return this.si.config.num_replicas;\n    }\n    get description() {\n        var _a;\n        return (_a = this.si.config.description) !== null && _a !== void 0 ? _a : \"\";\n    }\n    get maxBucketSize() {\n        return this.si.config.max_bytes;\n    }\n    get maxValueSize() {\n        return this.si.config.max_msg_size;\n    }\n    get max_bytes() {\n        return this.si.config.max_bytes;\n    }\n    get placement() {\n        return this.si.config.placement || { cluster: \"\", tags: [] };\n    }\n    get placementCluster() {\n        var _a, _b;\n        return (_b = (_a = this.si.config.placement) === null || _a === void 0 ? void 0 : _a.cluster) !== null && _b !== void 0 ? _b : \"\";\n    }\n    get republish() {\n        var _a;\n        return (_a = this.si.config.republish) !== null && _a !== void 0 ? _a : { src: \"\", dest: \"\" };\n    }\n    get streamInfo() {\n        return this.si;\n    }\n    get size() {\n        return this.si.state.bytes;\n    }\n    get metadata() {\n        var _a;\n        return (_a = this.si.config.metadata) !== null && _a !== void 0 ? _a : {};\n    }\n    get compression() {\n        if (this.si.config.compression) {\n            return this.si.config.compression !== jsapi_types_1.StoreCompression.None;\n        }\n        return false;\n    }\n}\nexports.KvStatusImpl = KvStatusImpl;\nclass KvStoredEntryImpl {\n    constructor(bucket, prefixLen, sm) {\n        this.bucket = bucket;\n        this.prefixLen = prefixLen;\n        this.sm = sm;\n    }\n    get key() {\n        return this.sm.subject.substring(this.prefixLen);\n    }\n    get value() {\n        return this.sm.data;\n    }\n    get delta() {\n        return 0;\n    }\n    get created() {\n        return this.sm.time;\n    }\n    get revision() {\n        return this.sm.seq;\n    }\n    get operation() {\n        return this.sm.header.get(exports.kvOperationHdr) || \"PUT\";\n    }\n    get length() {\n        const slen = this.sm.header.get(types_1.JsHeaders.MessageSizeHdr) || \"\";\n        if (slen !== \"\") {\n            return parseInt(slen, 10);\n        }\n        return this.sm.data.length;\n    }\n    json() {\n        return this.sm.json();\n    }\n    string() {\n        return this.sm.string();\n    }\n}\nclass KvJsMsgEntryImpl {\n    constructor(bucket, key, sm) {\n        this.bucket = bucket;\n        this.key = key;\n        this.sm = sm;\n    }\n    get value() {\n        return this.sm.data;\n    }\n    get created() {\n        return new Date((0, jsutil_1.millis)(this.sm.info.timestampNanos));\n    }\n    get revision() {\n        return this.sm.seq;\n    }\n    get operation() {\n        var _a;\n        return ((_a = this.sm.headers) === null || _a === void 0 ? void 0 : _a.get(exports.kvOperationHdr)) || \"PUT\";\n    }\n    get delta() {\n        return this.sm.info.pending;\n    }\n    get length() {\n        var _a;\n        const slen = ((_a = this.sm.headers) === null || _a === void 0 ? void 0 : _a.get(types_1.JsHeaders.MessageSizeHdr)) || \"\";\n        if (slen !== \"\") {\n            return parseInt(slen, 10);\n        }\n        return this.sm.data.length;\n    }\n    json() {\n        return this.sm.json();\n    }\n    string() {\n        return this.sm.string();\n    }\n}\n//# sourceMappingURL=kv.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/jetstream/kv.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/jetstream/mod.js":
/*!************************************************!*\
  !*** ./node_modules/nats/lib/jetstream/mod.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.consumerOpts = exports.StoreCompression = exports.StorageType = exports.RetentionPolicy = exports.RepublishHeaders = exports.ReplayPolicy = exports.JsHeaders = exports.DiscardPolicy = exports.DirectMsgHeaders = exports.DeliverPolicy = exports.ConsumerEvents = exports.ConsumerDebugEvents = exports.AdvisoryKind = exports.AckPolicy = exports.nanos = exports.millis = exports.isHeartbeatMsg = exports.isFlowControlMsg = exports.checkJsError = void 0;\n/*\n * Copyright 2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar internal_mod_1 = __webpack_require__(/*! ./internal_mod */ \"(rsc)/./node_modules/nats/lib/jetstream/internal_mod.js\");\nObject.defineProperty(exports, \"checkJsError\", ({ enumerable: true, get: function () { return internal_mod_1.checkJsError; } }));\nObject.defineProperty(exports, \"isFlowControlMsg\", ({ enumerable: true, get: function () { return internal_mod_1.isFlowControlMsg; } }));\nObject.defineProperty(exports, \"isHeartbeatMsg\", ({ enumerable: true, get: function () { return internal_mod_1.isHeartbeatMsg; } }));\nObject.defineProperty(exports, \"millis\", ({ enumerable: true, get: function () { return internal_mod_1.millis; } }));\nObject.defineProperty(exports, \"nanos\", ({ enumerable: true, get: function () { return internal_mod_1.nanos; } }));\nvar internal_mod_2 = __webpack_require__(/*! ./internal_mod */ \"(rsc)/./node_modules/nats/lib/jetstream/internal_mod.js\");\nObject.defineProperty(exports, \"AckPolicy\", ({ enumerable: true, get: function () { return internal_mod_2.AckPolicy; } }));\nObject.defineProperty(exports, \"AdvisoryKind\", ({ enumerable: true, get: function () { return internal_mod_2.AdvisoryKind; } }));\nObject.defineProperty(exports, \"ConsumerDebugEvents\", ({ enumerable: true, get: function () { return internal_mod_2.ConsumerDebugEvents; } }));\nObject.defineProperty(exports, \"ConsumerEvents\", ({ enumerable: true, get: function () { return internal_mod_2.ConsumerEvents; } }));\nObject.defineProperty(exports, \"DeliverPolicy\", ({ enumerable: true, get: function () { return internal_mod_2.DeliverPolicy; } }));\nObject.defineProperty(exports, \"DirectMsgHeaders\", ({ enumerable: true, get: function () { return internal_mod_2.DirectMsgHeaders; } }));\nObject.defineProperty(exports, \"DiscardPolicy\", ({ enumerable: true, get: function () { return internal_mod_2.DiscardPolicy; } }));\nObject.defineProperty(exports, \"JsHeaders\", ({ enumerable: true, get: function () { return internal_mod_2.JsHeaders; } }));\nObject.defineProperty(exports, \"ReplayPolicy\", ({ enumerable: true, get: function () { return internal_mod_2.ReplayPolicy; } }));\nObject.defineProperty(exports, \"RepublishHeaders\", ({ enumerable: true, get: function () { return internal_mod_2.RepublishHeaders; } }));\nObject.defineProperty(exports, \"RetentionPolicy\", ({ enumerable: true, get: function () { return internal_mod_2.RetentionPolicy; } }));\nObject.defineProperty(exports, \"StorageType\", ({ enumerable: true, get: function () { return internal_mod_2.StorageType; } }));\nObject.defineProperty(exports, \"StoreCompression\", ({ enumerable: true, get: function () { return internal_mod_2.StoreCompression; } }));\nvar types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/nats/lib/jetstream/types.js\");\nObject.defineProperty(exports, \"consumerOpts\", ({ enumerable: true, get: function () { return types_1.consumerOpts; } }));\n//# sourceMappingURL=mod.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvamV0c3RyZWFtL21vZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyx3QkFBd0IsR0FBRyxtQkFBbUIsR0FBRyx1QkFBdUIsR0FBRyx3QkFBd0IsR0FBRyxvQkFBb0IsR0FBRyxpQkFBaUIsR0FBRyxxQkFBcUIsR0FBRyx3QkFBd0IsR0FBRyxxQkFBcUIsR0FBRyxzQkFBc0IsR0FBRywyQkFBMkIsR0FBRyxvQkFBb0IsR0FBRyxpQkFBaUIsR0FBRyxhQUFhLEdBQUcsY0FBYyxHQUFHLHNCQUFzQixHQUFHLHdCQUF3QixHQUFHLG9CQUFvQjtBQUM5YjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsK0VBQWdCO0FBQzdDLGdEQUErQyxFQUFFLHFDQUFxQyx1Q0FBdUMsRUFBQztBQUM5SCxvREFBbUQsRUFBRSxxQ0FBcUMsMkNBQTJDLEVBQUM7QUFDdEksa0RBQWlELEVBQUUscUNBQXFDLHlDQUF5QyxFQUFDO0FBQ2xJLDBDQUF5QyxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQztBQUNsSCx5Q0FBd0MsRUFBRSxxQ0FBcUMsZ0NBQWdDLEVBQUM7QUFDaEgscUJBQXFCLG1CQUFPLENBQUMsK0VBQWdCO0FBQzdDLDZDQUE0QyxFQUFFLHFDQUFxQyxvQ0FBb0MsRUFBQztBQUN4SCxnREFBK0MsRUFBRSxxQ0FBcUMsdUNBQXVDLEVBQUM7QUFDOUgsdURBQXNELEVBQUUscUNBQXFDLDhDQUE4QyxFQUFDO0FBQzVJLGtEQUFpRCxFQUFFLHFDQUFxQyx5Q0FBeUMsRUFBQztBQUNsSSxpREFBZ0QsRUFBRSxxQ0FBcUMsd0NBQXdDLEVBQUM7QUFDaEksb0RBQW1ELEVBQUUscUNBQXFDLDJDQUEyQyxFQUFDO0FBQ3RJLGlEQUFnRCxFQUFFLHFDQUFxQyx3Q0FBd0MsRUFBQztBQUNoSSw2Q0FBNEMsRUFBRSxxQ0FBcUMsb0NBQW9DLEVBQUM7QUFDeEgsZ0RBQStDLEVBQUUscUNBQXFDLHVDQUF1QyxFQUFDO0FBQzlILG9EQUFtRCxFQUFFLHFDQUFxQywyQ0FBMkMsRUFBQztBQUN0SSxtREFBa0QsRUFBRSxxQ0FBcUMsMENBQTBDLEVBQUM7QUFDcEksK0NBQThDLEVBQUUscUNBQXFDLHNDQUFzQyxFQUFDO0FBQzVILG9EQUFtRCxFQUFFLHFDQUFxQywyQ0FBMkMsRUFBQztBQUN0SSxjQUFjLG1CQUFPLENBQUMsaUVBQVM7QUFDL0IsZ0RBQStDLEVBQUUscUNBQXFDLGdDQUFnQyxFQUFDO0FBQ3ZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvamV0c3RyZWFtL21vZC5qcz9lY2I0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25zdW1lck9wdHMgPSBleHBvcnRzLlN0b3JlQ29tcHJlc3Npb24gPSBleHBvcnRzLlN0b3JhZ2VUeXBlID0gZXhwb3J0cy5SZXRlbnRpb25Qb2xpY3kgPSBleHBvcnRzLlJlcHVibGlzaEhlYWRlcnMgPSBleHBvcnRzLlJlcGxheVBvbGljeSA9IGV4cG9ydHMuSnNIZWFkZXJzID0gZXhwb3J0cy5EaXNjYXJkUG9saWN5ID0gZXhwb3J0cy5EaXJlY3RNc2dIZWFkZXJzID0gZXhwb3J0cy5EZWxpdmVyUG9saWN5ID0gZXhwb3J0cy5Db25zdW1lckV2ZW50cyA9IGV4cG9ydHMuQ29uc3VtZXJEZWJ1Z0V2ZW50cyA9IGV4cG9ydHMuQWR2aXNvcnlLaW5kID0gZXhwb3J0cy5BY2tQb2xpY3kgPSBleHBvcnRzLm5hbm9zID0gZXhwb3J0cy5taWxsaXMgPSBleHBvcnRzLmlzSGVhcnRiZWF0TXNnID0gZXhwb3J0cy5pc0Zsb3dDb250cm9sTXNnID0gZXhwb3J0cy5jaGVja0pzRXJyb3IgPSB2b2lkIDA7XG4vKlxuICogQ29weXJpZ2h0IDIwMjMgVGhlIE5BVFMgQXV0aG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBpbnRlcm5hbF9tb2RfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsX21vZFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNoZWNrSnNFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfbW9kXzEuY2hlY2tKc0Vycm9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNGbG93Q29udHJvbE1zZ1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfbW9kXzEuaXNGbG93Q29udHJvbE1zZzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzSGVhcnRiZWF0TXNnXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcm5hbF9tb2RfMS5pc0hlYXJ0YmVhdE1zZzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm1pbGxpc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfbW9kXzEubWlsbGlzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibmFub3NcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVybmFsX21vZF8xLm5hbm9zOyB9IH0pO1xudmFyIGludGVybmFsX21vZF8yID0gcmVxdWlyZShcIi4vaW50ZXJuYWxfbW9kXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQWNrUG9saWN5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcm5hbF9tb2RfMi5BY2tQb2xpY3k7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBZHZpc29yeUtpbmRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVybmFsX21vZF8yLkFkdmlzb3J5S2luZDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbnN1bWVyRGVidWdFdmVudHNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVybmFsX21vZF8yLkNvbnN1bWVyRGVidWdFdmVudHM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb25zdW1lckV2ZW50c1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfbW9kXzIuQ29uc3VtZXJFdmVudHM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEZWxpdmVyUG9saWN5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcm5hbF9tb2RfMi5EZWxpdmVyUG9saWN5OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGlyZWN0TXNnSGVhZGVyc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfbW9kXzIuRGlyZWN0TXNnSGVhZGVyczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpc2NhcmRQb2xpY3lcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVybmFsX21vZF8yLkRpc2NhcmRQb2xpY3k7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJKc0hlYWRlcnNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVybmFsX21vZF8yLkpzSGVhZGVyczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlcGxheVBvbGljeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfbW9kXzIuUmVwbGF5UG9saWN5OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVwdWJsaXNoSGVhZGVyc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfbW9kXzIuUmVwdWJsaXNoSGVhZGVyczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJldGVudGlvblBvbGljeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfbW9kXzIuUmV0ZW50aW9uUG9saWN5OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3RvcmFnZVR5cGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVybmFsX21vZF8yLlN0b3JhZ2VUeXBlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3RvcmVDb21wcmVzc2lvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfbW9kXzIuU3RvcmVDb21wcmVzc2lvbjsgfSB9KTtcbnZhciB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb25zdW1lck9wdHNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR5cGVzXzEuY29uc3VtZXJPcHRzOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/jetstream/mod.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/jetstream/objectstore.js":
/*!********************************************************!*\
  !*** ./node_modules/nats/lib/jetstream/objectstore.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright 2022-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ObjectStoreImpl = exports.ObjectStoreStatusImpl = exports.objectStoreBucketName = exports.objectStoreStreamName = exports.digestType = exports.osPrefix = void 0;\nconst kv_1 = __webpack_require__(/*! ./kv */ \"(rsc)/./node_modules/nats/lib/jetstream/kv.js\");\nconst base64_1 = __webpack_require__(/*! ../nats-base-client/base64 */ \"(rsc)/./node_modules/nats/lib/nats-base-client/base64.js\");\nconst codec_1 = __webpack_require__(/*! ../nats-base-client/codec */ \"(rsc)/./node_modules/nats/lib/nats-base-client/codec.js\");\nconst nuid_1 = __webpack_require__(/*! ../nats-base-client/nuid */ \"(rsc)/./node_modules/nats/lib/nats-base-client/nuid.js\");\nconst util_1 = __webpack_require__(/*! ../nats-base-client/util */ \"(rsc)/./node_modules/nats/lib/nats-base-client/util.js\");\nconst databuffer_1 = __webpack_require__(/*! ../nats-base-client/databuffer */ \"(rsc)/./node_modules/nats/lib/nats-base-client/databuffer.js\");\nconst headers_1 = __webpack_require__(/*! ../nats-base-client/headers */ \"(rsc)/./node_modules/nats/lib/nats-base-client/headers.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/nats/lib/jetstream/types.js\");\nconst queued_iterator_1 = __webpack_require__(/*! ../nats-base-client/queued_iterator */ \"(rsc)/./node_modules/nats/lib/nats-base-client/queued_iterator.js\");\nconst sha256_1 = __webpack_require__(/*! ../nats-base-client/sha256 */ \"(rsc)/./node_modules/nats/lib/nats-base-client/sha256.js\");\nconst jsapi_types_1 = __webpack_require__(/*! ./jsapi_types */ \"(rsc)/./node_modules/nats/lib/jetstream/jsapi_types.js\");\nconst jsclient_1 = __webpack_require__(/*! ./jsclient */ \"(rsc)/./node_modules/nats/lib/jetstream/jsclient.js\");\nexports.osPrefix = \"OBJ_\";\nexports.digestType = \"SHA-256=\";\nfunction objectStoreStreamName(bucket) {\n    (0, kv_1.validateBucket)(bucket);\n    return `${exports.osPrefix}${bucket}`;\n}\nexports.objectStoreStreamName = objectStoreStreamName;\nfunction objectStoreBucketName(stream) {\n    if (stream.startsWith(exports.osPrefix)) {\n        return stream.substring(4);\n    }\n    return stream;\n}\nexports.objectStoreBucketName = objectStoreBucketName;\nclass ObjectStoreStatusImpl {\n    constructor(si) {\n        this.si = si;\n        this.backingStore = \"JetStream\";\n    }\n    get bucket() {\n        return objectStoreBucketName(this.si.config.name);\n    }\n    get description() {\n        var _a;\n        return (_a = this.si.config.description) !== null && _a !== void 0 ? _a : \"\";\n    }\n    get ttl() {\n        return this.si.config.max_age;\n    }\n    get storage() {\n        return this.si.config.storage;\n    }\n    get replicas() {\n        return this.si.config.num_replicas;\n    }\n    get sealed() {\n        return this.si.config.sealed;\n    }\n    get size() {\n        return this.si.state.bytes;\n    }\n    get streamInfo() {\n        return this.si;\n    }\n    get metadata() {\n        return this.si.config.metadata;\n    }\n    get compression() {\n        if (this.si.config.compression) {\n            return this.si.config.compression !== jsapi_types_1.StoreCompression.None;\n        }\n        return false;\n    }\n}\nexports.ObjectStoreStatusImpl = ObjectStoreStatusImpl;\nclass ObjectInfoImpl {\n    constructor(oi) {\n        this.info = oi;\n    }\n    get name() {\n        return this.info.name;\n    }\n    get description() {\n        var _a;\n        return (_a = this.info.description) !== null && _a !== void 0 ? _a : \"\";\n    }\n    get headers() {\n        if (!this.hdrs) {\n            this.hdrs = headers_1.MsgHdrsImpl.fromRecord(this.info.headers || {});\n        }\n        return this.hdrs;\n    }\n    get options() {\n        return this.info.options;\n    }\n    get bucket() {\n        return this.info.bucket;\n    }\n    get chunks() {\n        return this.info.chunks;\n    }\n    get deleted() {\n        var _a;\n        return (_a = this.info.deleted) !== null && _a !== void 0 ? _a : false;\n    }\n    get digest() {\n        return this.info.digest;\n    }\n    get mtime() {\n        return this.info.mtime;\n    }\n    get nuid() {\n        return this.info.nuid;\n    }\n    get size() {\n        return this.info.size;\n    }\n    get revision() {\n        return this.info.revision;\n    }\n    get metadata() {\n        return this.info.metadata || {};\n    }\n    isLink() {\n        var _a, _b;\n        return (((_a = this.info.options) === null || _a === void 0 ? void 0 : _a.link) !== undefined) &&\n            (((_b = this.info.options) === null || _b === void 0 ? void 0 : _b.link) !== null);\n    }\n}\nfunction toServerObjectStoreMeta(meta) {\n    var _a;\n    const v = {\n        name: meta.name,\n        description: (_a = meta.description) !== null && _a !== void 0 ? _a : \"\",\n        options: meta.options,\n        metadata: meta.metadata,\n    };\n    if (meta.headers) {\n        const mhi = meta.headers;\n        v.headers = mhi.toRecord();\n    }\n    return v;\n}\nfunction emptyReadableStream() {\n    return new ReadableStream({\n        pull(c) {\n            c.enqueue(new Uint8Array(0));\n            c.close();\n        },\n    });\n}\nclass ObjectStoreImpl {\n    constructor(name, jsm, js) {\n        this.name = name;\n        this.jsm = jsm;\n        this.js = js;\n    }\n    _checkNotEmpty(name) {\n        if (!name || name.length === 0) {\n            return { name, error: new Error(\"name cannot be empty\") };\n        }\n        return { name };\n    }\n    info(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const info = yield this.rawInfo(name);\n            return info ? new ObjectInfoImpl(info) : null;\n        });\n    }\n    list() {\n        var _a, e_1, _b, _c;\n        return __awaiter(this, void 0, void 0, function* () {\n            const buf = [];\n            const iter = yield this.watch({\n                ignoreDeletes: true,\n                includeHistory: true,\n            });\n            try {\n                for (var _d = true, iter_1 = __asyncValues(iter), iter_1_1; iter_1_1 = yield iter_1.next(), _a = iter_1_1.done, !_a; _d = true) {\n                    _c = iter_1_1.value;\n                    _d = false;\n                    const info = _c;\n                    // watch will give a null when it has initialized\n                    // for us that is the hint we are done\n                    if (info === null) {\n                        break;\n                    }\n                    buf.push(info);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iter_1.return)) yield _b.call(iter_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return Promise.resolve(buf);\n        });\n    }\n    rawInfo(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { name: obj, error } = this._checkNotEmpty(name);\n            if (error) {\n                return Promise.reject(error);\n            }\n            const meta = this._metaSubject(obj);\n            try {\n                const m = yield this.jsm.streams.getMessage(this.stream, {\n                    last_by_subj: meta,\n                });\n                const jc = (0, codec_1.JSONCodec)();\n                const soi = jc.decode(m.data);\n                soi.revision = m.seq;\n                return soi;\n            }\n            catch (err) {\n                if (err.code === \"404\") {\n                    return null;\n                }\n                return Promise.reject(err);\n            }\n        });\n    }\n    _si(opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return yield this.jsm.streams.info(this.stream, opts);\n            }\n            catch (err) {\n                const nerr = err;\n                if (nerr.code === \"404\") {\n                    return null;\n                }\n                return Promise.reject(err);\n            }\n        });\n    }\n    seal() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let info = yield this._si();\n            if (info === null) {\n                return Promise.reject(new Error(\"object store not found\"));\n            }\n            info.config.sealed = true;\n            info = yield this.jsm.streams.update(this.stream, info.config);\n            return Promise.resolve(new ObjectStoreStatusImpl(info));\n        });\n    }\n    status(opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const info = yield this._si(opts);\n            if (info === null) {\n                return Promise.reject(new Error(\"object store not found\"));\n            }\n            return Promise.resolve(new ObjectStoreStatusImpl(info));\n        });\n    }\n    destroy() {\n        return this.jsm.streams.delete(this.stream);\n    }\n    _put(meta, rs, opts) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const jsopts = this.js.getOptions();\n            opts = opts || { timeout: jsopts.timeout };\n            opts.timeout = opts.timeout || jsopts.timeout;\n            opts.previousRevision = (_a = opts.previousRevision) !== null && _a !== void 0 ? _a : undefined;\n            const { timeout, previousRevision } = opts;\n            const si = this.js.nc.info;\n            const maxPayload = (si === null || si === void 0 ? void 0 : si.max_payload) || 1024;\n            meta = meta || {};\n            meta.options = meta.options || {};\n            let maxChunk = ((_b = meta.options) === null || _b === void 0 ? void 0 : _b.max_chunk_size) || 128 * 1024;\n            maxChunk = maxChunk > maxPayload ? maxPayload : maxChunk;\n            meta.options.max_chunk_size = maxChunk;\n            const old = yield this.info(meta.name);\n            const { name: n, error } = this._checkNotEmpty(meta.name);\n            if (error) {\n                return Promise.reject(error);\n            }\n            const id = nuid_1.nuid.next();\n            const chunkSubj = this._chunkSubject(id);\n            const metaSubj = this._metaSubject(n);\n            const info = Object.assign({\n                bucket: this.name,\n                nuid: id,\n                size: 0,\n                chunks: 0,\n            }, toServerObjectStoreMeta(meta));\n            const d = (0, util_1.deferred)();\n            const proms = [];\n            const db = new databuffer_1.DataBuffer();\n            try {\n                const reader = rs ? rs.getReader() : null;\n                const sha = new sha256_1.SHA256();\n                while (true) {\n                    const { done, value } = reader\n                        ? yield reader.read()\n                        : { done: true, value: undefined };\n                    if (done) {\n                        // put any partial chunk in\n                        if (db.size() > 0) {\n                            const payload = db.drain();\n                            sha.update(payload);\n                            info.chunks++;\n                            info.size += payload.length;\n                            proms.push(this.js.publish(chunkSubj, payload, { timeout }));\n                        }\n                        // wait for all the chunks to write\n                        yield Promise.all(proms);\n                        proms.length = 0;\n                        // prepare the metadata\n                        info.mtime = new Date().toISOString();\n                        const digest = sha.digest(\"base64\");\n                        const pad = digest.length % 3;\n                        const padding = pad > 0 ? \"=\".repeat(pad) : \"\";\n                        info.digest = `${exports.digestType}${digest}${padding}`;\n                        info.deleted = false;\n                        // trailing md for the object\n                        const h = (0, headers_1.headers)();\n                        if (typeof previousRevision === \"number\") {\n                            h.set(jsclient_1.PubHeaders.ExpectedLastSubjectSequenceHdr, `${previousRevision}`);\n                        }\n                        h.set(types_1.JsHeaders.RollupHdr, types_1.JsHeaders.RollupValueSubject);\n                        // try to update the metadata\n                        const pa = yield this.js.publish(metaSubj, (0, codec_1.JSONCodec)().encode(info), {\n                            headers: h,\n                            timeout,\n                        });\n                        // update the revision to point to the sequence where we inserted\n                        info.revision = pa.seq;\n                        // if we are here, the new entry is live\n                        if (old) {\n                            try {\n                                yield this.jsm.streams.purge(this.stream, {\n                                    filter: `$O.${this.name}.C.${old.nuid}`,\n                                });\n                            }\n                            catch (_err) {\n                                // rejecting here, would mean send the wrong signal\n                                // the update succeeded, but cleanup of old chunks failed.\n                            }\n                        }\n                        // resolve the ObjectInfo\n                        d.resolve(new ObjectInfoImpl(info));\n                        // stop\n                        break;\n                    }\n                    if (value) {\n                        db.fill(value);\n                        while (db.size() > maxChunk) {\n                            info.chunks++;\n                            info.size += maxChunk;\n                            const payload = db.drain(meta.options.max_chunk_size);\n                            sha.update(payload);\n                            proms.push(this.js.publish(chunkSubj, payload, { timeout }));\n                        }\n                    }\n                }\n            }\n            catch (err) {\n                // we failed, remove any partials\n                yield this.jsm.streams.purge(this.stream, { filter: chunkSubj });\n                d.reject(err);\n            }\n            return d;\n        });\n    }\n    putBlob(meta, data, opts) {\n        function readableStreamFrom(data) {\n            return new ReadableStream({\n                pull(controller) {\n                    controller.enqueue(data);\n                    controller.close();\n                },\n            });\n        }\n        if (data === null) {\n            data = new Uint8Array(0);\n        }\n        return this.put(meta, readableStreamFrom(data), opts);\n    }\n    put(meta, rs, opts) {\n        var _a;\n        if ((_a = meta === null || meta === void 0 ? void 0 : meta.options) === null || _a === void 0 ? void 0 : _a.link) {\n            return Promise.reject(new Error(\"link cannot be set when putting the object in bucket\"));\n        }\n        return this._put(meta, rs, opts);\n    }\n    getBlob(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            function fromReadableStream(rs) {\n                return __awaiter(this, void 0, void 0, function* () {\n                    const buf = new databuffer_1.DataBuffer();\n                    const reader = rs.getReader();\n                    while (true) {\n                        const { done, value } = yield reader.read();\n                        if (done) {\n                            return buf.drain();\n                        }\n                        if (value && value.length) {\n                            buf.fill(value);\n                        }\n                    }\n                });\n            }\n            const r = yield this.get(name);\n            if (r === null) {\n                return Promise.resolve(null);\n            }\n            const vs = yield Promise.all([r.error, fromReadableStream(r.data)]);\n            if (vs[0]) {\n                return Promise.reject(vs[0]);\n            }\n            else {\n                return Promise.resolve(vs[1]);\n            }\n        });\n    }\n    get(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const info = yield this.rawInfo(name);\n            if (info === null) {\n                return Promise.resolve(null);\n            }\n            if (info.deleted) {\n                return Promise.resolve(null);\n            }\n            if (info.options && info.options.link) {\n                const ln = info.options.link.name || \"\";\n                if (ln === \"\") {\n                    throw new Error(\"link is a bucket\");\n                }\n                const os = info.options.link.bucket !== this.name\n                    ? yield ObjectStoreImpl.create(this.js, info.options.link.bucket)\n                    : this;\n                return os.get(ln);\n            }\n            const d = (0, util_1.deferred)();\n            const r = {\n                info: new ObjectInfoImpl(info),\n                error: d,\n            };\n            if (info.size === 0) {\n                r.data = emptyReadableStream();\n                d.resolve(null);\n                return Promise.resolve(r);\n            }\n            let controller;\n            const oc = (0, types_1.consumerOpts)();\n            oc.orderedConsumer();\n            const sha = new sha256_1.SHA256();\n            const subj = `$O.${this.name}.C.${info.nuid}`;\n            const sub = yield this.js.subscribe(subj, oc);\n            (() => __awaiter(this, void 0, void 0, function* () {\n                var _a, e_2, _b, _c;\n                try {\n                    for (var _d = true, sub_1 = __asyncValues(sub), sub_1_1; sub_1_1 = yield sub_1.next(), _a = sub_1_1.done, !_a; _d = true) {\n                        _c = sub_1_1.value;\n                        _d = false;\n                        const jm = _c;\n                        if (jm.data.length > 0) {\n                            sha.update(jm.data);\n                            controller.enqueue(jm.data);\n                        }\n                        if (jm.info.pending === 0) {\n                            const hash = sha.digest(\"base64\");\n                            // go pads the hash - which should be multiple of 3 - otherwise pads with '='\n                            const pad = hash.length % 3;\n                            const padding = pad > 0 ? \"=\".repeat(pad) : \"\";\n                            const digest = `${exports.digestType}${hash}${padding}`;\n                            if (digest !== info.digest) {\n                                controller.error(new Error(`received a corrupt object, digests do not match received: ${info.digest} calculated ${digest}`));\n                            }\n                            else {\n                                controller.close();\n                            }\n                            sub.unsubscribe();\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (!_d && !_a && (_b = sub_1.return)) yield _b.call(sub_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }))()\n                .then(() => {\n                d.resolve();\n            })\n                .catch((err) => {\n                controller.error(err);\n                d.reject(err);\n            });\n            r.data = new ReadableStream({\n                start(c) {\n                    controller = c;\n                },\n                cancel() {\n                    sub.unsubscribe();\n                },\n            });\n            return r;\n        });\n    }\n    linkStore(name, bucket) {\n        if (!(bucket instanceof ObjectStoreImpl)) {\n            return Promise.reject(\"bucket required\");\n        }\n        const osi = bucket;\n        const { name: n, error } = this._checkNotEmpty(name);\n        if (error) {\n            return Promise.reject(error);\n        }\n        const meta = {\n            name: n,\n            options: { link: { bucket: osi.name } },\n        };\n        return this._put(meta, null);\n    }\n    link(name, info) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { name: n, error } = this._checkNotEmpty(name);\n            if (error) {\n                return Promise.reject(error);\n            }\n            if (info.deleted) {\n                return Promise.reject(new Error(\"src object is deleted\"));\n            }\n            if (info.isLink()) {\n                return Promise.reject(new Error(\"src object is a link\"));\n            }\n            const dest = yield this.rawInfo(name);\n            if (dest !== null && !dest.deleted) {\n                return Promise.reject(new Error(\"an object already exists with that name\"));\n            }\n            const link = { bucket: info.bucket, name: info.name };\n            const mm = {\n                name: n,\n                bucket: info.bucket,\n                options: { link: link },\n            };\n            yield this.js.publish(this._metaSubject(name), JSON.stringify(mm));\n            const i = yield this.info(name);\n            return Promise.resolve(i);\n        });\n    }\n    delete(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const info = yield this.rawInfo(name);\n            if (info === null) {\n                return Promise.resolve({ purged: 0, success: false });\n            }\n            info.deleted = true;\n            info.size = 0;\n            info.chunks = 0;\n            info.digest = \"\";\n            const jc = (0, codec_1.JSONCodec)();\n            const h = (0, headers_1.headers)();\n            h.set(types_1.JsHeaders.RollupHdr, types_1.JsHeaders.RollupValueSubject);\n            yield this.js.publish(this._metaSubject(info.name), jc.encode(info), {\n                headers: h,\n            });\n            return this.jsm.streams.purge(this.stream, {\n                filter: this._chunkSubject(info.nuid),\n            });\n        });\n    }\n    update(name, meta = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const info = yield this.rawInfo(name);\n            if (info === null) {\n                return Promise.reject(new Error(\"object not found\"));\n            }\n            if (info.deleted) {\n                return Promise.reject(new Error(\"cannot update meta for a deleted object\"));\n            }\n            meta.name = (_a = meta.name) !== null && _a !== void 0 ? _a : info.name;\n            const { name: n, error } = this._checkNotEmpty(meta.name);\n            if (error) {\n                return Promise.reject(error);\n            }\n            if (name !== meta.name) {\n                const i = yield this.info(meta.name);\n                if (i && !i.deleted) {\n                    return Promise.reject(new Error(\"an object already exists with that name\"));\n                }\n            }\n            meta.name = n;\n            const ii = Object.assign({}, info, toServerObjectStoreMeta(meta));\n            // if the name changed, delete the old meta\n            const ack = yield this.js.publish(this._metaSubject(ii.name), JSON.stringify(ii));\n            if (name !== meta.name) {\n                yield this.jsm.streams.purge(this.stream, {\n                    filter: this._metaSubject(name),\n                });\n            }\n            return Promise.resolve(ack);\n        });\n    }\n    watch(opts = {}) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            opts.includeHistory = (_a = opts.includeHistory) !== null && _a !== void 0 ? _a : false;\n            opts.ignoreDeletes = (_b = opts.ignoreDeletes) !== null && _b !== void 0 ? _b : false;\n            let initialized = false;\n            const qi = new queued_iterator_1.QueuedIteratorImpl();\n            const subj = this._metaSubjectAll();\n            try {\n                yield this.jsm.streams.getMessage(this.stream, { last_by_subj: subj });\n            }\n            catch (err) {\n                if (err.code === \"404\") {\n                    qi.push(null);\n                    initialized = true;\n                }\n                else {\n                    qi.stop(err);\n                }\n            }\n            const jc = (0, codec_1.JSONCodec)();\n            const copts = (0, types_1.consumerOpts)();\n            copts.orderedConsumer();\n            if (opts.includeHistory) {\n                copts.deliverLastPerSubject();\n            }\n            else {\n                // FIXME: Go's implementation doesn't seem correct - if history is not desired\n                //  the watch should only be giving notifications on new entries\n                initialized = true;\n                copts.deliverNew();\n            }\n            copts.callback((err, jm) => {\n                var _a;\n                if (err) {\n                    qi.stop(err);\n                    return;\n                }\n                if (jm !== null) {\n                    const oi = jc.decode(jm.data);\n                    if (oi.deleted && opts.ignoreDeletes === true) {\n                        // do nothing\n                    }\n                    else {\n                        qi.push(oi);\n                    }\n                    if (((_a = jm.info) === null || _a === void 0 ? void 0 : _a.pending) === 0 && !initialized) {\n                        initialized = true;\n                        qi.push(null);\n                    }\n                }\n            });\n            const sub = yield this.js.subscribe(subj, copts);\n            qi._data = sub;\n            qi.iterClosed.then(() => {\n                sub.unsubscribe();\n            });\n            sub.closed.then(() => {\n                qi.stop();\n            }).catch((err) => {\n                qi.stop(err);\n            });\n            return qi;\n        });\n    }\n    _chunkSubject(id) {\n        return `$O.${this.name}.C.${id}`;\n    }\n    _metaSubject(n) {\n        return `$O.${this.name}.M.${base64_1.Base64UrlPaddedCodec.encode(n)}`;\n    }\n    _metaSubjectAll() {\n        return `$O.${this.name}.M.>`;\n    }\n    init(opts = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                this.stream = objectStoreStreamName(this.name);\n            }\n            catch (err) {\n                return Promise.reject(err);\n            }\n            const max_age = (opts === null || opts === void 0 ? void 0 : opts.ttl) || 0;\n            delete opts.ttl;\n            // pacify the tsc compiler downstream\n            const sc = Object.assign({ max_age }, opts);\n            sc.name = this.stream;\n            sc.allow_direct = true;\n            sc.allow_rollup_hdrs = true;\n            sc.discard = jsapi_types_1.DiscardPolicy.New;\n            sc.subjects = [`$O.${this.name}.C.>`, `$O.${this.name}.M.>`];\n            if (opts.placement) {\n                sc.placement = opts.placement;\n            }\n            if (opts.metadata) {\n                sc.metadata = opts.metadata;\n            }\n            if (typeof opts.compression === \"boolean\") {\n                sc.compression = opts.compression\n                    ? jsapi_types_1.StoreCompression.S2\n                    : jsapi_types_1.StoreCompression.None;\n            }\n            try {\n                yield this.jsm.streams.info(sc.name);\n            }\n            catch (err) {\n                if (err.message === \"stream not found\") {\n                    yield this.jsm.streams.add(sc);\n                }\n            }\n        });\n    }\n    static create(js, name, opts = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const jsm = yield js.jetstreamManager();\n            const os = new ObjectStoreImpl(name, jsm, js);\n            yield os.init(opts);\n            return Promise.resolve(os);\n        });\n    }\n}\nexports.ObjectStoreImpl = ObjectStoreImpl;\n//# sourceMappingURL=objectstore.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvamV0c3RyZWFtL29iamVjdHN0b3JlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyR0FBMkcsdUZBQXVGLGNBQWM7QUFDaE4sdUJBQXVCLDhCQUE4QixnREFBZ0Qsd0RBQXdEO0FBQzdKLDZDQUE2QyxzQ0FBc0MsVUFBVSxtQkFBbUIsSUFBSTtBQUNwSDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyw2QkFBNkIsR0FBRyw2QkFBNkIsR0FBRyw2QkFBNkIsR0FBRyxrQkFBa0IsR0FBRyxnQkFBZ0I7QUFDL0osYUFBYSxtQkFBTyxDQUFDLDJEQUFNO0FBQzNCLGlCQUFpQixtQkFBTyxDQUFDLDRGQUE0QjtBQUNyRCxnQkFBZ0IsbUJBQU8sQ0FBQywwRkFBMkI7QUFDbkQsZUFBZSxtQkFBTyxDQUFDLHdGQUEwQjtBQUNqRCxlQUFlLG1CQUFPLENBQUMsd0ZBQTBCO0FBQ2pELHFCQUFxQixtQkFBTyxDQUFDLG9HQUFnQztBQUM3RCxrQkFBa0IsbUJBQU8sQ0FBQyw4RkFBNkI7QUFDdkQsZ0JBQWdCLG1CQUFPLENBQUMsaUVBQVM7QUFDakMsMEJBQTBCLG1CQUFPLENBQUMsOEdBQXFDO0FBQ3ZFLGlCQUFpQixtQkFBTyxDQUFDLDRGQUE0QjtBQUNyRCxzQkFBc0IsbUJBQU8sQ0FBQyw2RUFBZTtBQUM3QyxtQkFBbUIsbUJBQU8sQ0FBQyx1RUFBWTtBQUN2QyxnQkFBZ0I7QUFDaEIsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxjQUFjLGlCQUFpQixFQUFFLE9BQU87QUFDeEM7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSw0RUFBNEUseURBQXlEO0FBQ3JJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsUUFBUTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixjQUFjO0FBQzFDO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLFNBQVM7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLG1CQUFtQixFQUFFLE9BQU8sRUFBRSxRQUFRO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkZBQTJGLGlCQUFpQjtBQUM1RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELFVBQVUsS0FBSyxTQUFTO0FBQzFFLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkUsU0FBUztBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsbUJBQW1CO0FBQy9FO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxjQUFjO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixVQUFVLEtBQUssVUFBVTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RSxzREFBc0Q7QUFDbkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLG1CQUFtQixFQUFFLEtBQUssRUFBRSxRQUFRO0FBQ2xGO0FBQ0Esd0hBQXdILGFBQWEsYUFBYSxPQUFPO0FBQ3pKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsUUFBUTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFFBQVEsb0JBQW9CO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixZQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsMkJBQTJCO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSxvQkFBb0I7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxxQkFBcUIsVUFBVSxLQUFLLEdBQUc7QUFDdkM7QUFDQTtBQUNBLHFCQUFxQixVQUFVLEtBQUssd0NBQXdDO0FBQzVFO0FBQ0E7QUFDQSxxQkFBcUIsVUFBVTtBQUMvQjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxTQUFTO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLFVBQVUsYUFBYSxVQUFVO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL25hdHMvbGliL2pldHN0cmVhbS9vYmplY3RzdG9yZS5qcz9iOTNkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDIyLTIwMjMgVGhlIE5BVFMgQXV0aG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fYXN5bmNWYWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fYXN5bmNWYWx1ZXMpIHx8IGZ1bmN0aW9uIChvKSB7XG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT2JqZWN0U3RvcmVJbXBsID0gZXhwb3J0cy5PYmplY3RTdG9yZVN0YXR1c0ltcGwgPSBleHBvcnRzLm9iamVjdFN0b3JlQnVja2V0TmFtZSA9IGV4cG9ydHMub2JqZWN0U3RvcmVTdHJlYW1OYW1lID0gZXhwb3J0cy5kaWdlc3RUeXBlID0gZXhwb3J0cy5vc1ByZWZpeCA9IHZvaWQgMDtcbmNvbnN0IGt2XzEgPSByZXF1aXJlKFwiLi9rdlwiKTtcbmNvbnN0IGJhc2U2NF8xID0gcmVxdWlyZShcIi4uL25hdHMtYmFzZS1jbGllbnQvYmFzZTY0XCIpO1xuY29uc3QgY29kZWNfMSA9IHJlcXVpcmUoXCIuLi9uYXRzLWJhc2UtY2xpZW50L2NvZGVjXCIpO1xuY29uc3QgbnVpZF8xID0gcmVxdWlyZShcIi4uL25hdHMtYmFzZS1jbGllbnQvbnVpZFwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi9uYXRzLWJhc2UtY2xpZW50L3V0aWxcIik7XG5jb25zdCBkYXRhYnVmZmVyXzEgPSByZXF1aXJlKFwiLi4vbmF0cy1iYXNlLWNsaWVudC9kYXRhYnVmZmVyXCIpO1xuY29uc3QgaGVhZGVyc18xID0gcmVxdWlyZShcIi4uL25hdHMtYmFzZS1jbGllbnQvaGVhZGVyc1wiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmNvbnN0IHF1ZXVlZF9pdGVyYXRvcl8xID0gcmVxdWlyZShcIi4uL25hdHMtYmFzZS1jbGllbnQvcXVldWVkX2l0ZXJhdG9yXCIpO1xuY29uc3Qgc2hhMjU2XzEgPSByZXF1aXJlKFwiLi4vbmF0cy1iYXNlLWNsaWVudC9zaGEyNTZcIik7XG5jb25zdCBqc2FwaV90eXBlc18xID0gcmVxdWlyZShcIi4vanNhcGlfdHlwZXNcIik7XG5jb25zdCBqc2NsaWVudF8xID0gcmVxdWlyZShcIi4vanNjbGllbnRcIik7XG5leHBvcnRzLm9zUHJlZml4ID0gXCJPQkpfXCI7XG5leHBvcnRzLmRpZ2VzdFR5cGUgPSBcIlNIQS0yNTY9XCI7XG5mdW5jdGlvbiBvYmplY3RTdG9yZVN0cmVhbU5hbWUoYnVja2V0KSB7XG4gICAgKDAsIGt2XzEudmFsaWRhdGVCdWNrZXQpKGJ1Y2tldCk7XG4gICAgcmV0dXJuIGAke2V4cG9ydHMub3NQcmVmaXh9JHtidWNrZXR9YDtcbn1cbmV4cG9ydHMub2JqZWN0U3RvcmVTdHJlYW1OYW1lID0gb2JqZWN0U3RvcmVTdHJlYW1OYW1lO1xuZnVuY3Rpb24gb2JqZWN0U3RvcmVCdWNrZXROYW1lKHN0cmVhbSkge1xuICAgIGlmIChzdHJlYW0uc3RhcnRzV2l0aChleHBvcnRzLm9zUHJlZml4KSkge1xuICAgICAgICByZXR1cm4gc3RyZWFtLnN1YnN0cmluZyg0KTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmVhbTtcbn1cbmV4cG9ydHMub2JqZWN0U3RvcmVCdWNrZXROYW1lID0gb2JqZWN0U3RvcmVCdWNrZXROYW1lO1xuY2xhc3MgT2JqZWN0U3RvcmVTdGF0dXNJbXBsIHtcbiAgICBjb25zdHJ1Y3RvcihzaSkge1xuICAgICAgICB0aGlzLnNpID0gc2k7XG4gICAgICAgIHRoaXMuYmFja2luZ1N0b3JlID0gXCJKZXRTdHJlYW1cIjtcbiAgICB9XG4gICAgZ2V0IGJ1Y2tldCgpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdFN0b3JlQnVja2V0TmFtZSh0aGlzLnNpLmNvbmZpZy5uYW1lKTtcbiAgICB9XG4gICAgZ2V0IGRlc2NyaXB0aW9uKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnNpLmNvbmZpZy5kZXNjcmlwdGlvbikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJcIjtcbiAgICB9XG4gICAgZ2V0IHR0bCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2kuY29uZmlnLm1heF9hZ2U7XG4gICAgfVxuICAgIGdldCBzdG9yYWdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaS5jb25maWcuc3RvcmFnZTtcbiAgICB9XG4gICAgZ2V0IHJlcGxpY2FzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaS5jb25maWcubnVtX3JlcGxpY2FzO1xuICAgIH1cbiAgICBnZXQgc2VhbGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaS5jb25maWcuc2VhbGVkO1xuICAgIH1cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2kuc3RhdGUuYnl0ZXM7XG4gICAgfVxuICAgIGdldCBzdHJlYW1JbmZvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaTtcbiAgICB9XG4gICAgZ2V0IG1ldGFkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaS5jb25maWcubWV0YWRhdGE7XG4gICAgfVxuICAgIGdldCBjb21wcmVzc2lvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuc2kuY29uZmlnLmNvbXByZXNzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zaS5jb25maWcuY29tcHJlc3Npb24gIT09IGpzYXBpX3R5cGVzXzEuU3RvcmVDb21wcmVzc2lvbi5Ob25lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5leHBvcnRzLk9iamVjdFN0b3JlU3RhdHVzSW1wbCA9IE9iamVjdFN0b3JlU3RhdHVzSW1wbDtcbmNsYXNzIE9iamVjdEluZm9JbXBsIHtcbiAgICBjb25zdHJ1Y3RvcihvaSkge1xuICAgICAgICB0aGlzLmluZm8gPSBvaTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZm8ubmFtZTtcbiAgICB9XG4gICAgZ2V0IGRlc2NyaXB0aW9uKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLmluZm8uZGVzY3JpcHRpb24pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCI7XG4gICAgfVxuICAgIGdldCBoZWFkZXJzKCkge1xuICAgICAgICBpZiAoIXRoaXMuaGRycykge1xuICAgICAgICAgICAgdGhpcy5oZHJzID0gaGVhZGVyc18xLk1zZ0hkcnNJbXBsLmZyb21SZWNvcmQodGhpcy5pbmZvLmhlYWRlcnMgfHwge30pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmhkcnM7XG4gICAgfVxuICAgIGdldCBvcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmZvLm9wdGlvbnM7XG4gICAgfVxuICAgIGdldCBidWNrZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZm8uYnVja2V0O1xuICAgIH1cbiAgICBnZXQgY2h1bmtzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmZvLmNodW5rcztcbiAgICB9XG4gICAgZ2V0IGRlbGV0ZWQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuaW5mby5kZWxldGVkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZTtcbiAgICB9XG4gICAgZ2V0IGRpZ2VzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5mby5kaWdlc3Q7XG4gICAgfVxuICAgIGdldCBtdGltZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5mby5tdGltZTtcbiAgICB9XG4gICAgZ2V0IG51aWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZm8ubnVpZDtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZm8uc2l6ZTtcbiAgICB9XG4gICAgZ2V0IHJldmlzaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmZvLnJldmlzaW9uO1xuICAgIH1cbiAgICBnZXQgbWV0YWRhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZm8ubWV0YWRhdGEgfHwge307XG4gICAgfVxuICAgIGlzTGluaygpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuICgoKF9hID0gdGhpcy5pbmZvLm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5saW5rKSAhPT0gdW5kZWZpbmVkKSAmJlxuICAgICAgICAgICAgKCgoX2IgPSB0aGlzLmluZm8ub3B0aW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmxpbmspICE9PSBudWxsKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0b1NlcnZlck9iamVjdFN0b3JlTWV0YShtZXRhKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHYgPSB7XG4gICAgICAgIG5hbWU6IG1ldGEubmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb246IChfYSA9IG1ldGEuZGVzY3JpcHRpb24pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCIsXG4gICAgICAgIG9wdGlvbnM6IG1ldGEub3B0aW9ucyxcbiAgICAgICAgbWV0YWRhdGE6IG1ldGEubWV0YWRhdGEsXG4gICAgfTtcbiAgICBpZiAobWV0YS5oZWFkZXJzKSB7XG4gICAgICAgIGNvbnN0IG1oaSA9IG1ldGEuaGVhZGVycztcbiAgICAgICAgdi5oZWFkZXJzID0gbWhpLnRvUmVjb3JkKCk7XG4gICAgfVxuICAgIHJldHVybiB2O1xufVxuZnVuY3Rpb24gZW1wdHlSZWFkYWJsZVN0cmVhbSgpIHtcbiAgICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgcHVsbChjKSB7XG4gICAgICAgICAgICBjLmVucXVldWUobmV3IFVpbnQ4QXJyYXkoMCkpO1xuICAgICAgICAgICAgYy5jbG9zZSgpO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuY2xhc3MgT2JqZWN0U3RvcmVJbXBsIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBqc20sIGpzKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuanNtID0ganNtO1xuICAgICAgICB0aGlzLmpzID0ganM7XG4gICAgfVxuICAgIF9jaGVja05vdEVtcHR5KG5hbWUpIHtcbiAgICAgICAgaWYgKCFuYW1lIHx8IG5hbWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyBuYW1lLCBlcnJvcjogbmV3IEVycm9yKFwibmFtZSBjYW5ub3QgYmUgZW1wdHlcIikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBuYW1lIH07XG4gICAgfVxuICAgIGluZm8obmFtZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IHlpZWxkIHRoaXMucmF3SW5mbyhuYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBpbmZvID8gbmV3IE9iamVjdEluZm9JbXBsKGluZm8pIDogbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxpc3QoKSB7XG4gICAgICAgIHZhciBfYSwgZV8xLCBfYiwgX2M7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBidWYgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZXIgPSB5aWVsZCB0aGlzLndhdGNoKHtcbiAgICAgICAgICAgICAgICBpZ25vcmVEZWxldGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGluY2x1ZGVIaXN0b3J5OiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9kID0gdHJ1ZSwgaXRlcl8xID0gX19hc3luY1ZhbHVlcyhpdGVyKSwgaXRlcl8xXzE7IGl0ZXJfMV8xID0geWllbGQgaXRlcl8xLm5leHQoKSwgX2EgPSBpdGVyXzFfMS5kb25lLCAhX2E7IF9kID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfYyA9IGl0ZXJfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBfZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0gX2M7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdhdGNoIHdpbGwgZ2l2ZSBhIG51bGwgd2hlbiBpdCBoYXMgaW5pdGlhbGl6ZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yIHVzIHRoYXQgaXMgdGhlIGhpbnQgd2UgYXJlIGRvbmVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJ1Zi5wdXNoKGluZm8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9kICYmICFfYSAmJiAoX2IgPSBpdGVyXzEucmV0dXJuKSkgeWllbGQgX2IuY2FsbChpdGVyXzEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGJ1Zik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByYXdJbmZvKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgbmFtZTogb2JqLCBlcnJvciB9ID0gdGhpcy5fY2hlY2tOb3RFbXB0eShuYW1lKTtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fbWV0YVN1YmplY3Qob2JqKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbSA9IHlpZWxkIHRoaXMuanNtLnN0cmVhbXMuZ2V0TWVzc2FnZSh0aGlzLnN0cmVhbSwge1xuICAgICAgICAgICAgICAgICAgICBsYXN0X2J5X3N1Ymo6IG1ldGEsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgamMgPSAoMCwgY29kZWNfMS5KU09OQ29kZWMpKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc29pID0gamMuZGVjb2RlKG0uZGF0YSk7XG4gICAgICAgICAgICAgICAgc29pLnJldmlzaW9uID0gbS5zZXE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNvaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyLmNvZGUgPT09IFwiNDA0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3NpKG9wdHMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMuanNtLnN0cmVhbXMuaW5mbyh0aGlzLnN0cmVhbSwgb3B0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmVyciA9IGVycjtcbiAgICAgICAgICAgICAgICBpZiAobmVyci5jb2RlID09PSBcIjQwNFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNlYWwoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBsZXQgaW5mbyA9IHlpZWxkIHRoaXMuX3NpKCk7XG4gICAgICAgICAgICBpZiAoaW5mbyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJvYmplY3Qgc3RvcmUgbm90IGZvdW5kXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluZm8uY29uZmlnLnNlYWxlZCA9IHRydWU7XG4gICAgICAgICAgICBpbmZvID0geWllbGQgdGhpcy5qc20uc3RyZWFtcy51cGRhdGUodGhpcy5zdHJlYW0sIGluZm8uY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IE9iamVjdFN0b3JlU3RhdHVzSW1wbChpbmZvKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0dXMob3B0cykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IHlpZWxkIHRoaXMuX3NpKG9wdHMpO1xuICAgICAgICAgICAgaWYgKGluZm8gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwib2JqZWN0IHN0b3JlIG5vdCBmb3VuZFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBPYmplY3RTdG9yZVN0YXR1c0ltcGwoaW5mbykpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuanNtLnN0cmVhbXMuZGVsZXRlKHRoaXMuc3RyZWFtKTtcbiAgICB9XG4gICAgX3B1dChtZXRhLCBycywgb3B0cykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QganNvcHRzID0gdGhpcy5qcy5nZXRPcHRpb25zKCk7XG4gICAgICAgICAgICBvcHRzID0gb3B0cyB8fCB7IHRpbWVvdXQ6IGpzb3B0cy50aW1lb3V0IH07XG4gICAgICAgICAgICBvcHRzLnRpbWVvdXQgPSBvcHRzLnRpbWVvdXQgfHwganNvcHRzLnRpbWVvdXQ7XG4gICAgICAgICAgICBvcHRzLnByZXZpb3VzUmV2aXNpb24gPSAoX2EgPSBvcHRzLnByZXZpb3VzUmV2aXNpb24pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNvbnN0IHsgdGltZW91dCwgcHJldmlvdXNSZXZpc2lvbiB9ID0gb3B0cztcbiAgICAgICAgICAgIGNvbnN0IHNpID0gdGhpcy5qcy5uYy5pbmZvO1xuICAgICAgICAgICAgY29uc3QgbWF4UGF5bG9hZCA9IChzaSA9PT0gbnVsbCB8fCBzaSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2kubWF4X3BheWxvYWQpIHx8IDEwMjQ7XG4gICAgICAgICAgICBtZXRhID0gbWV0YSB8fCB7fTtcbiAgICAgICAgICAgIG1ldGEub3B0aW9ucyA9IG1ldGEub3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgIGxldCBtYXhDaHVuayA9ICgoX2IgPSBtZXRhLm9wdGlvbnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5tYXhfY2h1bmtfc2l6ZSkgfHwgMTI4ICogMTAyNDtcbiAgICAgICAgICAgIG1heENodW5rID0gbWF4Q2h1bmsgPiBtYXhQYXlsb2FkID8gbWF4UGF5bG9hZCA6IG1heENodW5rO1xuICAgICAgICAgICAgbWV0YS5vcHRpb25zLm1heF9jaHVua19zaXplID0gbWF4Q2h1bms7XG4gICAgICAgICAgICBjb25zdCBvbGQgPSB5aWVsZCB0aGlzLmluZm8obWV0YS5uYW1lKTtcbiAgICAgICAgICAgIGNvbnN0IHsgbmFtZTogbiwgZXJyb3IgfSA9IHRoaXMuX2NoZWNrTm90RW1wdHkobWV0YS5uYW1lKTtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpZCA9IG51aWRfMS5udWlkLm5leHQoKTtcbiAgICAgICAgICAgIGNvbnN0IGNodW5rU3ViaiA9IHRoaXMuX2NodW5rU3ViamVjdChpZCk7XG4gICAgICAgICAgICBjb25zdCBtZXRhU3ViaiA9IHRoaXMuX21ldGFTdWJqZWN0KG4pO1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgICAgIGJ1Y2tldDogdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgIG51aWQ6IGlkLFxuICAgICAgICAgICAgICAgIHNpemU6IDAsXG4gICAgICAgICAgICAgICAgY2h1bmtzOiAwLFxuICAgICAgICAgICAgfSwgdG9TZXJ2ZXJPYmplY3RTdG9yZU1ldGEobWV0YSkpO1xuICAgICAgICAgICAgY29uc3QgZCA9ICgwLCB1dGlsXzEuZGVmZXJyZWQpKCk7XG4gICAgICAgICAgICBjb25zdCBwcm9tcyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgZGIgPSBuZXcgZGF0YWJ1ZmZlcl8xLkRhdGFCdWZmZXIoKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gcnMgPyBycy5nZXRSZWFkZXIoKSA6IG51bGw7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hhID0gbmV3IHNoYTI1Nl8xLlNIQTI1NigpO1xuICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZG9uZSwgdmFsdWUgfSA9IHJlYWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgPyB5aWVsZCByZWFkZXIucmVhZCgpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuZGVmaW5lZCB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHV0IGFueSBwYXJ0aWFsIGNodW5rIGluXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGIuc2l6ZSgpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBkYi5kcmFpbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYS51cGRhdGUocGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5jaHVua3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvLnNpemUgKz0gcGF5bG9hZC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbXMucHVzaCh0aGlzLmpzLnB1Ymxpc2goY2h1bmtTdWJqLCBwYXlsb2FkLCB7IHRpbWVvdXQgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2FpdCBmb3IgYWxsIHRoZSBjaHVua3MgdG8gd3JpdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIFByb21pc2UuYWxsKHByb21zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21zLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmVwYXJlIHRoZSBtZXRhZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5tdGltZSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpZ2VzdCA9IHNoYS5kaWdlc3QoXCJiYXNlNjRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWQgPSBkaWdlc3QubGVuZ3RoICUgMztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZGRpbmcgPSBwYWQgPiAwID8gXCI9XCIucmVwZWF0KHBhZCkgOiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5kaWdlc3QgPSBgJHtleHBvcnRzLmRpZ2VzdFR5cGV9JHtkaWdlc3R9JHtwYWRkaW5nfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZvLmRlbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyYWlsaW5nIG1kIGZvciB0aGUgb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoID0gKDAsIGhlYWRlcnNfMS5oZWFkZXJzKSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwcmV2aW91c1JldmlzaW9uID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaC5zZXQoanNjbGllbnRfMS5QdWJIZWFkZXJzLkV4cGVjdGVkTGFzdFN1YmplY3RTZXF1ZW5jZUhkciwgYCR7cHJldmlvdXNSZXZpc2lvbn1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGguc2V0KHR5cGVzXzEuSnNIZWFkZXJzLlJvbGx1cEhkciwgdHlwZXNfMS5Kc0hlYWRlcnMuUm9sbHVwVmFsdWVTdWJqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyeSB0byB1cGRhdGUgdGhlIG1ldGFkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYSA9IHlpZWxkIHRoaXMuanMucHVibGlzaChtZXRhU3ViaiwgKDAsIGNvZGVjXzEuSlNPTkNvZGVjKSgpLmVuY29kZShpbmZvKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSByZXZpc2lvbiB0byBwb2ludCB0byB0aGUgc2VxdWVuY2Ugd2hlcmUgd2UgaW5zZXJ0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZm8ucmV2aXNpb24gPSBwYS5zZXE7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSBhcmUgaGVyZSwgdGhlIG5ldyBlbnRyeSBpcyBsaXZlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2xkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgdGhpcy5qc20uc3RyZWFtcy5wdXJnZSh0aGlzLnN0cmVhbSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiBgJE8uJHt0aGlzLm5hbWV9LkMuJHtvbGQubnVpZH1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKF9lcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVqZWN0aW5nIGhlcmUsIHdvdWxkIG1lYW4gc2VuZCB0aGUgd3Jvbmcgc2lnbmFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSB1cGRhdGUgc3VjY2VlZGVkLCBidXQgY2xlYW51cCBvZiBvbGQgY2h1bmtzIGZhaWxlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXNvbHZlIHRoZSBPYmplY3RJbmZvXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUobmV3IE9iamVjdEluZm9JbXBsKGluZm8pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0b3BcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGIuZmlsbCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZGIuc2l6ZSgpID4gbWF4Q2h1bmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvLmNodW5rcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8uc2l6ZSArPSBtYXhDaHVuaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gZGIuZHJhaW4obWV0YS5vcHRpb25zLm1heF9jaHVua19zaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGEudXBkYXRlKHBheWxvYWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb21zLnB1c2godGhpcy5qcy5wdWJsaXNoKGNodW5rU3ViaiwgcGF5bG9hZCwgeyB0aW1lb3V0IH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZSBmYWlsZWQsIHJlbW92ZSBhbnkgcGFydGlhbHNcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLmpzbS5zdHJlYW1zLnB1cmdlKHRoaXMuc3RyZWFtLCB7IGZpbHRlcjogY2h1bmtTdWJqIH0pO1xuICAgICAgICAgICAgICAgIGQucmVqZWN0KGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHB1dEJsb2IobWV0YSwgZGF0YSwgb3B0cykge1xuICAgICAgICBmdW5jdGlvbiByZWFkYWJsZVN0cmVhbUZyb20oZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgICAgICAgICAgICAgcHVsbChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgZGF0YSA9IG5ldyBVaW50OEFycmF5KDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnB1dChtZXRhLCByZWFkYWJsZVN0cmVhbUZyb20oZGF0YSksIG9wdHMpO1xuICAgIH1cbiAgICBwdXQobWV0YSwgcnMsIG9wdHMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoKF9hID0gbWV0YSA9PT0gbnVsbCB8fCBtZXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtZXRhLm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5saW5rKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwibGluayBjYW5ub3QgYmUgc2V0IHdoZW4gcHV0dGluZyB0aGUgb2JqZWN0IGluIGJ1Y2tldFwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3B1dChtZXRhLCBycywgb3B0cyk7XG4gICAgfVxuICAgIGdldEJsb2IobmFtZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZnJvbVJlYWRhYmxlU3RyZWFtKHJzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnVmID0gbmV3IGRhdGFidWZmZXJfMS5EYXRhQnVmZmVyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IHJzLmdldFJlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0geWllbGQgcmVhZGVyLnJlYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ1Zi5kcmFpbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1Zi5maWxsKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgciA9IHlpZWxkIHRoaXMuZ2V0KG5hbWUpO1xuICAgICAgICAgICAgaWYgKHIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdnMgPSB5aWVsZCBQcm9taXNlLmFsbChbci5lcnJvciwgZnJvbVJlYWRhYmxlU3RyZWFtKHIuZGF0YSldKTtcbiAgICAgICAgICAgIGlmICh2c1swXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh2c1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZzWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldChuYW1lKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBpbmZvID0geWllbGQgdGhpcy5yYXdJbmZvKG5hbWUpO1xuICAgICAgICAgICAgaWYgKGluZm8gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluZm8uZGVsZXRlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5mby5vcHRpb25zICYmIGluZm8ub3B0aW9ucy5saW5rKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG4gPSBpbmZvLm9wdGlvbnMubGluay5uYW1lIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKGxuID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImxpbmsgaXMgYSBidWNrZXRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG9zID0gaW5mby5vcHRpb25zLmxpbmsuYnVja2V0ICE9PSB0aGlzLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgPyB5aWVsZCBPYmplY3RTdG9yZUltcGwuY3JlYXRlKHRoaXMuanMsIGluZm8ub3B0aW9ucy5saW5rLmJ1Y2tldClcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzO1xuICAgICAgICAgICAgICAgIHJldHVybiBvcy5nZXQobG4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZCA9ICgwLCB1dGlsXzEuZGVmZXJyZWQpKCk7XG4gICAgICAgICAgICBjb25zdCByID0ge1xuICAgICAgICAgICAgICAgIGluZm86IG5ldyBPYmplY3RJbmZvSW1wbChpbmZvKSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaW5mby5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgci5kYXRhID0gZW1wdHlSZWFkYWJsZVN0cmVhbSgpO1xuICAgICAgICAgICAgICAgIGQucmVzb2x2ZShudWxsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNvbnRyb2xsZXI7XG4gICAgICAgICAgICBjb25zdCBvYyA9ICgwLCB0eXBlc18xLmNvbnN1bWVyT3B0cykoKTtcbiAgICAgICAgICAgIG9jLm9yZGVyZWRDb25zdW1lcigpO1xuICAgICAgICAgICAgY29uc3Qgc2hhID0gbmV3IHNoYTI1Nl8xLlNIQTI1NigpO1xuICAgICAgICAgICAgY29uc3Qgc3ViaiA9IGAkTy4ke3RoaXMubmFtZX0uQy4ke2luZm8ubnVpZH1gO1xuICAgICAgICAgICAgY29uc3Qgc3ViID0geWllbGQgdGhpcy5qcy5zdWJzY3JpYmUoc3Viaiwgb2MpO1xuICAgICAgICAgICAgKCgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIGVfMiwgX2IsIF9jO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9kID0gdHJ1ZSwgc3ViXzEgPSBfX2FzeW5jVmFsdWVzKHN1YiksIHN1Yl8xXzE7IHN1Yl8xXzEgPSB5aWVsZCBzdWJfMS5uZXh0KCksIF9hID0gc3ViXzFfMS5kb25lLCAhX2E7IF9kID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2MgPSBzdWJfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGptID0gX2M7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoam0uZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhLnVwZGF0ZShqbS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoam0uZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoam0uaW5mby5wZW5kaW5nID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFzaCA9IHNoYS5kaWdlc3QoXCJiYXNlNjRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ28gcGFkcyB0aGUgaGFzaCAtIHdoaWNoIHNob3VsZCBiZSBtdWx0aXBsZSBvZiAzIC0gb3RoZXJ3aXNlIHBhZHMgd2l0aCAnPSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWQgPSBoYXNoLmxlbmd0aCAlIDM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFkZGluZyA9IHBhZCA+IDAgPyBcIj1cIi5yZXBlYXQocGFkKSA6IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlnZXN0ID0gYCR7ZXhwb3J0cy5kaWdlc3RUeXBlfSR7aGFzaH0ke3BhZGRpbmd9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlnZXN0ICE9PSBpbmZvLmRpZ2VzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVycm9yKG5ldyBFcnJvcihgcmVjZWl2ZWQgYSBjb3JydXB0IG9iamVjdCwgZGlnZXN0cyBkbyBub3QgbWF0Y2ggcmVjZWl2ZWQ6ICR7aW5mby5kaWdlc3R9IGNhbGN1bGF0ZWQgJHtkaWdlc3R9YCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfZCAmJiAhX2EgJiYgKF9iID0gc3ViXzEucmV0dXJuKSkgeWllbGQgX2IuY2FsbChzdWJfMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKSgpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICBkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByLmRhdGEgPSBuZXcgUmVhZGFibGVTdHJlYW0oe1xuICAgICAgICAgICAgICAgIHN0YXJ0KGMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlciA9IGM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYW5jZWwoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGlua1N0b3JlKG5hbWUsIGJ1Y2tldCkge1xuICAgICAgICBpZiAoIShidWNrZXQgaW5zdGFuY2VvZiBPYmplY3RTdG9yZUltcGwpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJidWNrZXQgcmVxdWlyZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3NpID0gYnVja2V0O1xuICAgICAgICBjb25zdCB7IG5hbWU6IG4sIGVycm9yIH0gPSB0aGlzLl9jaGVja05vdEVtcHR5KG5hbWUpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6IG4sXG4gICAgICAgICAgICBvcHRpb25zOiB7IGxpbms6IHsgYnVja2V0OiBvc2kubmFtZSB9IH0sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLl9wdXQobWV0YSwgbnVsbCk7XG4gICAgfVxuICAgIGxpbmsobmFtZSwgaW5mbykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgeyBuYW1lOiBuLCBlcnJvciB9ID0gdGhpcy5fY2hlY2tOb3RFbXB0eShuYW1lKTtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5mby5kZWxldGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcInNyYyBvYmplY3QgaXMgZGVsZXRlZFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5mby5pc0xpbmsoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJzcmMgb2JqZWN0IGlzIGEgbGlua1wiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkZXN0ID0geWllbGQgdGhpcy5yYXdJbmZvKG5hbWUpO1xuICAgICAgICAgICAgaWYgKGRlc3QgIT09IG51bGwgJiYgIWRlc3QuZGVsZXRlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJhbiBvYmplY3QgYWxyZWFkeSBleGlzdHMgd2l0aCB0aGF0IG5hbWVcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbGluayA9IHsgYnVja2V0OiBpbmZvLmJ1Y2tldCwgbmFtZTogaW5mby5uYW1lIH07XG4gICAgICAgICAgICBjb25zdCBtbSA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuLFxuICAgICAgICAgICAgICAgIGJ1Y2tldDogaW5mby5idWNrZXQsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogeyBsaW5rOiBsaW5rIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeWllbGQgdGhpcy5qcy5wdWJsaXNoKHRoaXMuX21ldGFTdWJqZWN0KG5hbWUpLCBKU09OLnN0cmluZ2lmeShtbSkpO1xuICAgICAgICAgICAgY29uc3QgaSA9IHlpZWxkIHRoaXMuaW5mbyhuYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkZWxldGUobmFtZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IHlpZWxkIHRoaXMucmF3SW5mbyhuYW1lKTtcbiAgICAgICAgICAgIGlmIChpbmZvID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IHB1cmdlZDogMCwgc3VjY2VzczogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbmZvLmRlbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgaW5mby5zaXplID0gMDtcbiAgICAgICAgICAgIGluZm8uY2h1bmtzID0gMDtcbiAgICAgICAgICAgIGluZm8uZGlnZXN0ID0gXCJcIjtcbiAgICAgICAgICAgIGNvbnN0IGpjID0gKDAsIGNvZGVjXzEuSlNPTkNvZGVjKSgpO1xuICAgICAgICAgICAgY29uc3QgaCA9ICgwLCBoZWFkZXJzXzEuaGVhZGVycykoKTtcbiAgICAgICAgICAgIGguc2V0KHR5cGVzXzEuSnNIZWFkZXJzLlJvbGx1cEhkciwgdHlwZXNfMS5Kc0hlYWRlcnMuUm9sbHVwVmFsdWVTdWJqZWN0KTtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuanMucHVibGlzaCh0aGlzLl9tZXRhU3ViamVjdChpbmZvLm5hbWUpLCBqYy5lbmNvZGUoaW5mbyksIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5qc20uc3RyZWFtcy5wdXJnZSh0aGlzLnN0cmVhbSwge1xuICAgICAgICAgICAgICAgIGZpbHRlcjogdGhpcy5fY2h1bmtTdWJqZWN0KGluZm8ubnVpZCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZShuYW1lLCBtZXRhID0ge30pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IHlpZWxkIHRoaXMucmF3SW5mbyhuYW1lKTtcbiAgICAgICAgICAgIGlmIChpbmZvID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIm9iamVjdCBub3QgZm91bmRcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluZm8uZGVsZXRlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJjYW5ub3QgdXBkYXRlIG1ldGEgZm9yIGEgZGVsZXRlZCBvYmplY3RcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV0YS5uYW1lID0gKF9hID0gbWV0YS5uYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBpbmZvLm5hbWU7XG4gICAgICAgICAgICBjb25zdCB7IG5hbWU6IG4sIGVycm9yIH0gPSB0aGlzLl9jaGVja05vdEVtcHR5KG1ldGEubmFtZSk7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5hbWUgIT09IG1ldGEubmFtZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB5aWVsZCB0aGlzLmluZm8obWV0YS5uYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoaSAmJiAhaS5kZWxldGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJhbiBvYmplY3QgYWxyZWFkeSBleGlzdHMgd2l0aCB0aGF0IG5hbWVcIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ldGEubmFtZSA9IG47XG4gICAgICAgICAgICBjb25zdCBpaSA9IE9iamVjdC5hc3NpZ24oe30sIGluZm8sIHRvU2VydmVyT2JqZWN0U3RvcmVNZXRhKG1ldGEpKTtcbiAgICAgICAgICAgIC8vIGlmIHRoZSBuYW1lIGNoYW5nZWQsIGRlbGV0ZSB0aGUgb2xkIG1ldGFcbiAgICAgICAgICAgIGNvbnN0IGFjayA9IHlpZWxkIHRoaXMuanMucHVibGlzaCh0aGlzLl9tZXRhU3ViamVjdChpaS5uYW1lKSwgSlNPTi5zdHJpbmdpZnkoaWkpKTtcbiAgICAgICAgICAgIGlmIChuYW1lICE9PSBtZXRhLm5hbWUpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLmpzbS5zdHJlYW1zLnB1cmdlKHRoaXMuc3RyZWFtLCB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjogdGhpcy5fbWV0YVN1YmplY3QobmFtZSksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGFjayk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB3YXRjaChvcHRzID0ge30pIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIG9wdHMuaW5jbHVkZUhpc3RvcnkgPSAoX2EgPSBvcHRzLmluY2x1ZGVIaXN0b3J5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZTtcbiAgICAgICAgICAgIG9wdHMuaWdub3JlRGVsZXRlcyA9IChfYiA9IG9wdHMuaWdub3JlRGVsZXRlcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2U7XG4gICAgICAgICAgICBsZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IHFpID0gbmV3IHF1ZXVlZF9pdGVyYXRvcl8xLlF1ZXVlZEl0ZXJhdG9ySW1wbCgpO1xuICAgICAgICAgICAgY29uc3Qgc3ViaiA9IHRoaXMuX21ldGFTdWJqZWN0QWxsKCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuanNtLnN0cmVhbXMuZ2V0TWVzc2FnZSh0aGlzLnN0cmVhbSwgeyBsYXN0X2J5X3N1Ymo6IHN1YmogfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVyci5jb2RlID09PSBcIjQwNFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHFpLnB1c2gobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHFpLnN0b3AoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBqYyA9ICgwLCBjb2RlY18xLkpTT05Db2RlYykoKTtcbiAgICAgICAgICAgIGNvbnN0IGNvcHRzID0gKDAsIHR5cGVzXzEuY29uc3VtZXJPcHRzKSgpO1xuICAgICAgICAgICAgY29wdHMub3JkZXJlZENvbnN1bWVyKCk7XG4gICAgICAgICAgICBpZiAob3B0cy5pbmNsdWRlSGlzdG9yeSkge1xuICAgICAgICAgICAgICAgIGNvcHRzLmRlbGl2ZXJMYXN0UGVyU3ViamVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRklYTUU6IEdvJ3MgaW1wbGVtZW50YXRpb24gZG9lc24ndCBzZWVtIGNvcnJlY3QgLSBpZiBoaXN0b3J5IGlzIG5vdCBkZXNpcmVkXG4gICAgICAgICAgICAgICAgLy8gIHRoZSB3YXRjaCBzaG91bGQgb25seSBiZSBnaXZpbmcgbm90aWZpY2F0aW9ucyBvbiBuZXcgZW50cmllc1xuICAgICAgICAgICAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb3B0cy5kZWxpdmVyTmV3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb3B0cy5jYWxsYmFjaygoZXJyLCBqbSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHFpLnN0b3AoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoam0gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2kgPSBqYy5kZWNvZGUoam0uZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvaS5kZWxldGVkICYmIG9wdHMuaWdub3JlRGVsZXRlcyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcWkucHVzaChvaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCgoX2EgPSBqbS5pbmZvKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucGVuZGluZykgPT09IDAgJiYgIWluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBxaS5wdXNoKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBzdWIgPSB5aWVsZCB0aGlzLmpzLnN1YnNjcmliZShzdWJqLCBjb3B0cyk7XG4gICAgICAgICAgICBxaS5fZGF0YSA9IHN1YjtcbiAgICAgICAgICAgIHFpLml0ZXJDbG9zZWQudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHN1Yi5jbG9zZWQudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgcWkuc3RvcCgpO1xuICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHFpLnN0b3AoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHFpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2NodW5rU3ViamVjdChpZCkge1xuICAgICAgICByZXR1cm4gYCRPLiR7dGhpcy5uYW1lfS5DLiR7aWR9YDtcbiAgICB9XG4gICAgX21ldGFTdWJqZWN0KG4pIHtcbiAgICAgICAgcmV0dXJuIGAkTy4ke3RoaXMubmFtZX0uTS4ke2Jhc2U2NF8xLkJhc2U2NFVybFBhZGRlZENvZGVjLmVuY29kZShuKX1gO1xuICAgIH1cbiAgICBfbWV0YVN1YmplY3RBbGwoKSB7XG4gICAgICAgIHJldHVybiBgJE8uJHt0aGlzLm5hbWV9Lk0uPmA7XG4gICAgfVxuICAgIGluaXQob3B0cyA9IHt9KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtID0gb2JqZWN0U3RvcmVTdHJlYW1OYW1lKHRoaXMubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtYXhfYWdlID0gKG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy50dGwpIHx8IDA7XG4gICAgICAgICAgICBkZWxldGUgb3B0cy50dGw7XG4gICAgICAgICAgICAvLyBwYWNpZnkgdGhlIHRzYyBjb21waWxlciBkb3duc3RyZWFtXG4gICAgICAgICAgICBjb25zdCBzYyA9IE9iamVjdC5hc3NpZ24oeyBtYXhfYWdlIH0sIG9wdHMpO1xuICAgICAgICAgICAgc2MubmFtZSA9IHRoaXMuc3RyZWFtO1xuICAgICAgICAgICAgc2MuYWxsb3dfZGlyZWN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIHNjLmFsbG93X3JvbGx1cF9oZHJzID0gdHJ1ZTtcbiAgICAgICAgICAgIHNjLmRpc2NhcmQgPSBqc2FwaV90eXBlc18xLkRpc2NhcmRQb2xpY3kuTmV3O1xuICAgICAgICAgICAgc2Muc3ViamVjdHMgPSBbYCRPLiR7dGhpcy5uYW1lfS5DLj5gLCBgJE8uJHt0aGlzLm5hbWV9Lk0uPmBdO1xuICAgICAgICAgICAgaWYgKG9wdHMucGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgICAgc2MucGxhY2VtZW50ID0gb3B0cy5wbGFjZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0cy5tZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgIHNjLm1ldGFkYXRhID0gb3B0cy5tZXRhZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0cy5jb21wcmVzc2lvbiA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgICAgICBzYy5jb21wcmVzc2lvbiA9IG9wdHMuY29tcHJlc3Npb25cbiAgICAgICAgICAgICAgICAgICAgPyBqc2FwaV90eXBlc18xLlN0b3JlQ29tcHJlc3Npb24uUzJcbiAgICAgICAgICAgICAgICAgICAgOiBqc2FwaV90eXBlc18xLlN0b3JlQ29tcHJlc3Npb24uTm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgeWllbGQgdGhpcy5qc20uc3RyZWFtcy5pbmZvKHNjLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIubWVzc2FnZSA9PT0gXCJzdHJlYW0gbm90IGZvdW5kXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgdGhpcy5qc20uc3RyZWFtcy5hZGQoc2MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGUoanMsIG5hbWUsIG9wdHMgPSB7fSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QganNtID0geWllbGQganMuamV0c3RyZWFtTWFuYWdlcigpO1xuICAgICAgICAgICAgY29uc3Qgb3MgPSBuZXcgT2JqZWN0U3RvcmVJbXBsKG5hbWUsIGpzbSwganMpO1xuICAgICAgICAgICAgeWllbGQgb3MuaW5pdChvcHRzKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUob3MpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLk9iamVjdFN0b3JlSW1wbCA9IE9iamVjdFN0b3JlSW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9iamVjdHN0b3JlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/jetstream/objectstore.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/jetstream/types.js":
/*!**************************************************!*\
  !*** ./node_modules/nats/lib/jetstream/types.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isConsumerOptsBuilder = exports.consumerOpts = exports.ConsumerOptsBuilderImpl = exports.kvPrefix = exports.RepublishHeaders = exports.DirectMsgHeaders = exports.KvWatchInclude = exports.JsHeaders = exports.AdvisoryKind = void 0;\nconst jsapi_types_1 = __webpack_require__(/*! ./jsapi_types */ \"(rsc)/./node_modules/nats/lib/jetstream/jsapi_types.js\");\nconst jsutil_1 = __webpack_require__(/*! ./jsutil */ \"(rsc)/./node_modules/nats/lib/jetstream/jsutil.js\");\n/**\n * The different kinds of Advisories\n */\nvar AdvisoryKind;\n(function (AdvisoryKind) {\n    AdvisoryKind[\"API\"] = \"api_audit\";\n    AdvisoryKind[\"StreamAction\"] = \"stream_action\";\n    AdvisoryKind[\"ConsumerAction\"] = \"consumer_action\";\n    AdvisoryKind[\"SnapshotCreate\"] = \"snapshot_create\";\n    AdvisoryKind[\"SnapshotComplete\"] = \"snapshot_complete\";\n    AdvisoryKind[\"RestoreCreate\"] = \"restore_create\";\n    AdvisoryKind[\"RestoreComplete\"] = \"restore_complete\";\n    AdvisoryKind[\"MaxDeliver\"] = \"max_deliver\";\n    AdvisoryKind[\"Terminated\"] = \"terminated\";\n    AdvisoryKind[\"Ack\"] = \"consumer_ack\";\n    AdvisoryKind[\"StreamLeaderElected\"] = \"stream_leader_elected\";\n    AdvisoryKind[\"StreamQuorumLost\"] = \"stream_quorum_lost\";\n    AdvisoryKind[\"ConsumerLeaderElected\"] = \"consumer_leader_elected\";\n    AdvisoryKind[\"ConsumerQuorumLost\"] = \"consumer_quorum_lost\";\n})(AdvisoryKind || (exports.AdvisoryKind = AdvisoryKind = {}));\nvar JsHeaders;\n(function (JsHeaders) {\n    /**\n     * Set if message is from a stream source - format is `stream seq`\n     */\n    JsHeaders[\"StreamSourceHdr\"] = \"Nats-Stream-Source\";\n    /**\n     * Set for heartbeat messages\n     */\n    JsHeaders[\"LastConsumerSeqHdr\"] = \"Nats-Last-Consumer\";\n    /**\n     * Set for heartbeat messages\n     */\n    JsHeaders[\"LastStreamSeqHdr\"] = \"Nats-Last-Stream\";\n    /**\n     * Set for heartbeat messages if the consumer is stalled\n     */\n    JsHeaders[\"ConsumerStalledHdr\"] = \"Nats-Consumer-Stalled\";\n    /**\n     * Set for headers_only consumers indicates the number of bytes in the payload\n     */\n    JsHeaders[\"MessageSizeHdr\"] = \"Nats-Msg-Size\";\n    // rollup header\n    JsHeaders[\"RollupHdr\"] = \"Nats-Rollup\";\n    // value for rollup header when rolling up a subject\n    JsHeaders[\"RollupValueSubject\"] = \"sub\";\n    // value for rollup header when rolling up all subjects\n    JsHeaders[\"RollupValueAll\"] = \"all\";\n    /**\n     * Set on protocol messages to indicate pull request message count that\n     * was not honored.\n     */\n    JsHeaders[\"PendingMessagesHdr\"] = \"Nats-Pending-Messages\";\n    /**\n     * Set on protocol messages to indicate pull request byte count that\n     * was not honored\n     */\n    JsHeaders[\"PendingBytesHdr\"] = \"Nats-Pending-Bytes\";\n})(JsHeaders || (exports.JsHeaders = JsHeaders = {}));\nvar KvWatchInclude;\n(function (KvWatchInclude) {\n    /**\n     * Include the last value for all the keys\n     */\n    KvWatchInclude[\"LastValue\"] = \"\";\n    /**\n     * Include all available history for all keys\n     */\n    KvWatchInclude[\"AllHistory\"] = \"history\";\n    /**\n     * Don't include history or last values, only notify\n     * of updates\n     */\n    KvWatchInclude[\"UpdatesOnly\"] = \"updates\";\n})(KvWatchInclude || (exports.KvWatchInclude = KvWatchInclude = {}));\nvar DirectMsgHeaders;\n(function (DirectMsgHeaders) {\n    DirectMsgHeaders[\"Stream\"] = \"Nats-Stream\";\n    DirectMsgHeaders[\"Sequence\"] = \"Nats-Sequence\";\n    DirectMsgHeaders[\"TimeStamp\"] = \"Nats-Time-Stamp\";\n    DirectMsgHeaders[\"Subject\"] = \"Nats-Subject\";\n})(DirectMsgHeaders || (exports.DirectMsgHeaders = DirectMsgHeaders = {}));\nvar RepublishHeaders;\n(function (RepublishHeaders) {\n    /**\n     * The source stream of the message\n     */\n    RepublishHeaders[\"Stream\"] = \"Nats-Stream\";\n    /**\n     * The original subject of the message\n     */\n    RepublishHeaders[\"Subject\"] = \"Nats-Subject\";\n    /**\n     * The sequence of the republished message\n     */\n    RepublishHeaders[\"Sequence\"] = \"Nats-Sequence\";\n    /**\n     * The stream sequence id of the last message ingested to the same original subject (or 0 if none or deleted)\n     */\n    RepublishHeaders[\"LastSequence\"] = \"Nats-Last-Sequence\";\n    /**\n     * The size in bytes of the message's body - Only if {@link Republish#headers_only} is set.\n     */\n    RepublishHeaders[\"Size\"] = \"Nats-Msg-Size\";\n})(RepublishHeaders || (exports.RepublishHeaders = RepublishHeaders = {}));\nexports.kvPrefix = \"KV_\";\n// FIXME: some items here that may need to be addressed\n// 503s?\n// maxRetries()\n// retryBackoff()\n// ackWait(time)\n// replayOriginal()\n// rateLimit(bytesPerSec)\nclass ConsumerOptsBuilderImpl {\n    constructor(opts) {\n        this.stream = \"\";\n        this.mack = false;\n        this.ordered = false;\n        this.config = (0, jsapi_types_1.defaultConsumer)(\"\", opts || {});\n    }\n    getOpts() {\n        var _a;\n        const o = {};\n        o.config = Object.assign({}, this.config);\n        if (o.config.filter_subject) {\n            this.filterSubject(o.config.filter_subject);\n            o.config.filter_subject = undefined;\n        }\n        if (o.config.filter_subjects) {\n            (_a = o.config.filter_subjects) === null || _a === void 0 ? void 0 : _a.forEach((v) => {\n                this.filterSubject(v);\n            });\n            o.config.filter_subjects = undefined;\n        }\n        o.mack = this.mack;\n        o.stream = this.stream;\n        o.callbackFn = this.callbackFn;\n        o.max = this.max;\n        o.queue = this.qname;\n        o.ordered = this.ordered;\n        o.config.ack_policy = o.ordered ? jsapi_types_1.AckPolicy.None : o.config.ack_policy;\n        o.isBind = o.isBind || false;\n        if (this.filters) {\n            switch (this.filters.length) {\n                case 0:\n                    break;\n                case 1:\n                    o.config.filter_subject = this.filters[0];\n                    break;\n                default:\n                    o.config.filter_subjects = this.filters;\n            }\n        }\n        return o;\n    }\n    description(description) {\n        this.config.description = description;\n        return this;\n    }\n    deliverTo(subject) {\n        this.config.deliver_subject = subject;\n        return this;\n    }\n    durable(name) {\n        (0, jsutil_1.validateDurableName)(name);\n        this.config.durable_name = name;\n        return this;\n    }\n    startSequence(seq) {\n        if (seq <= 0) {\n            throw new Error(\"sequence must be greater than 0\");\n        }\n        this.config.deliver_policy = jsapi_types_1.DeliverPolicy.StartSequence;\n        this.config.opt_start_seq = seq;\n        return this;\n    }\n    startTime(time) {\n        this.config.deliver_policy = jsapi_types_1.DeliverPolicy.StartTime;\n        this.config.opt_start_time = time.toISOString();\n        return this;\n    }\n    deliverAll() {\n        this.config.deliver_policy = jsapi_types_1.DeliverPolicy.All;\n        return this;\n    }\n    deliverLastPerSubject() {\n        this.config.deliver_policy = jsapi_types_1.DeliverPolicy.LastPerSubject;\n        return this;\n    }\n    deliverLast() {\n        this.config.deliver_policy = jsapi_types_1.DeliverPolicy.Last;\n        return this;\n    }\n    deliverNew() {\n        this.config.deliver_policy = jsapi_types_1.DeliverPolicy.New;\n        return this;\n    }\n    startAtTimeDelta(millis) {\n        this.startTime(new Date(Date.now() - millis));\n        return this;\n    }\n    headersOnly() {\n        this.config.headers_only = true;\n        return this;\n    }\n    ackNone() {\n        this.config.ack_policy = jsapi_types_1.AckPolicy.None;\n        return this;\n    }\n    ackAll() {\n        this.config.ack_policy = jsapi_types_1.AckPolicy.All;\n        return this;\n    }\n    ackExplicit() {\n        this.config.ack_policy = jsapi_types_1.AckPolicy.Explicit;\n        return this;\n    }\n    ackWait(millis) {\n        this.config.ack_wait = (0, jsutil_1.nanos)(millis);\n        return this;\n    }\n    maxDeliver(max) {\n        this.config.max_deliver = max;\n        return this;\n    }\n    filterSubject(s) {\n        this.filters = this.filters || [];\n        this.filters.push(s);\n        return this;\n    }\n    replayInstantly() {\n        this.config.replay_policy = jsapi_types_1.ReplayPolicy.Instant;\n        return this;\n    }\n    replayOriginal() {\n        this.config.replay_policy = jsapi_types_1.ReplayPolicy.Original;\n        return this;\n    }\n    sample(n) {\n        n = Math.trunc(n);\n        if (n < 0 || n > 100) {\n            throw new Error(`value must be between 0-100`);\n        }\n        this.config.sample_freq = `${n}%`;\n        return this;\n    }\n    limit(n) {\n        this.config.rate_limit_bps = n;\n        return this;\n    }\n    maxWaiting(max) {\n        this.config.max_waiting = max;\n        return this;\n    }\n    maxAckPending(max) {\n        this.config.max_ack_pending = max;\n        return this;\n    }\n    idleHeartbeat(millis) {\n        this.config.idle_heartbeat = (0, jsutil_1.nanos)(millis);\n        return this;\n    }\n    flowControl() {\n        this.config.flow_control = true;\n        return this;\n    }\n    deliverGroup(name) {\n        this.queue(name);\n        return this;\n    }\n    manualAck() {\n        this.mack = true;\n        return this;\n    }\n    maxMessages(max) {\n        this.max = max;\n        return this;\n    }\n    callback(fn) {\n        this.callbackFn = fn;\n        return this;\n    }\n    queue(n) {\n        this.qname = n;\n        this.config.deliver_group = n;\n        return this;\n    }\n    orderedConsumer() {\n        this.ordered = true;\n        return this;\n    }\n    bind(stream, durable) {\n        this.stream = stream;\n        this.config.durable_name = durable;\n        this.isBind = true;\n        return this;\n    }\n    bindStream(stream) {\n        this.stream = stream;\n        return this;\n    }\n    inactiveEphemeralThreshold(millis) {\n        this.config.inactive_threshold = (0, jsutil_1.nanos)(millis);\n        return this;\n    }\n    maxPullBatch(n) {\n        this.config.max_batch = n;\n        return this;\n    }\n    maxPullRequestExpires(millis) {\n        this.config.max_expires = (0, jsutil_1.nanos)(millis);\n        return this;\n    }\n    memory() {\n        this.config.mem_storage = true;\n        return this;\n    }\n    numReplicas(n) {\n        this.config.num_replicas = n;\n        return this;\n    }\n}\nexports.ConsumerOptsBuilderImpl = ConsumerOptsBuilderImpl;\nfunction consumerOpts(opts) {\n    return new ConsumerOptsBuilderImpl(opts);\n}\nexports.consumerOpts = consumerOpts;\nfunction isConsumerOptsBuilder(o) {\n    return typeof o.getOpts === \"function\";\n}\nexports.isConsumerOptsBuilder = isConsumerOptsBuilder;\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/jetstream/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/authenticator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/authenticator.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.credsAuthenticator = exports.jwtAuthenticator = exports.nkeyAuthenticator = exports.tokenAuthenticator = exports.usernamePasswordAuthenticator = exports.noAuthFn = exports.multiAuthenticator = void 0;\n/*\n * Copyright 2020-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst nkeys_1 = __webpack_require__(/*! ./nkeys */ \"(rsc)/./node_modules/nats/lib/nats-base-client/nkeys.js\");\nconst encoders_1 = __webpack_require__(/*! ./encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nfunction multiAuthenticator(authenticators) {\n    return (nonce) => {\n        let auth = {};\n        authenticators.forEach((a) => {\n            const args = a(nonce) || {};\n            auth = Object.assign(auth, args);\n        });\n        return auth;\n    };\n}\nexports.multiAuthenticator = multiAuthenticator;\nfunction noAuthFn() {\n    return () => {\n        return;\n    };\n}\nexports.noAuthFn = noAuthFn;\n/**\n * Returns a user/pass authenticator for the specified user and optional password\n * @param { string | () => string } user\n * @param {string | () => string } pass\n * @return {UserPass}\n */\nfunction usernamePasswordAuthenticator(user, pass) {\n    return () => {\n        const u = typeof user === \"function\" ? user() : user;\n        const p = typeof pass === \"function\" ? pass() : pass;\n        return { user: u, pass: p };\n    };\n}\nexports.usernamePasswordAuthenticator = usernamePasswordAuthenticator;\n/**\n * Returns a token authenticator for the specified token\n * @param { string | () => string } token\n * @return {TokenAuth}\n */\nfunction tokenAuthenticator(token) {\n    return () => {\n        const auth_token = typeof token === \"function\" ? token() : token;\n        return { auth_token };\n    };\n}\nexports.tokenAuthenticator = tokenAuthenticator;\n/**\n * Returns an Authenticator that returns a NKeyAuth based that uses the\n * specified seed or function returning a seed.\n * @param {Uint8Array | (() => Uint8Array)} seed - the nkey seed\n * @return {NKeyAuth}\n */\nfunction nkeyAuthenticator(seed) {\n    return (nonce) => {\n        const s = typeof seed === \"function\" ? seed() : seed;\n        const kp = s ? nkeys_1.nkeys.fromSeed(s) : undefined;\n        const nkey = kp ? kp.getPublicKey() : \"\";\n        const challenge = encoders_1.TE.encode(nonce || \"\");\n        const sigBytes = kp !== undefined && nonce ? kp.sign(challenge) : undefined;\n        const sig = sigBytes ? nkeys_1.nkeys.encode(sigBytes) : \"\";\n        return { nkey, sig };\n    };\n}\nexports.nkeyAuthenticator = nkeyAuthenticator;\n/**\n * Returns an Authenticator function that returns a JwtAuth.\n * If a seed is provided, the public key, and signature are\n * calculated.\n *\n * @param {string | ()=>string} ajwt - the jwt\n * @param {Uint8Array | ()=> Uint8Array } seed - the optional nkey seed\n * @return {Authenticator}\n */\nfunction jwtAuthenticator(ajwt, seed) {\n    return (nonce) => {\n        const jwt = typeof ajwt === \"function\" ? ajwt() : ajwt;\n        const fn = nkeyAuthenticator(seed);\n        const { nkey, sig } = fn(nonce);\n        return { jwt, nkey, sig };\n    };\n}\nexports.jwtAuthenticator = jwtAuthenticator;\n/**\n * Returns an Authenticator function that returns a JwtAuth.\n * This is a convenience Authenticator that parses the\n * specified creds and delegates to the jwtAuthenticator.\n * @param {Uint8Array | () => Uint8Array } creds - the contents of a creds file or a function that returns the creds\n * @returns {JwtAuth}\n */\nfunction credsAuthenticator(creds) {\n    const fn = typeof creds !== \"function\" ? () => creds : creds;\n    const parse = () => {\n        const CREDS = /\\s*(?:(?:[-]{3,}[^\\n]*[-]{3,}\\n)(.+)(?:\\n\\s*[-]{3,}[^\\n]*[-]{3,}\\n))/ig;\n        const s = encoders_1.TD.decode(fn());\n        // get the JWT\n        let m = CREDS.exec(s);\n        if (!m) {\n            throw core_1.NatsError.errorForCode(core_1.ErrorCode.BadCreds);\n        }\n        const jwt = m[1].trim();\n        // get the nkey\n        m = CREDS.exec(s);\n        if (!m) {\n            throw core_1.NatsError.errorForCode(core_1.ErrorCode.BadCreds);\n        }\n        if (!m) {\n            throw core_1.NatsError.errorForCode(core_1.ErrorCode.BadCreds);\n        }\n        const seed = encoders_1.TE.encode(m[1].trim());\n        return { jwt, seed };\n    };\n    const jwtFn = () => {\n        const { jwt } = parse();\n        return jwt;\n    };\n    const nkeyFn = () => {\n        const { seed } = parse();\n        return seed;\n    };\n    return jwtAuthenticator(jwtFn, nkeyFn);\n}\nexports.credsAuthenticator = credsAuthenticator;\n//# sourceMappingURL=authenticator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/authenticator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/base64.js":
/*!**********************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/base64.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Base64UrlPaddedCodec = exports.Base64UrlCodec = exports.Base64Codec = void 0;\nclass Base64Codec {\n    static encode(bytes) {\n        if (typeof bytes === \"string\") {\n            return btoa(bytes);\n        }\n        const a = Array.from(bytes);\n        return btoa(String.fromCharCode(...a));\n    }\n    static decode(s, binary = false) {\n        const bin = atob(s);\n        if (!binary) {\n            return bin;\n        }\n        return Uint8Array.from(bin, (c) => c.charCodeAt(0));\n    }\n}\nexports.Base64Codec = Base64Codec;\nclass Base64UrlCodec {\n    static encode(bytes) {\n        return Base64UrlCodec.toB64URLEncoding(Base64Codec.encode(bytes));\n    }\n    static decode(s, binary = false) {\n        return Base64Codec.decode(Base64UrlCodec.fromB64URLEncoding(s), binary);\n    }\n    static toB64URLEncoding(b64str) {\n        return b64str\n            .replace(/=/g, \"\")\n            .replace(/\\+/g, \"-\")\n            .replace(/\\//g, \"_\");\n    }\n    static fromB64URLEncoding(b64str) {\n        // pads are % 4, but not necessary on decoding\n        return b64str\n            .replace(/_/g, \"/\")\n            .replace(/-/g, \"+\");\n    }\n}\nexports.Base64UrlCodec = Base64UrlCodec;\nclass Base64UrlPaddedCodec {\n    static encode(bytes) {\n        return Base64UrlPaddedCodec.toB64URLEncoding(Base64Codec.encode(bytes));\n    }\n    static decode(s, binary = false) {\n        return Base64UrlPaddedCodec.decode(Base64UrlPaddedCodec.fromB64URLEncoding(s), binary);\n    }\n    static toB64URLEncoding(b64str) {\n        return b64str\n            .replace(/\\+/g, \"-\")\n            .replace(/\\//g, \"_\");\n    }\n    static fromB64URLEncoding(b64str) {\n        // pads are % 4, but not necessary on decoding\n        return b64str\n            .replace(/_/g, \"/\")\n            .replace(/-/g, \"+\");\n    }\n}\nexports.Base64UrlPaddedCodec = Base64UrlPaddedCodec;\n//# sourceMappingURL=base64.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9iYXNlNjQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCLEdBQUcsc0JBQXNCLEdBQUcsbUJBQW1CO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9uYXRzL2xpYi9uYXRzLWJhc2UtY2xpZW50L2Jhc2U2NC5qcz9kOWU5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CYXNlNjRVcmxQYWRkZWRDb2RlYyA9IGV4cG9ydHMuQmFzZTY0VXJsQ29kZWMgPSBleHBvcnRzLkJhc2U2NENvZGVjID0gdm9pZCAwO1xuY2xhc3MgQmFzZTY0Q29kZWMge1xuICAgIHN0YXRpYyBlbmNvZGUoYnl0ZXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBieXRlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIGJ0b2EoYnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGEgPSBBcnJheS5mcm9tKGJ5dGVzKTtcbiAgICAgICAgcmV0dXJuIGJ0b2EoU3RyaW5nLmZyb21DaGFyQ29kZSguLi5hKSk7XG4gICAgfVxuICAgIHN0YXRpYyBkZWNvZGUocywgYmluYXJ5ID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgYmluID0gYXRvYihzKTtcbiAgICAgICAgaWYgKCFiaW5hcnkpIHtcbiAgICAgICAgICAgIHJldHVybiBiaW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShiaW4sIChjKSA9PiBjLmNoYXJDb2RlQXQoMCkpO1xuICAgIH1cbn1cbmV4cG9ydHMuQmFzZTY0Q29kZWMgPSBCYXNlNjRDb2RlYztcbmNsYXNzIEJhc2U2NFVybENvZGVjIHtcbiAgICBzdGF0aWMgZW5jb2RlKGJ5dGVzKSB7XG4gICAgICAgIHJldHVybiBCYXNlNjRVcmxDb2RlYy50b0I2NFVSTEVuY29kaW5nKEJhc2U2NENvZGVjLmVuY29kZShieXRlcykpO1xuICAgIH1cbiAgICBzdGF0aWMgZGVjb2RlKHMsIGJpbmFyeSA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBCYXNlNjRDb2RlYy5kZWNvZGUoQmFzZTY0VXJsQ29kZWMuZnJvbUI2NFVSTEVuY29kaW5nKHMpLCBiaW5hcnkpO1xuICAgIH1cbiAgICBzdGF0aWMgdG9CNjRVUkxFbmNvZGluZyhiNjRzdHIpIHtcbiAgICAgICAgcmV0dXJuIGI2NHN0clxuICAgICAgICAgICAgLnJlcGxhY2UoLz0vZywgXCJcIilcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXCsvZywgXCItXCIpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwvL2csIFwiX1wiKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CNjRVUkxFbmNvZGluZyhiNjRzdHIpIHtcbiAgICAgICAgLy8gcGFkcyBhcmUgJSA0LCBidXQgbm90IG5lY2Vzc2FyeSBvbiBkZWNvZGluZ1xuICAgICAgICByZXR1cm4gYjY0c3RyXG4gICAgICAgICAgICAucmVwbGFjZSgvXy9nLCBcIi9cIilcbiAgICAgICAgICAgIC5yZXBsYWNlKC8tL2csIFwiK1wiKTtcbiAgICB9XG59XG5leHBvcnRzLkJhc2U2NFVybENvZGVjID0gQmFzZTY0VXJsQ29kZWM7XG5jbGFzcyBCYXNlNjRVcmxQYWRkZWRDb2RlYyB7XG4gICAgc3RhdGljIGVuY29kZShieXRlcykge1xuICAgICAgICByZXR1cm4gQmFzZTY0VXJsUGFkZGVkQ29kZWMudG9CNjRVUkxFbmNvZGluZyhCYXNlNjRDb2RlYy5lbmNvZGUoYnl0ZXMpKTtcbiAgICB9XG4gICAgc3RhdGljIGRlY29kZShzLCBiaW5hcnkgPSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gQmFzZTY0VXJsUGFkZGVkQ29kZWMuZGVjb2RlKEJhc2U2NFVybFBhZGRlZENvZGVjLmZyb21CNjRVUkxFbmNvZGluZyhzKSwgYmluYXJ5KTtcbiAgICB9XG4gICAgc3RhdGljIHRvQjY0VVJMRW5jb2RpbmcoYjY0c3RyKSB7XG4gICAgICAgIHJldHVybiBiNjRzdHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXCsvZywgXCItXCIpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwvL2csIFwiX1wiKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CNjRVUkxFbmNvZGluZyhiNjRzdHIpIHtcbiAgICAgICAgLy8gcGFkcyBhcmUgJSA0LCBidXQgbm90IG5lY2Vzc2FyeSBvbiBkZWNvZGluZ1xuICAgICAgICByZXR1cm4gYjY0c3RyXG4gICAgICAgICAgICAucmVwbGFjZSgvXy9nLCBcIi9cIilcbiAgICAgICAgICAgIC5yZXBsYWNlKC8tL2csIFwiK1wiKTtcbiAgICB9XG59XG5leHBvcnRzLkJhc2U2NFVybFBhZGRlZENvZGVjID0gQmFzZTY0VXJsUGFkZGVkQ29kZWM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/base64.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/bench.js":
/*!*********************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/bench.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright 2020-2022 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.humanizeBytes = exports.msgThroughput = exports.throughput = exports.Bench = exports.Metric = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/nats/lib/nats-base-client/types.js\");\nconst nuid_1 = __webpack_require__(/*! ./nuid */ \"(rsc)/./node_modules/nats/lib/nats-base-client/nuid.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/nats/lib/nats-base-client/util.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nclass Metric {\n    constructor(name, duration) {\n        this.name = name;\n        this.duration = duration;\n        this.date = Date.now();\n        this.payload = 0;\n        this.msgs = 0;\n        this.bytes = 0;\n    }\n    toString() {\n        const sec = (this.duration) / 1000;\n        const mps = Math.round(this.msgs / sec);\n        const label = this.asyncRequests ? \"asyncRequests\" : \"\";\n        let minmax = \"\";\n        if (this.max) {\n            minmax = `${this.min}/${this.max}`;\n        }\n        return `${this.name}${label ? \" [asyncRequests]\" : \"\"} ${humanizeNumber(mps)} msgs/sec - [${sec.toFixed(2)} secs] ~ ${throughput(this.bytes, sec)} ${minmax}`;\n    }\n    toCsv() {\n        return `\"${this.name}\",${new Date(this.date).toISOString()},${this.lang},${this.version},${this.msgs},${this.payload},${this.bytes},${this.duration},${this.asyncRequests ? this.asyncRequests : false}\\n`;\n    }\n    static header() {\n        return `Test,Date,Lang,Version,Count,MsgPayload,Bytes,Millis,Async\\n`;\n    }\n}\nexports.Metric = Metric;\nclass Bench {\n    constructor(nc, opts = {\n        msgs: 100000,\n        size: 128,\n        subject: \"\",\n        asyncRequests: false,\n        pub: false,\n        sub: false,\n        req: false,\n        rep: false,\n    }) {\n        this.nc = nc;\n        this.callbacks = opts.callbacks || false;\n        this.msgs = opts.msgs || 0;\n        this.size = opts.size || 0;\n        this.subject = opts.subject || nuid_1.nuid.next();\n        this.asyncRequests = opts.asyncRequests || false;\n        this.pub = opts.pub || false;\n        this.sub = opts.sub || false;\n        this.req = opts.req || false;\n        this.rep = opts.rep || false;\n        this.perf = new util_1.Perf();\n        this.payload = this.size ? new Uint8Array(this.size) : types_1.Empty;\n        if (!this.pub && !this.sub && !this.req && !this.rep) {\n            throw new Error(\"no bench option selected\");\n        }\n    }\n    run() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.nc.closed()\n                .then((err) => {\n                if (err) {\n                    throw new core_1.NatsError(`bench closed with an error: ${err.message}`, core_1.ErrorCode.Unknown, err);\n                }\n            });\n            if (this.callbacks) {\n                yield this.runCallbacks();\n            }\n            else {\n                yield this.runAsync();\n            }\n            return this.processMetrics();\n        });\n    }\n    processMetrics() {\n        const nc = this.nc;\n        const { lang, version } = nc.protocol.transport;\n        if (this.pub && this.sub) {\n            this.perf.measure(\"pubsub\", \"pubStart\", \"subStop\");\n        }\n        if (this.req && this.rep) {\n            this.perf.measure(\"reqrep\", \"reqStart\", \"reqStop\");\n        }\n        const measures = this.perf.getEntries();\n        const pubsub = measures.find((m) => m.name === \"pubsub\");\n        const reqrep = measures.find((m) => m.name === \"reqrep\");\n        const req = measures.find((m) => m.name === \"req\");\n        const rep = measures.find((m) => m.name === \"rep\");\n        const pub = measures.find((m) => m.name === \"pub\");\n        const sub = measures.find((m) => m.name === \"sub\");\n        const stats = this.nc.stats();\n        const metrics = [];\n        if (pubsub) {\n            const { name, duration } = pubsub;\n            const m = new Metric(name, duration);\n            m.msgs = this.msgs * 2;\n            m.bytes = stats.inBytes + stats.outBytes;\n            m.lang = lang;\n            m.version = version;\n            m.payload = this.payload.length;\n            metrics.push(m);\n        }\n        if (reqrep) {\n            const { name, duration } = reqrep;\n            const m = new Metric(name, duration);\n            m.msgs = this.msgs * 2;\n            m.bytes = stats.inBytes + stats.outBytes;\n            m.lang = lang;\n            m.version = version;\n            m.payload = this.payload.length;\n            metrics.push(m);\n        }\n        if (pub) {\n            const { name, duration } = pub;\n            const m = new Metric(name, duration);\n            m.msgs = this.msgs;\n            m.bytes = stats.outBytes;\n            m.lang = lang;\n            m.version = version;\n            m.payload = this.payload.length;\n            metrics.push(m);\n        }\n        if (sub) {\n            const { name, duration } = sub;\n            const m = new Metric(name, duration);\n            m.msgs = this.msgs;\n            m.bytes = stats.inBytes;\n            m.lang = lang;\n            m.version = version;\n            m.payload = this.payload.length;\n            metrics.push(m);\n        }\n        if (rep) {\n            const { name, duration } = rep;\n            const m = new Metric(name, duration);\n            m.msgs = this.msgs;\n            m.bytes = stats.inBytes + stats.outBytes;\n            m.lang = lang;\n            m.version = version;\n            m.payload = this.payload.length;\n            metrics.push(m);\n        }\n        if (req) {\n            const { name, duration } = req;\n            const m = new Metric(name, duration);\n            m.msgs = this.msgs;\n            m.bytes = stats.inBytes + stats.outBytes;\n            m.lang = lang;\n            m.version = version;\n            m.payload = this.payload.length;\n            metrics.push(m);\n        }\n        return metrics;\n    }\n    runCallbacks() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const jobs = [];\n            if (this.sub) {\n                const d = (0, util_1.deferred)();\n                jobs.push(d);\n                let i = 0;\n                this.nc.subscribe(this.subject, {\n                    max: this.msgs,\n                    callback: () => {\n                        i++;\n                        if (i === 1) {\n                            this.perf.mark(\"subStart\");\n                        }\n                        if (i === this.msgs) {\n                            this.perf.mark(\"subStop\");\n                            this.perf.measure(\"sub\", \"subStart\", \"subStop\");\n                            d.resolve();\n                        }\n                    },\n                });\n            }\n            if (this.rep) {\n                const d = (0, util_1.deferred)();\n                jobs.push(d);\n                let i = 0;\n                this.nc.subscribe(this.subject, {\n                    max: this.msgs,\n                    callback: (_, m) => {\n                        m.respond(this.payload);\n                        i++;\n                        if (i === 1) {\n                            this.perf.mark(\"repStart\");\n                        }\n                        if (i === this.msgs) {\n                            this.perf.mark(\"repStop\");\n                            this.perf.measure(\"rep\", \"repStart\", \"repStop\");\n                            d.resolve();\n                        }\n                    },\n                });\n            }\n            if (this.pub) {\n                const job = (() => __awaiter(this, void 0, void 0, function* () {\n                    this.perf.mark(\"pubStart\");\n                    for (let i = 0; i < this.msgs; i++) {\n                        this.nc.publish(this.subject, this.payload);\n                    }\n                    yield this.nc.flush();\n                    this.perf.mark(\"pubStop\");\n                    this.perf.measure(\"pub\", \"pubStart\", \"pubStop\");\n                }))();\n                jobs.push(job);\n            }\n            if (this.req) {\n                const job = (() => __awaiter(this, void 0, void 0, function* () {\n                    if (this.asyncRequests) {\n                        this.perf.mark(\"reqStart\");\n                        const a = [];\n                        for (let i = 0; i < this.msgs; i++) {\n                            a.push(this.nc.request(this.subject, this.payload, { timeout: 20000 }));\n                        }\n                        yield Promise.all(a);\n                        this.perf.mark(\"reqStop\");\n                        this.perf.measure(\"req\", \"reqStart\", \"reqStop\");\n                    }\n                    else {\n                        this.perf.mark(\"reqStart\");\n                        for (let i = 0; i < this.msgs; i++) {\n                            yield this.nc.request(this.subject);\n                        }\n                        this.perf.mark(\"reqStop\");\n                        this.perf.measure(\"req\", \"reqStart\", \"reqStop\");\n                    }\n                }))();\n                jobs.push(job);\n            }\n            yield Promise.all(jobs);\n        });\n    }\n    runAsync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const jobs = [];\n            if (this.rep) {\n                let first = false;\n                const sub = this.nc.subscribe(this.subject, { max: this.msgs });\n                const job = (() => __awaiter(this, void 0, void 0, function* () {\n                    var _a, e_1, _b, _c;\n                    try {\n                        for (var _d = true, sub_1 = __asyncValues(sub), sub_1_1; sub_1_1 = yield sub_1.next(), _a = sub_1_1.done, !_a; _d = true) {\n                            _c = sub_1_1.value;\n                            _d = false;\n                            const m = _c;\n                            if (!first) {\n                                this.perf.mark(\"repStart\");\n                                first = true;\n                            }\n                            m.respond(this.payload);\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (!_d && !_a && (_b = sub_1.return)) yield _b.call(sub_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                    yield this.nc.flush();\n                    this.perf.mark(\"repStop\");\n                    this.perf.measure(\"rep\", \"repStart\", \"repStop\");\n                }))();\n                jobs.push(job);\n            }\n            if (this.sub) {\n                let first = false;\n                const sub = this.nc.subscribe(this.subject, { max: this.msgs });\n                const job = (() => __awaiter(this, void 0, void 0, function* () {\n                    var _e, e_2, _f, _g;\n                    try {\n                        for (var _h = true, sub_2 = __asyncValues(sub), sub_2_1; sub_2_1 = yield sub_2.next(), _e = sub_2_1.done, !_e; _h = true) {\n                            _g = sub_2_1.value;\n                            _h = false;\n                            const _m = _g;\n                            if (!first) {\n                                this.perf.mark(\"subStart\");\n                                first = true;\n                            }\n                        }\n                    }\n                    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                    finally {\n                        try {\n                            if (!_h && !_e && (_f = sub_2.return)) yield _f.call(sub_2);\n                        }\n                        finally { if (e_2) throw e_2.error; }\n                    }\n                    this.perf.mark(\"subStop\");\n                    this.perf.measure(\"sub\", \"subStart\", \"subStop\");\n                }))();\n                jobs.push(job);\n            }\n            if (this.pub) {\n                const job = (() => __awaiter(this, void 0, void 0, function* () {\n                    this.perf.mark(\"pubStart\");\n                    for (let i = 0; i < this.msgs; i++) {\n                        this.nc.publish(this.subject, this.payload);\n                    }\n                    yield this.nc.flush();\n                    this.perf.mark(\"pubStop\");\n                    this.perf.measure(\"pub\", \"pubStart\", \"pubStop\");\n                }))();\n                jobs.push(job);\n            }\n            if (this.req) {\n                const job = (() => __awaiter(this, void 0, void 0, function* () {\n                    if (this.asyncRequests) {\n                        this.perf.mark(\"reqStart\");\n                        const a = [];\n                        for (let i = 0; i < this.msgs; i++) {\n                            a.push(this.nc.request(this.subject, this.payload, { timeout: 20000 }));\n                        }\n                        yield Promise.all(a);\n                        this.perf.mark(\"reqStop\");\n                        this.perf.measure(\"req\", \"reqStart\", \"reqStop\");\n                    }\n                    else {\n                        this.perf.mark(\"reqStart\");\n                        for (let i = 0; i < this.msgs; i++) {\n                            yield this.nc.request(this.subject);\n                        }\n                        this.perf.mark(\"reqStop\");\n                        this.perf.measure(\"req\", \"reqStart\", \"reqStop\");\n                    }\n                }))();\n                jobs.push(job);\n            }\n            yield Promise.all(jobs);\n        });\n    }\n}\nexports.Bench = Bench;\nfunction throughput(bytes, seconds) {\n    return `${humanizeBytes(bytes / seconds)}/sec`;\n}\nexports.throughput = throughput;\nfunction msgThroughput(msgs, seconds) {\n    return `${(Math.floor(msgs / seconds))} msgs/sec`;\n}\nexports.msgThroughput = msgThroughput;\nfunction humanizeBytes(bytes, si = false) {\n    const base = si ? 1000 : 1024;\n    const pre = si\n        ? [\"k\", \"M\", \"G\", \"T\", \"P\", \"E\"]\n        : [\"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n    const post = si ? \"iB\" : \"B\";\n    if (bytes < base) {\n        return `${bytes.toFixed(2)} ${post}`;\n    }\n    const exp = parseInt(Math.log(bytes) / Math.log(base) + \"\");\n    const index = parseInt((exp - 1) + \"\");\n    return `${(bytes / Math.pow(base, exp)).toFixed(2)} ${pre[index]}${post}`;\n}\nexports.humanizeBytes = humanizeBytes;\nfunction humanizeNumber(n) {\n    return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n//# sourceMappingURL=bench.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/bench.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/codec.js":
/*!*********************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/codec.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2020-2022 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JSONCodec = exports.StringCodec = void 0;\nconst encoders_1 = __webpack_require__(/*! ./encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\n/**\n * Returns a {@link Codec} for encoding strings to a message payload\n * and decoding message payloads into strings.\n * @constructor\n */\nfunction StringCodec() {\n    return {\n        encode(d) {\n            return encoders_1.TE.encode(d);\n        },\n        decode(a) {\n            return encoders_1.TD.decode(a);\n        },\n    };\n}\nexports.StringCodec = StringCodec;\n/**\n * Returns a {@link Codec}  for encoding JavaScript object to JSON and\n * serialize them to an Uint8Array, and conversely, from an\n * Uint8Array to JSON to a JavaScript Object.\n * @param reviver\n * @constructor\n */\nfunction JSONCodec(reviver) {\n    return {\n        encode(d) {\n            try {\n                if (d === undefined) {\n                    // @ts-ignore: json will not handle undefined\n                    d = null;\n                }\n                return encoders_1.TE.encode(JSON.stringify(d));\n            }\n            catch (err) {\n                throw core_1.NatsError.errorForCode(core_1.ErrorCode.BadJson, err);\n            }\n        },\n        decode(a) {\n            try {\n                return JSON.parse(encoders_1.TD.decode(a), reviver);\n            }\n            catch (err) {\n                throw core_1.NatsError.errorForCode(core_1.ErrorCode.BadJson, err);\n            }\n        },\n    };\n}\nexports.JSONCodec = JSONCodec;\n//# sourceMappingURL=codec.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9jb2RlYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLEdBQUcsbUJBQW1CO0FBQ3ZDLG1CQUFtQixtQkFBTyxDQUFDLDhFQUFZO0FBQ3ZDLGVBQWUsbUJBQU8sQ0FBQyxzRUFBUTtBQUMvQjtBQUNBLGNBQWMsYUFBYTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxjQUFjLGNBQWM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9uYXRzL2xpYi9uYXRzLWJhc2UtY2xpZW50L2NvZGVjLmpzPzA0MDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMjAtMjAyMiBUaGUgTkFUUyBBdXRob3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5KU09OQ29kZWMgPSBleHBvcnRzLlN0cmluZ0NvZGVjID0gdm9pZCAwO1xuY29uc3QgZW5jb2RlcnNfMSA9IHJlcXVpcmUoXCIuL2VuY29kZXJzXCIpO1xuY29uc3QgY29yZV8xID0gcmVxdWlyZShcIi4vY29yZVwiKTtcbi8qKlxuICogUmV0dXJucyBhIHtAbGluayBDb2RlY30gZm9yIGVuY29kaW5nIHN0cmluZ3MgdG8gYSBtZXNzYWdlIHBheWxvYWRcbiAqIGFuZCBkZWNvZGluZyBtZXNzYWdlIHBheWxvYWRzIGludG8gc3RyaW5ncy5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTdHJpbmdDb2RlYygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbmNvZGUoZCkge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZXJzXzEuVEUuZW5jb2RlKGQpO1xuICAgICAgICB9LFxuICAgICAgICBkZWNvZGUoYSkge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZXJzXzEuVEQuZGVjb2RlKGEpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnRzLlN0cmluZ0NvZGVjID0gU3RyaW5nQ29kZWM7XG4vKipcbiAqIFJldHVybnMgYSB7QGxpbmsgQ29kZWN9ICBmb3IgZW5jb2RpbmcgSmF2YVNjcmlwdCBvYmplY3QgdG8gSlNPTiBhbmRcbiAqIHNlcmlhbGl6ZSB0aGVtIHRvIGFuIFVpbnQ4QXJyYXksIGFuZCBjb252ZXJzZWx5LCBmcm9tIGFuXG4gKiBVaW50OEFycmF5IHRvIEpTT04gdG8gYSBKYXZhU2NyaXB0IE9iamVjdC5cbiAqIEBwYXJhbSByZXZpdmVyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gSlNPTkNvZGVjKHJldml2ZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbmNvZGUoZCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmU6IGpzb24gd2lsbCBub3QgaGFuZGxlIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICBkID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZXJzXzEuVEUuZW5jb2RlKEpTT04uc3RyaW5naWZ5KGQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBjb3JlXzEuTmF0c0Vycm9yLmVycm9yRm9yQ29kZShjb3JlXzEuRXJyb3JDb2RlLkJhZEpzb24sIGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlY29kZShhKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGVuY29kZXJzXzEuVEQuZGVjb2RlKGEpLCByZXZpdmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBjb3JlXzEuTmF0c0Vycm9yLmVycm9yRm9yQ29kZShjb3JlXzEuRXJyb3JDb2RlLkJhZEpzb24sIGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMuSlNPTkNvZGVjID0gSlNPTkNvZGVjO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29kZWMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/codec.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/core.js":
/*!********************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/core.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright 2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServiceVerb = exports.DEFAULT_HOST = exports.DEFAULT_PORT = exports.createInbox = exports.ServiceError = exports.ServiceErrorCodeHeader = exports.ServiceErrorHeader = exports.ServiceResponseType = exports.syncIterator = exports.RequestStrategy = exports.Match = exports.NatsError = exports.Messages = exports.isNatsError = exports.ErrorCode = exports.DebugEvents = exports.Events = void 0;\nconst nuid_1 = __webpack_require__(/*! ./nuid */ \"(rsc)/./node_modules/nats/lib/nats-base-client/nuid.js\");\n/**\n * Events reported by the {@link NatsConnection#status} iterator.\n */\nvar Events;\n(function (Events) {\n    /** Client disconnected */\n    Events[\"Disconnect\"] = \"disconnect\";\n    /** Client reconnected */\n    Events[\"Reconnect\"] = \"reconnect\";\n    /** Client received a cluster update */\n    Events[\"Update\"] = \"update\";\n    /** Client received a signal telling it that the server is transitioning to Lame Duck Mode */\n    Events[\"LDM\"] = \"ldm\";\n    /** Client received an async error from the server */\n    Events[\"Error\"] = \"error\";\n})(Events || (exports.Events = Events = {}));\n/**\n * Other events that can be reported by the {@link NatsConnection#status} iterator.\n * These can usually be safely ignored, as higher-order functionality of the client\n * will handle them.\n */\nvar DebugEvents;\n(function (DebugEvents) {\n    DebugEvents[\"Reconnecting\"] = \"reconnecting\";\n    DebugEvents[\"PingTimer\"] = \"pingTimer\";\n    DebugEvents[\"StaleConnection\"] = \"staleConnection\";\n    DebugEvents[\"ClientInitiatedReconnect\"] = \"client initiated reconnect\";\n})(DebugEvents || (exports.DebugEvents = DebugEvents = {}));\nvar ErrorCode;\n(function (ErrorCode) {\n    // emitted by the client\n    ErrorCode[\"ApiError\"] = \"BAD API\";\n    ErrorCode[\"BadAuthentication\"] = \"BAD_AUTHENTICATION\";\n    ErrorCode[\"BadCreds\"] = \"BAD_CREDS\";\n    ErrorCode[\"BadHeader\"] = \"BAD_HEADER\";\n    ErrorCode[\"BadJson\"] = \"BAD_JSON\";\n    ErrorCode[\"BadPayload\"] = \"BAD_PAYLOAD\";\n    ErrorCode[\"BadSubject\"] = \"BAD_SUBJECT\";\n    ErrorCode[\"Cancelled\"] = \"CANCELLED\";\n    ErrorCode[\"ConnectionClosed\"] = \"CONNECTION_CLOSED\";\n    ErrorCode[\"ConnectionDraining\"] = \"CONNECTION_DRAINING\";\n    ErrorCode[\"ConnectionRefused\"] = \"CONNECTION_REFUSED\";\n    ErrorCode[\"ConnectionTimeout\"] = \"CONNECTION_TIMEOUT\";\n    ErrorCode[\"Disconnect\"] = \"DISCONNECT\";\n    ErrorCode[\"InvalidOption\"] = \"INVALID_OPTION\";\n    ErrorCode[\"InvalidPayload\"] = \"INVALID_PAYLOAD\";\n    ErrorCode[\"MaxPayloadExceeded\"] = \"MAX_PAYLOAD_EXCEEDED\";\n    ErrorCode[\"NoResponders\"] = \"503\";\n    ErrorCode[\"NotFunction\"] = \"NOT_FUNC\";\n    ErrorCode[\"RequestError\"] = \"REQUEST_ERROR\";\n    ErrorCode[\"ServerOptionNotAvailable\"] = \"SERVER_OPT_NA\";\n    ErrorCode[\"SubClosed\"] = \"SUB_CLOSED\";\n    ErrorCode[\"SubDraining\"] = \"SUB_DRAINING\";\n    ErrorCode[\"Timeout\"] = \"TIMEOUT\";\n    ErrorCode[\"Tls\"] = \"TLS\";\n    ErrorCode[\"Unknown\"] = \"UNKNOWN_ERROR\";\n    ErrorCode[\"WssRequired\"] = \"WSS_REQUIRED\";\n    // jetstream\n    ErrorCode[\"JetStreamInvalidAck\"] = \"JESTREAM_INVALID_ACK\";\n    ErrorCode[\"JetStream404NoMessages\"] = \"404\";\n    ErrorCode[\"JetStream408RequestTimeout\"] = \"408\";\n    //@deprecated: use JetStream409\n    ErrorCode[\"JetStream409MaxAckPendingExceeded\"] = \"409\";\n    ErrorCode[\"JetStream409\"] = \"409\";\n    ErrorCode[\"JetStreamNotEnabled\"] = \"503\";\n    ErrorCode[\"JetStreamIdleHeartBeat\"] = \"IDLE_HEARTBEAT\";\n    // emitted by the server\n    ErrorCode[\"AuthorizationViolation\"] = \"AUTHORIZATION_VIOLATION\";\n    ErrorCode[\"AuthenticationExpired\"] = \"AUTHENTICATION_EXPIRED\";\n    ErrorCode[\"ProtocolError\"] = \"NATS_PROTOCOL_ERR\";\n    ErrorCode[\"PermissionsViolation\"] = \"PERMISSIONS_VIOLATION\";\n    ErrorCode[\"AuthenticationTimeout\"] = \"AUTHENTICATION_TIMEOUT\";\n})(ErrorCode || (exports.ErrorCode = ErrorCode = {}));\nfunction isNatsError(err) {\n    return typeof err.code === \"string\";\n}\nexports.isNatsError = isNatsError;\nclass Messages {\n    constructor() {\n        this.messages = new Map();\n        this.messages.set(ErrorCode.InvalidPayload, \"Invalid payload type - payloads can be 'binary', 'string', or 'json'\");\n        this.messages.set(ErrorCode.BadJson, \"Bad JSON\");\n        this.messages.set(ErrorCode.WssRequired, \"TLS is required, therefore a secure websocket connection is also required\");\n    }\n    static getMessage(s) {\n        return messages.getMessage(s);\n    }\n    getMessage(s) {\n        return this.messages.get(s) || s;\n    }\n}\nexports.Messages = Messages;\n// safari doesn't support static class members\nconst messages = new Messages();\nclass NatsError extends Error {\n    /**\n     * @param {String} message\n     * @param {String} code\n     * @param {Error} [chainedError]\n     * @constructor\n     *\n     * @api private\n     */\n    constructor(message, code, chainedError) {\n        super(message);\n        this.name = \"NatsError\";\n        this.message = message;\n        this.code = code;\n        this.chainedError = chainedError;\n    }\n    static errorForCode(code, chainedError) {\n        const m = Messages.getMessage(code);\n        return new NatsError(m, code, chainedError);\n    }\n    isAuthError() {\n        return this.code === ErrorCode.AuthenticationExpired ||\n            this.code === ErrorCode.AuthorizationViolation;\n    }\n    isAuthTimeout() {\n        return this.code === ErrorCode.AuthenticationTimeout;\n    }\n    isPermissionError() {\n        return this.code === ErrorCode.PermissionsViolation;\n    }\n    isProtocolError() {\n        return this.code === ErrorCode.ProtocolError;\n    }\n    isJetStreamError() {\n        return this.api_error !== undefined;\n    }\n    jsError() {\n        return this.api_error ? this.api_error : null;\n    }\n}\nexports.NatsError = NatsError;\nvar Match;\n(function (Match) {\n    // Exact option is case sensitive\n    Match[Match[\"Exact\"] = 0] = \"Exact\";\n    // Case sensitive, but key is transformed to Canonical MIME representation\n    Match[Match[\"CanonicalMIME\"] = 1] = \"CanonicalMIME\";\n    // Case insensitive matches\n    Match[Match[\"IgnoreCase\"] = 2] = \"IgnoreCase\";\n})(Match || (exports.Match = Match = {}));\nvar RequestStrategy;\n(function (RequestStrategy) {\n    RequestStrategy[\"Timer\"] = \"timer\";\n    RequestStrategy[\"Count\"] = \"count\";\n    RequestStrategy[\"JitterTimer\"] = \"jitterTimer\";\n    RequestStrategy[\"SentinelMsg\"] = \"sentinelMsg\";\n})(RequestStrategy || (exports.RequestStrategy = RequestStrategy = {}));\n/**\n * syncIterator is a utility function that allows an AsyncIterator to be triggered\n * by calling next() - the utility will yield null if the underlying iterator is closed.\n * Note it is possibly an error to call use this function on an AsyncIterable that has\n * already been started (Symbol.asyncIterator() has been called) from a looping construct.\n */\nfunction syncIterator(src) {\n    const iter = src[Symbol.asyncIterator]();\n    return {\n        next() {\n            return __awaiter(this, void 0, void 0, function* () {\n                const m = yield iter.next();\n                if (m.done) {\n                    return Promise.resolve(null);\n                }\n                return Promise.resolve(m.value);\n            });\n        },\n    };\n}\nexports.syncIterator = syncIterator;\nvar ServiceResponseType;\n(function (ServiceResponseType) {\n    ServiceResponseType[\"STATS\"] = \"io.nats.micro.v1.stats_response\";\n    ServiceResponseType[\"INFO\"] = \"io.nats.micro.v1.info_response\";\n    ServiceResponseType[\"PING\"] = \"io.nats.micro.v1.ping_response\";\n})(ServiceResponseType || (exports.ServiceResponseType = ServiceResponseType = {}));\nexports.ServiceErrorHeader = \"Nats-Service-Error\";\nexports.ServiceErrorCodeHeader = \"Nats-Service-Error-Code\";\nclass ServiceError extends Error {\n    constructor(code, message) {\n        super(message);\n        this.code = code;\n    }\n    static isServiceError(msg) {\n        return ServiceError.toServiceError(msg) !== null;\n    }\n    static toServiceError(msg) {\n        var _a, _b;\n        const scode = ((_a = msg === null || msg === void 0 ? void 0 : msg.headers) === null || _a === void 0 ? void 0 : _a.get(exports.ServiceErrorCodeHeader)) || \"\";\n        if (scode !== \"\") {\n            const code = parseInt(scode) || 400;\n            const description = ((_b = msg === null || msg === void 0 ? void 0 : msg.headers) === null || _b === void 0 ? void 0 : _b.get(exports.ServiceErrorHeader)) || \"\";\n            return new ServiceError(code, description.length ? description : scode);\n        }\n        return null;\n    }\n}\nexports.ServiceError = ServiceError;\nfunction createInbox(prefix = \"\") {\n    prefix = prefix || \"_INBOX\";\n    if (typeof prefix !== \"string\") {\n        throw (new Error(\"prefix must be a string\"));\n    }\n    prefix.split(\".\")\n        .forEach((v) => {\n        if (v === \"*\" || v === \">\") {\n            throw new Error(`inbox prefixes cannot have wildcards '${prefix}'`);\n        }\n    });\n    return `${prefix}.${nuid_1.nuid.next()}`;\n}\nexports.createInbox = createInbox;\nexports.DEFAULT_PORT = 4222;\nexports.DEFAULT_HOST = \"127.0.0.1\";\nvar ServiceVerb;\n(function (ServiceVerb) {\n    ServiceVerb[\"PING\"] = \"PING\";\n    ServiceVerb[\"STATS\"] = \"STATS\";\n    ServiceVerb[\"INFO\"] = \"INFO\";\n})(ServiceVerb || (exports.ServiceVerb = ServiceVerb = {}));\n//# sourceMappingURL=core.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/databuffer.js":
/*!**************************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/databuffer.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018-2021 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DataBuffer = void 0;\nconst encoders_1 = __webpack_require__(/*! ./encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nclass DataBuffer {\n    constructor() {\n        this.buffers = [];\n        this.byteLength = 0;\n    }\n    static concat(...bufs) {\n        let max = 0;\n        for (let i = 0; i < bufs.length; i++) {\n            max += bufs[i].length;\n        }\n        const out = new Uint8Array(max);\n        let index = 0;\n        for (let i = 0; i < bufs.length; i++) {\n            out.set(bufs[i], index);\n            index += bufs[i].length;\n        }\n        return out;\n    }\n    static fromAscii(m) {\n        if (!m) {\n            m = \"\";\n        }\n        return encoders_1.TE.encode(m);\n    }\n    static toAscii(a) {\n        return encoders_1.TD.decode(a);\n    }\n    reset() {\n        this.buffers.length = 0;\n        this.byteLength = 0;\n    }\n    pack() {\n        if (this.buffers.length > 1) {\n            const v = new Uint8Array(this.byteLength);\n            let index = 0;\n            for (let i = 0; i < this.buffers.length; i++) {\n                v.set(this.buffers[i], index);\n                index += this.buffers[i].length;\n            }\n            this.buffers.length = 0;\n            this.buffers.push(v);\n        }\n    }\n    shift() {\n        if (this.buffers.length) {\n            const a = this.buffers.shift();\n            if (a) {\n                this.byteLength -= a.length;\n                return a;\n            }\n        }\n        return new Uint8Array(0);\n    }\n    drain(n) {\n        if (this.buffers.length) {\n            this.pack();\n            const v = this.buffers.pop();\n            if (v) {\n                const max = this.byteLength;\n                if (n === undefined || n > max) {\n                    n = max;\n                }\n                const d = v.subarray(0, n);\n                if (max > n) {\n                    this.buffers.push(v.subarray(n));\n                }\n                this.byteLength = max - n;\n                return d;\n            }\n        }\n        return new Uint8Array(0);\n    }\n    fill(a, ...bufs) {\n        if (a) {\n            this.buffers.push(a);\n            this.byteLength += a.length;\n        }\n        for (let i = 0; i < bufs.length; i++) {\n            if (bufs[i] && bufs[i].length) {\n                this.buffers.push(bufs[i]);\n                this.byteLength += bufs[i].length;\n            }\n        }\n    }\n    peek() {\n        if (this.buffers.length) {\n            this.pack();\n            return this.buffers[0];\n        }\n        return new Uint8Array(0);\n    }\n    size() {\n        return this.byteLength;\n    }\n    length() {\n        return this.buffers.length;\n    }\n}\nexports.DataBuffer = DataBuffer;\n//# sourceMappingURL=databuffer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9kYXRhYnVmZmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEIsbUJBQW1CLG1CQUFPLENBQUMsOEVBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGlCQUFpQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix5QkFBeUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL25hdHMvbGliL25hdHMtYmFzZS1jbGllbnQvZGF0YWJ1ZmZlci5qcz9jNjg5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE4LTIwMjEgVGhlIE5BVFMgQXV0aG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGF0YUJ1ZmZlciA9IHZvaWQgMDtcbmNvbnN0IGVuY29kZXJzXzEgPSByZXF1aXJlKFwiLi9lbmNvZGVyc1wiKTtcbmNsYXNzIERhdGFCdWZmZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5ieXRlTGVuZ3RoID0gMDtcbiAgICB9XG4gICAgc3RhdGljIGNvbmNhdCguLi5idWZzKSB7XG4gICAgICAgIGxldCBtYXggPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG1heCArPSBidWZzW2ldLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheShtYXgpO1xuICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG91dC5zZXQoYnVmc1tpXSwgaW5kZXgpO1xuICAgICAgICAgICAgaW5kZXggKz0gYnVmc1tpXS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Bc2NpaShtKSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgbSA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVuY29kZXJzXzEuVEUuZW5jb2RlKG0pO1xuICAgIH1cbiAgICBzdGF0aWMgdG9Bc2NpaShhKSB7XG4gICAgICAgIHJldHVybiBlbmNvZGVyc18xLlRELmRlY29kZShhKTtcbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuYnVmZmVycy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLmJ5dGVMZW5ndGggPSAwO1xuICAgIH1cbiAgICBwYWNrKCkge1xuICAgICAgICBpZiAodGhpcy5idWZmZXJzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSBuZXcgVWludDhBcnJheSh0aGlzLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5idWZmZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdi5zZXQodGhpcy5idWZmZXJzW2ldLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgaW5kZXggKz0gdGhpcy5idWZmZXJzW2ldLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYnVmZmVycy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgdGhpcy5idWZmZXJzLnB1c2godik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2hpZnQoKSB7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBhID0gdGhpcy5idWZmZXJzLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAoYSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZUxlbmd0aCAtPSBhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7XG4gICAgfVxuICAgIGRyYWluKG4pIHtcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMucGFjaygpO1xuICAgICAgICAgICAgY29uc3QgdiA9IHRoaXMuYnVmZmVycy5wb3AoKTtcbiAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChuID09PSB1bmRlZmluZWQgfHwgbiA+IG1heCkge1xuICAgICAgICAgICAgICAgICAgICBuID0gbWF4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBkID0gdi5zdWJhcnJheSgwLCBuKTtcbiAgICAgICAgICAgICAgICBpZiAobWF4ID4gbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcnMucHVzaCh2LnN1YmFycmF5KG4pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5ieXRlTGVuZ3RoID0gbWF4IC0gbjtcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7XG4gICAgfVxuICAgIGZpbGwoYSwgLi4uYnVmcykge1xuICAgICAgICBpZiAoYSkge1xuICAgICAgICAgICAgdGhpcy5idWZmZXJzLnB1c2goYSk7XG4gICAgICAgICAgICB0aGlzLmJ5dGVMZW5ndGggKz0gYS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYnVmc1tpXSAmJiBidWZzW2ldLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKGJ1ZnNbaV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZUxlbmd0aCArPSBidWZzW2ldLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBwZWVrKCkge1xuICAgICAgICBpZiAodGhpcy5idWZmZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5wYWNrKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJzWzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSgwKTtcbiAgICB9XG4gICAgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnl0ZUxlbmd0aDtcbiAgICB9XG4gICAgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJzLmxlbmd0aDtcbiAgICB9XG59XG5leHBvcnRzLkRhdGFCdWZmZXIgPSBEYXRhQnVmZmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YWJ1ZmZlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/databuffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/denobuffer.js":
/*!**************************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/denobuffer.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2018-2021 the Deno authors. All rights reserved. MIT license.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.writeAll = exports.readAll = exports.DenoBuffer = exports.append = exports.concat = exports.MAX_SIZE = exports.assert = exports.AssertionError = void 0;\n// This code has been ported almost directly from Go's src/bytes/buffer.go\n// Copyright 2009 The Go Authors. All rights reserved. BSD license.\n// https://github.com/golang/go/blob/master/LICENSE\n// This code removes all Deno specific functionality to enable its use\n// in a browser environment\n//@internal\nconst encoders_1 = __webpack_require__(/*! ./encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nclass AssertionError extends Error {\n    constructor(msg) {\n        super(msg);\n        this.name = \"AssertionError\";\n    }\n}\nexports.AssertionError = AssertionError;\n// @internal\nfunction assert(cond, msg = \"Assertion failed.\") {\n    if (!cond) {\n        throw new AssertionError(msg);\n    }\n}\nexports.assert = assert;\n// MIN_READ is the minimum ArrayBuffer size passed to a read call by\n// buffer.ReadFrom. As long as the Buffer has at least MIN_READ bytes beyond\n// what is required to hold the contents of r, readFrom() will not grow the\n// underlying buffer.\nconst MIN_READ = 32 * 1024;\nexports.MAX_SIZE = Math.pow(2, 32) - 2;\n// `off` is the offset into `dst` where it will at which to begin writing values\n// from `src`.\n// Returns the number of bytes copied.\nfunction copy(src, dst, off = 0) {\n    const r = dst.byteLength - off;\n    if (src.byteLength > r) {\n        src = src.subarray(0, r);\n    }\n    dst.set(src, off);\n    return src.byteLength;\n}\nfunction concat(origin, b) {\n    if (origin === undefined && b === undefined) {\n        return new Uint8Array(0);\n    }\n    if (origin === undefined) {\n        return b;\n    }\n    if (b === undefined) {\n        return origin;\n    }\n    const output = new Uint8Array(origin.length + b.length);\n    output.set(origin, 0);\n    output.set(b, origin.length);\n    return output;\n}\nexports.concat = concat;\nfunction append(origin, b) {\n    return concat(origin, Uint8Array.of(b));\n}\nexports.append = append;\nclass DenoBuffer {\n    constructor(ab) {\n        this._off = 0;\n        if (ab == null) {\n            this._buf = new Uint8Array(0);\n            return;\n        }\n        this._buf = new Uint8Array(ab);\n    }\n    bytes(options = { copy: true }) {\n        if (options.copy === false)\n            return this._buf.subarray(this._off);\n        return this._buf.slice(this._off);\n    }\n    empty() {\n        return this._buf.byteLength <= this._off;\n    }\n    get length() {\n        return this._buf.byteLength - this._off;\n    }\n    get capacity() {\n        return this._buf.buffer.byteLength;\n    }\n    truncate(n) {\n        if (n === 0) {\n            this.reset();\n            return;\n        }\n        if (n < 0 || n > this.length) {\n            throw Error(\"bytes.Buffer: truncation out of range\");\n        }\n        this._reslice(this._off + n);\n    }\n    reset() {\n        this._reslice(0);\n        this._off = 0;\n    }\n    _tryGrowByReslice(n) {\n        const l = this._buf.byteLength;\n        if (n <= this.capacity - l) {\n            this._reslice(l + n);\n            return l;\n        }\n        return -1;\n    }\n    _reslice(len) {\n        assert(len <= this._buf.buffer.byteLength);\n        this._buf = new Uint8Array(this._buf.buffer, 0, len);\n    }\n    readByte() {\n        const a = new Uint8Array(1);\n        if (this.read(a)) {\n            return a[0];\n        }\n        return null;\n    }\n    read(p) {\n        if (this.empty()) {\n            // Buffer is empty, reset to recover space.\n            this.reset();\n            if (p.byteLength === 0) {\n                // this edge case is tested in 'bufferReadEmptyAtEOF' test\n                return 0;\n            }\n            return null;\n        }\n        const nread = copy(this._buf.subarray(this._off), p);\n        this._off += nread;\n        return nread;\n    }\n    writeByte(n) {\n        return this.write(Uint8Array.of(n));\n    }\n    writeString(s) {\n        return this.write(encoders_1.TE.encode(s));\n    }\n    write(p) {\n        const m = this._grow(p.byteLength);\n        return copy(p, this._buf, m);\n    }\n    _grow(n) {\n        const m = this.length;\n        // If buffer is empty, reset to recover space.\n        if (m === 0 && this._off !== 0) {\n            this.reset();\n        }\n        // Fast: Try to _grow by means of a _reslice.\n        const i = this._tryGrowByReslice(n);\n        if (i >= 0) {\n            return i;\n        }\n        const c = this.capacity;\n        if (n <= Math.floor(c / 2) - m) {\n            // We can slide things down instead of allocating a new\n            // ArrayBuffer. We only need m+n <= c to slide, but\n            // we instead let capacity get twice as large so we\n            // don't spend all our time copying.\n            copy(this._buf.subarray(this._off), this._buf);\n        }\n        else if (c + n > exports.MAX_SIZE) {\n            throw new Error(\"The buffer cannot be grown beyond the maximum size.\");\n        }\n        else {\n            // Not enough space anywhere, we need to allocate.\n            const buf = new Uint8Array(Math.min(2 * c + n, exports.MAX_SIZE));\n            copy(this._buf.subarray(this._off), buf);\n            this._buf = buf;\n        }\n        // Restore this.off and len(this._buf).\n        this._off = 0;\n        this._reslice(Math.min(m + n, exports.MAX_SIZE));\n        return m;\n    }\n    grow(n) {\n        if (n < 0) {\n            throw Error(\"Buffer._grow: negative count\");\n        }\n        const m = this._grow(n);\n        this._reslice(m);\n    }\n    readFrom(r) {\n        let n = 0;\n        const tmp = new Uint8Array(MIN_READ);\n        while (true) {\n            const shouldGrow = this.capacity - this.length < MIN_READ;\n            // read into tmp buffer if there's not enough room\n            // otherwise read directly into the internal buffer\n            const buf = shouldGrow\n                ? tmp\n                : new Uint8Array(this._buf.buffer, this.length);\n            const nread = r.read(buf);\n            if (nread === null) {\n                return n;\n            }\n            // write will grow if needed\n            if (shouldGrow)\n                this.write(buf.subarray(0, nread));\n            else\n                this._reslice(this.length + nread);\n            n += nread;\n        }\n    }\n}\nexports.DenoBuffer = DenoBuffer;\nfunction readAll(r) {\n    const buf = new DenoBuffer();\n    buf.readFrom(r);\n    return buf.bytes();\n}\nexports.readAll = readAll;\nfunction writeAll(w, arr) {\n    let nwritten = 0;\n    while (nwritten < arr.length) {\n        nwritten += w.write(arr.subarray(nwritten));\n    }\n}\nexports.writeAll = writeAll;\n//# sourceMappingURL=denobuffer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/denobuffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js":
/*!************************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/encoders.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decode = exports.encode = exports.TD = exports.TE = exports.Empty = void 0;\n/*\n * Copyright 2020 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexports.Empty = new Uint8Array(0);\nexports.TE = new TextEncoder();\nexports.TD = new TextDecoder();\nfunction concat(...bufs) {\n    let max = 0;\n    for (let i = 0; i < bufs.length; i++) {\n        max += bufs[i].length;\n    }\n    const out = new Uint8Array(max);\n    let index = 0;\n    for (let i = 0; i < bufs.length; i++) {\n        out.set(bufs[i], index);\n        index += bufs[i].length;\n    }\n    return out;\n}\nfunction encode(...a) {\n    const bufs = [];\n    for (let i = 0; i < a.length; i++) {\n        bufs.push(exports.TE.encode(a[i]));\n    }\n    if (bufs.length === 0) {\n        return exports.Empty;\n    }\n    if (bufs.length === 1) {\n        return bufs[0];\n    }\n    return concat(...bufs);\n}\nexports.encode = encode;\nfunction decode(a) {\n    if (!a || a.length === 0) {\n        return \"\";\n    }\n    return exports.TD.decode(a);\n}\nexports.decode = decode;\n//# sourceMappingURL=encoders.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9lbmNvZGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjLEdBQUcsY0FBYyxHQUFHLFVBQVUsR0FBRyxVQUFVLEdBQUcsYUFBYTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFVBQVU7QUFDVixVQUFVO0FBQ1Y7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGNBQWM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9lbmNvZGVycy5qcz9jYTE3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGUgPSBleHBvcnRzLmVuY29kZSA9IGV4cG9ydHMuVEQgPSBleHBvcnRzLlRFID0gZXhwb3J0cy5FbXB0eSA9IHZvaWQgMDtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBUaGUgTkFUUyBBdXRob3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0cy5FbXB0eSA9IG5ldyBVaW50OEFycmF5KDApO1xuZXhwb3J0cy5URSA9IG5ldyBUZXh0RW5jb2RlcigpO1xuZXhwb3J0cy5URCA9IG5ldyBUZXh0RGVjb2RlcigpO1xuZnVuY3Rpb24gY29uY2F0KC4uLmJ1ZnMpIHtcbiAgICBsZXQgbWF4ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbWF4ICs9IGJ1ZnNbaV0ubGVuZ3RoO1xuICAgIH1cbiAgICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheShtYXgpO1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG91dC5zZXQoYnVmc1tpXSwgaW5kZXgpO1xuICAgICAgICBpbmRleCArPSBidWZzW2ldLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIGVuY29kZSguLi5hKSB7XG4gICAgY29uc3QgYnVmcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBidWZzLnB1c2goZXhwb3J0cy5URS5lbmNvZGUoYVtpXSkpO1xuICAgIH1cbiAgICBpZiAoYnVmcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuRW1wdHk7XG4gICAgfVxuICAgIGlmIChidWZzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gYnVmc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmNhdCguLi5idWZzKTtcbn1cbmV4cG9ydHMuZW5jb2RlID0gZW5jb2RlO1xuZnVuY3Rpb24gZGVjb2RlKGEpIHtcbiAgICBpZiAoIWEgfHwgYS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIHJldHVybiBleHBvcnRzLlRELmRlY29kZShhKTtcbn1cbmV4cG9ydHMuZGVjb2RlID0gZGVjb2RlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5jb2RlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/headers.js":
/*!***********************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/headers.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2020-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MsgHdrsImpl = exports.headers = exports.canonicalMIMEHeaderKey = void 0;\n// Heavily inspired by Golang's https://golang.org/src/net/http/header.go\nconst encoders_1 = __webpack_require__(/*! ./encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\n// https://www.ietf.org/rfc/rfc822.txt\n// 3.1.2.  STRUCTURE OF HEADER FIELDS\n//\n// Once a field has been unfolded, it may be viewed as being com-\n// posed of a field-name followed by a colon (\":\"), followed by a\n// field-body, and  terminated  by  a  carriage-return/line-feed.\n// The  field-name must be composed of printable ASCII characters\n// (i.e., characters that  have  values  between  33.  and  126.,\n// decimal, except colon).  The field-body may be composed of any\n// ASCII characters, except CR or LF.  (While CR and/or LF may be\n// present  in the actual text, they are removed by the action of\n// unfolding the field.)\nfunction canonicalMIMEHeaderKey(k) {\n    const a = 97;\n    const A = 65;\n    const Z = 90;\n    const z = 122;\n    const dash = 45;\n    const colon = 58;\n    const start = 33;\n    const end = 126;\n    const toLower = a - A;\n    let upper = true;\n    const buf = new Array(k.length);\n    for (let i = 0; i < k.length; i++) {\n        let c = k.charCodeAt(i);\n        if (c === colon || c < start || c > end) {\n            throw new core_1.NatsError(`'${k[i]}' is not a valid character for a header key`, core_1.ErrorCode.BadHeader);\n        }\n        if (upper && a <= c && c <= z) {\n            c -= toLower;\n        }\n        else if (!upper && A <= c && c <= Z) {\n            c += toLower;\n        }\n        buf[i] = c;\n        upper = c == dash;\n    }\n    return String.fromCharCode(...buf);\n}\nexports.canonicalMIMEHeaderKey = canonicalMIMEHeaderKey;\nfunction headers(code = 0, description = \"\") {\n    if ((code === 0 && description !== \"\") || (code > 0 && description === \"\")) {\n        throw new Error(\"setting status requires both code and description\");\n    }\n    return new MsgHdrsImpl(code, description);\n}\nexports.headers = headers;\nconst HEADER = \"NATS/1.0\";\nclass MsgHdrsImpl {\n    constructor(code = 0, description = \"\") {\n        this._code = code;\n        this._description = description;\n        this.headers = new Map();\n    }\n    [Symbol.iterator]() {\n        return this.headers.entries();\n    }\n    size() {\n        return this.headers.size;\n    }\n    equals(mh) {\n        if (mh && this.headers.size === mh.headers.size &&\n            this._code === mh._code) {\n            for (const [k, v] of this.headers) {\n                const a = mh.values(k);\n                if (v.length !== a.length) {\n                    return false;\n                }\n                const vv = [...v].sort();\n                const aa = [...a].sort();\n                for (let i = 0; i < vv.length; i++) {\n                    if (vv[i] !== aa[i]) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    static decode(a) {\n        const mh = new MsgHdrsImpl();\n        const s = encoders_1.TD.decode(a);\n        const lines = s.split(\"\\r\\n\");\n        const h = lines[0];\n        if (h !== HEADER) {\n            // malformed headers could add extra space without adding a code or description\n            let str = h.replace(HEADER, \"\").trim();\n            if (str.length > 0) {\n                mh._code = parseInt(str, 10);\n                if (isNaN(mh._code)) {\n                    mh._code = 0;\n                }\n                const scode = mh._code.toString();\n                str = str.replace(scode, \"\");\n                mh._description = str.trim();\n            }\n        }\n        if (lines.length >= 1) {\n            lines.slice(1).map((s) => {\n                if (s) {\n                    const idx = s.indexOf(\":\");\n                    if (idx > -1) {\n                        const k = s.slice(0, idx);\n                        const v = s.slice(idx + 1).trim();\n                        mh.append(k, v);\n                    }\n                }\n            });\n        }\n        return mh;\n    }\n    toString() {\n        if (this.headers.size === 0 && this._code === 0) {\n            return \"\";\n        }\n        let s = HEADER;\n        if (this._code > 0 && this._description !== \"\") {\n            s += ` ${this._code} ${this._description}`;\n        }\n        for (const [k, v] of this.headers) {\n            for (let i = 0; i < v.length; i++) {\n                s = `${s}\\r\\n${k}: ${v[i]}`;\n            }\n        }\n        return `${s}\\r\\n\\r\\n`;\n    }\n    encode() {\n        return encoders_1.TE.encode(this.toString());\n    }\n    static validHeaderValue(k) {\n        const inv = /[\\r\\n]/;\n        if (inv.test(k)) {\n            throw new core_1.NatsError(\"invalid header value - \\\\r and \\\\n are not allowed.\", core_1.ErrorCode.BadHeader);\n        }\n        return k.trim();\n    }\n    keys() {\n        const keys = [];\n        for (const sk of this.headers.keys()) {\n            keys.push(sk);\n        }\n        return keys;\n    }\n    findKeys(k, match = core_1.Match.Exact) {\n        const keys = this.keys();\n        switch (match) {\n            case core_1.Match.Exact:\n                return keys.filter((v) => {\n                    return v === k;\n                });\n            case core_1.Match.CanonicalMIME:\n                k = canonicalMIMEHeaderKey(k);\n                return keys.filter((v) => {\n                    return v === k;\n                });\n            default: {\n                const lci = k.toLowerCase();\n                return keys.filter((v) => {\n                    return lci === v.toLowerCase();\n                });\n            }\n        }\n    }\n    get(k, match = core_1.Match.Exact) {\n        const keys = this.findKeys(k, match);\n        if (keys.length) {\n            const v = this.headers.get(keys[0]);\n            if (v) {\n                return Array.isArray(v) ? v[0] : v;\n            }\n        }\n        return \"\";\n    }\n    last(k, match = core_1.Match.Exact) {\n        const keys = this.findKeys(k, match);\n        if (keys.length) {\n            const v = this.headers.get(keys[0]);\n            if (v) {\n                return Array.isArray(v) ? v[v.length - 1] : v;\n            }\n        }\n        return \"\";\n    }\n    has(k, match = core_1.Match.Exact) {\n        return this.findKeys(k, match).length > 0;\n    }\n    set(k, v, match = core_1.Match.Exact) {\n        this.delete(k, match);\n        this.append(k, v, match);\n    }\n    append(k, v, match = core_1.Match.Exact) {\n        // validate the key\n        const ck = canonicalMIMEHeaderKey(k);\n        if (match === core_1.Match.CanonicalMIME) {\n            k = ck;\n        }\n        // if we get non-sensical ignores/etc, we should try\n        // to do the right thing and use the first key that matches\n        const keys = this.findKeys(k, match);\n        k = keys.length > 0 ? keys[0] : k;\n        const value = MsgHdrsImpl.validHeaderValue(v);\n        let a = this.headers.get(k);\n        if (!a) {\n            a = [];\n            this.headers.set(k, a);\n        }\n        a.push(value);\n    }\n    values(k, match = core_1.Match.Exact) {\n        const buf = [];\n        const keys = this.findKeys(k, match);\n        keys.forEach((v) => {\n            const values = this.headers.get(v);\n            if (values) {\n                buf.push(...values);\n            }\n        });\n        return buf;\n    }\n    delete(k, match = core_1.Match.Exact) {\n        const keys = this.findKeys(k, match);\n        keys.forEach((v) => {\n            this.headers.delete(v);\n        });\n    }\n    get hasError() {\n        return this._code >= 300;\n    }\n    get status() {\n        return `${this._code} ${this._description}`.trim();\n    }\n    toRecord() {\n        const data = {};\n        this.keys().forEach((v) => {\n            data[v] = this.values(v);\n        });\n        return data;\n    }\n    get code() {\n        return this._code;\n    }\n    get description() {\n        return this._description;\n    }\n    static fromRecord(r) {\n        const h = new MsgHdrsImpl();\n        for (const k in r) {\n            h.headers.set(k, r[k]);\n        }\n        return h;\n    }\n}\nexports.MsgHdrsImpl = MsgHdrsImpl;\n//# sourceMappingURL=headers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/heartbeats.js":
/*!**************************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/heartbeats.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Heartbeat = void 0;\n/*\n * Copyright 2020-2021 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/nats/lib/nats-base-client/util.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nclass Heartbeat {\n    constructor(ph, interval, maxOut) {\n        this.ph = ph;\n        this.interval = interval;\n        this.maxOut = maxOut;\n        this.pendings = [];\n    }\n    // api to start the heartbeats, since this can be\n    // spuriously called from dial, ensure we don't\n    // leak timers\n    start() {\n        this.cancel();\n        this._schedule();\n    }\n    // api for canceling the heartbeats, if stale is\n    // true it will initiate a client disconnect\n    cancel(stale) {\n        if (this.timer) {\n            clearTimeout(this.timer);\n            this.timer = undefined;\n        }\n        this._reset();\n        if (stale) {\n            this.ph.disconnect();\n        }\n    }\n    _schedule() {\n        // @ts-ignore: node is not a number - we treat this opaquely\n        this.timer = setTimeout(() => {\n            this.ph.dispatchStatus({ type: core_1.DebugEvents.PingTimer, data: `${this.pendings.length + 1}` });\n            if (this.pendings.length === this.maxOut) {\n                this.cancel(true);\n                return;\n            }\n            const ping = (0, util_1.deferred)();\n            this.ph.flush(ping)\n                .then(() => {\n                this._reset();\n            })\n                .catch(() => {\n                // we disconnected - pongs were rejected\n                this.cancel();\n            });\n            this.pendings.push(ping);\n            this._schedule();\n        }, this.interval);\n    }\n    _reset() {\n        // clear pendings after resolving them\n        this.pendings = this.pendings.filter((p) => {\n            const d = p;\n            d.resolve();\n            return false;\n        });\n    }\n}\nexports.Heartbeat = Heartbeat;\n//# sourceMappingURL=heartbeats.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9oZWFydGJlYXRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLHNFQUFRO0FBQy9CLGVBQWUsbUJBQU8sQ0FBQyxzRUFBUTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDZDQUE2Qyx5QkFBeUIsR0FBRztBQUM5RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9uYXRzL2xpYi9uYXRzLWJhc2UtY2xpZW50L2hlYXJ0YmVhdHMuanM/N2VjNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSGVhcnRiZWF0ID0gdm9pZCAwO1xuLypcbiAqIENvcHlyaWdodCAyMDIwLTIwMjEgVGhlIE5BVFMgQXV0aG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiLi9jb3JlXCIpO1xuY2xhc3MgSGVhcnRiZWF0IHtcbiAgICBjb25zdHJ1Y3RvcihwaCwgaW50ZXJ2YWwsIG1heE91dCkge1xuICAgICAgICB0aGlzLnBoID0gcGg7XG4gICAgICAgIHRoaXMuaW50ZXJ2YWwgPSBpbnRlcnZhbDtcbiAgICAgICAgdGhpcy5tYXhPdXQgPSBtYXhPdXQ7XG4gICAgICAgIHRoaXMucGVuZGluZ3MgPSBbXTtcbiAgICB9XG4gICAgLy8gYXBpIHRvIHN0YXJ0IHRoZSBoZWFydGJlYXRzLCBzaW5jZSB0aGlzIGNhbiBiZVxuICAgIC8vIHNwdXJpb3VzbHkgY2FsbGVkIGZyb20gZGlhbCwgZW5zdXJlIHdlIGRvbid0XG4gICAgLy8gbGVhayB0aW1lcnNcbiAgICBzdGFydCgpIHtcbiAgICAgICAgdGhpcy5jYW5jZWwoKTtcbiAgICAgICAgdGhpcy5fc2NoZWR1bGUoKTtcbiAgICB9XG4gICAgLy8gYXBpIGZvciBjYW5jZWxpbmcgdGhlIGhlYXJ0YmVhdHMsIGlmIHN0YWxlIGlzXG4gICAgLy8gdHJ1ZSBpdCB3aWxsIGluaXRpYXRlIGEgY2xpZW50IGRpc2Nvbm5lY3RcbiAgICBjYW5jZWwoc3RhbGUpIHtcbiAgICAgICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgICAgICAgICAgIHRoaXMudGltZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVzZXQoKTtcbiAgICAgICAgaWYgKHN0YWxlKSB7XG4gICAgICAgICAgICB0aGlzLnBoLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfc2NoZWR1bGUoKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmU6IG5vZGUgaXMgbm90IGEgbnVtYmVyIC0gd2UgdHJlYXQgdGhpcyBvcGFxdWVseVxuICAgICAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBoLmRpc3BhdGNoU3RhdHVzKHsgdHlwZTogY29yZV8xLkRlYnVnRXZlbnRzLlBpbmdUaW1lciwgZGF0YTogYCR7dGhpcy5wZW5kaW5ncy5sZW5ndGggKyAxfWAgfSk7XG4gICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5ncy5sZW5ndGggPT09IHRoaXMubWF4T3V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW5jZWwodHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGluZyA9ICgwLCB1dGlsXzEuZGVmZXJyZWQpKCk7XG4gICAgICAgICAgICB0aGlzLnBoLmZsdXNoKHBpbmcpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gd2UgZGlzY29ubmVjdGVkIC0gcG9uZ3Mgd2VyZSByZWplY3RlZFxuICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucGVuZGluZ3MucHVzaChwaW5nKTtcbiAgICAgICAgICAgIHRoaXMuX3NjaGVkdWxlKCk7XG4gICAgICAgIH0sIHRoaXMuaW50ZXJ2YWwpO1xuICAgIH1cbiAgICBfcmVzZXQoKSB7XG4gICAgICAgIC8vIGNsZWFyIHBlbmRpbmdzIGFmdGVyIHJlc29sdmluZyB0aGVtXG4gICAgICAgIHRoaXMucGVuZGluZ3MgPSB0aGlzLnBlbmRpbmdzLmZpbHRlcigocCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZCA9IHA7XG4gICAgICAgICAgICBkLnJlc29sdmUoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5IZWFydGJlYXQgPSBIZWFydGJlYXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWFydGJlYXRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/heartbeats.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/idleheartbeat_monitor.js":
/*!*************************************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/idleheartbeat_monitor.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2022 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IdleHeartbeatMonitor = void 0;\nclass IdleHeartbeatMonitor {\n    /**\n     * Constructor\n     * @param interval in millis to check\n     * @param cb a callback to report when heartbeats are missed\n     * @param opts monitor options @see IdleHeartbeatOptions\n     */\n    constructor(interval, cb, opts = { maxOut: 2 }) {\n        this.interval = interval;\n        this.maxOut = (opts === null || opts === void 0 ? void 0 : opts.maxOut) || 2;\n        this.cancelAfter = (opts === null || opts === void 0 ? void 0 : opts.cancelAfter) || 0;\n        this.last = Date.now();\n        this.missed = 0;\n        this.count = 0;\n        this.callback = cb;\n        this._schedule();\n    }\n    /**\n     * cancel monitoring\n     */\n    cancel() {\n        if (this.autoCancelTimer) {\n            clearTimeout(this.autoCancelTimer);\n        }\n        if (this.timer) {\n            clearInterval(this.timer);\n        }\n        this.timer = 0;\n        this.autoCancelTimer = 0;\n    }\n    /**\n     * work signals that there was work performed\n     */\n    work() {\n        this.last = Date.now();\n        this.missed = 0;\n    }\n    /**\n     * internal api to change the interval, cancelAfter and maxOut\n     * @param interval\n     * @param cancelAfter\n     * @param maxOut\n     */\n    _change(interval, cancelAfter = 0, maxOut = 2) {\n        this.interval = interval;\n        this.maxOut = maxOut;\n        this.cancelAfter = cancelAfter;\n        this.restart();\n    }\n    /**\n     * cancels and restarts the monitoring\n     */\n    restart() {\n        this.cancel();\n        this._schedule();\n    }\n    /**\n     * internal api called to start monitoring\n     */\n    _schedule() {\n        if (this.cancelAfter > 0) {\n            // @ts-ignore: in node is not a number - we treat this opaquely\n            this.autoCancelTimer = setTimeout(() => {\n                this.cancel();\n            }, this.cancelAfter);\n        }\n        // @ts-ignore: in node is not a number - we treat this opaquely\n        this.timer = setInterval(() => {\n            this.count++;\n            if ((Date.now() - this.last) > this.interval) {\n                this.missed++;\n            }\n            if (this.missed >= this.maxOut) {\n                try {\n                    if (this.callback(this.missed) === true) {\n                        this.cancel();\n                    }\n                }\n                catch (err) {\n                    console.log(err);\n                }\n            }\n        }, this.interval);\n    }\n}\nexports.IdleHeartbeatMonitor = IdleHeartbeatMonitor;\n//# sourceMappingURL=idleheartbeat_monitor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9pZGxlaGVhcnRiZWF0X21vbml0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxXQUFXO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9pZGxlaGVhcnRiZWF0X21vbml0b3IuanM/OWYzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMiBUaGUgTkFUUyBBdXRob3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JZGxlSGVhcnRiZWF0TW9uaXRvciA9IHZvaWQgMDtcbmNsYXNzIElkbGVIZWFydGJlYXRNb25pdG9yIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSBpbnRlcnZhbCBpbiBtaWxsaXMgdG8gY2hlY2tcbiAgICAgKiBAcGFyYW0gY2IgYSBjYWxsYmFjayB0byByZXBvcnQgd2hlbiBoZWFydGJlYXRzIGFyZSBtaXNzZWRcbiAgICAgKiBAcGFyYW0gb3B0cyBtb25pdG9yIG9wdGlvbnMgQHNlZSBJZGxlSGVhcnRiZWF0T3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGludGVydmFsLCBjYiwgb3B0cyA9IHsgbWF4T3V0OiAyIH0pIHtcbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IGludGVydmFsO1xuICAgICAgICB0aGlzLm1heE91dCA9IChvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMubWF4T3V0KSB8fCAyO1xuICAgICAgICB0aGlzLmNhbmNlbEFmdGVyID0gKG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5jYW5jZWxBZnRlcikgfHwgMDtcbiAgICAgICAgdGhpcy5sYXN0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5taXNzZWQgPSAwO1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNiO1xuICAgICAgICB0aGlzLl9zY2hlZHVsZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBjYW5jZWwgbW9uaXRvcmluZ1xuICAgICAqL1xuICAgIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NhbmNlbFRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5hdXRvQ2FuY2VsVGltZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGltZXIgPSAwO1xuICAgICAgICB0aGlzLmF1dG9DYW5jZWxUaW1lciA9IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHdvcmsgc2lnbmFscyB0aGF0IHRoZXJlIHdhcyB3b3JrIHBlcmZvcm1lZFxuICAgICAqL1xuICAgIHdvcmsoKSB7XG4gICAgICAgIHRoaXMubGFzdCA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMubWlzc2VkID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogaW50ZXJuYWwgYXBpIHRvIGNoYW5nZSB0aGUgaW50ZXJ2YWwsIGNhbmNlbEFmdGVyIGFuZCBtYXhPdXRcbiAgICAgKiBAcGFyYW0gaW50ZXJ2YWxcbiAgICAgKiBAcGFyYW0gY2FuY2VsQWZ0ZXJcbiAgICAgKiBAcGFyYW0gbWF4T3V0XG4gICAgICovXG4gICAgX2NoYW5nZShpbnRlcnZhbCwgY2FuY2VsQWZ0ZXIgPSAwLCBtYXhPdXQgPSAyKSB7XG4gICAgICAgIHRoaXMuaW50ZXJ2YWwgPSBpbnRlcnZhbDtcbiAgICAgICAgdGhpcy5tYXhPdXQgPSBtYXhPdXQ7XG4gICAgICAgIHRoaXMuY2FuY2VsQWZ0ZXIgPSBjYW5jZWxBZnRlcjtcbiAgICAgICAgdGhpcy5yZXN0YXJ0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGNhbmNlbHMgYW5kIHJlc3RhcnRzIHRoZSBtb25pdG9yaW5nXG4gICAgICovXG4gICAgcmVzdGFydCgpIHtcbiAgICAgICAgdGhpcy5jYW5jZWwoKTtcbiAgICAgICAgdGhpcy5fc2NoZWR1bGUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogaW50ZXJuYWwgYXBpIGNhbGxlZCB0byBzdGFydCBtb25pdG9yaW5nXG4gICAgICovXG4gICAgX3NjaGVkdWxlKCkge1xuICAgICAgICBpZiAodGhpcy5jYW5jZWxBZnRlciA+IDApIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmU6IGluIG5vZGUgaXMgbm90IGEgbnVtYmVyIC0gd2UgdHJlYXQgdGhpcyBvcGFxdWVseVxuICAgICAgICAgICAgdGhpcy5hdXRvQ2FuY2VsVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbCgpO1xuICAgICAgICAgICAgfSwgdGhpcy5jYW5jZWxBZnRlcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQHRzLWlnbm9yZTogaW4gbm9kZSBpcyBub3QgYSBudW1iZXIgLSB3ZSB0cmVhdCB0aGlzIG9wYXF1ZWx5XG4gICAgICAgIHRoaXMudGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNvdW50Kys7XG4gICAgICAgICAgICBpZiAoKERhdGUubm93KCkgLSB0aGlzLmxhc3QpID4gdGhpcy5pbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMubWlzc2VkKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5taXNzZWQgPj0gdGhpcy5tYXhPdXQpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxsYmFjayh0aGlzLm1pc3NlZCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcy5pbnRlcnZhbCk7XG4gICAgfVxufVxuZXhwb3J0cy5JZGxlSGVhcnRiZWF0TW9uaXRvciA9IElkbGVIZWFydGJlYXRNb25pdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRsZWhlYXJ0YmVhdF9tb25pdG9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/idleheartbeat_monitor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/internal_mod.js":
/*!****************************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/internal_mod.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Bucket = exports.Base64KeyCodec = exports.TypedSubscription = exports.parseIP = exports.isIP = exports.TE = exports.TD = exports.Metric = exports.Bench = exports.writeAll = exports.readAll = exports.MAX_SIZE = exports.DenoBuffer = exports.State = exports.Parser = exports.Kind = exports.QueuedIteratorImpl = exports.StringCodec = exports.JSONCodec = exports.usernamePasswordAuthenticator = exports.tokenAuthenticator = exports.nkeyAuthenticator = exports.jwtAuthenticator = exports.credsAuthenticator = exports.RequestOne = exports.checkUnsupportedOption = exports.checkOptions = exports.buildAuthenticator = exports.DataBuffer = exports.MuxSubscription = exports.Heartbeat = exports.MsgHdrsImpl = exports.headers = exports.canonicalMIMEHeaderKey = exports.timeout = exports.render = exports.extend = exports.delay = exports.deferred = exports.deadline = exports.collect = exports.backoff = exports.ProtocolHandler = exports.INFO = exports.Connect = exports.setTransportFactory = exports.MsgImpl = exports.nuid = exports.Nuid = exports.NatsConnectionImpl = void 0;\nexports.Subscriptions = exports.SubscriptionImpl = exports.syncIterator = exports.ServiceVerb = exports.ServiceResponseType = exports.ServiceErrorHeader = exports.ServiceErrorCodeHeader = exports.ServiceError = exports.RequestStrategy = exports.NatsError = exports.Match = exports.isNatsError = exports.Events = exports.ErrorCode = exports.DebugEvents = exports.createInbox = exports.extractProtocolMessage = exports.Empty = exports.parseSemVer = exports.compare = exports.NoopKvCodecs = exports.defaultBucketOpts = void 0;\nvar nats_1 = __webpack_require__(/*! ./nats */ \"(rsc)/./node_modules/nats/lib/nats-base-client/nats.js\");\nObject.defineProperty(exports, \"NatsConnectionImpl\", ({ enumerable: true, get: function () { return nats_1.NatsConnectionImpl; } }));\nvar nuid_1 = __webpack_require__(/*! ./nuid */ \"(rsc)/./node_modules/nats/lib/nats-base-client/nuid.js\");\nObject.defineProperty(exports, \"Nuid\", ({ enumerable: true, get: function () { return nuid_1.Nuid; } }));\nObject.defineProperty(exports, \"nuid\", ({ enumerable: true, get: function () { return nuid_1.nuid; } }));\nvar msg_1 = __webpack_require__(/*! ./msg */ \"(rsc)/./node_modules/nats/lib/nats-base-client/msg.js\");\nObject.defineProperty(exports, \"MsgImpl\", ({ enumerable: true, get: function () { return msg_1.MsgImpl; } }));\nvar transport_1 = __webpack_require__(/*! ./transport */ \"(rsc)/./node_modules/nats/lib/nats-base-client/transport.js\");\nObject.defineProperty(exports, \"setTransportFactory\", ({ enumerable: true, get: function () { return transport_1.setTransportFactory; } }));\nvar protocol_1 = __webpack_require__(/*! ./protocol */ \"(rsc)/./node_modules/nats/lib/nats-base-client/protocol.js\");\nObject.defineProperty(exports, \"Connect\", ({ enumerable: true, get: function () { return protocol_1.Connect; } }));\nObject.defineProperty(exports, \"INFO\", ({ enumerable: true, get: function () { return protocol_1.INFO; } }));\nObject.defineProperty(exports, \"ProtocolHandler\", ({ enumerable: true, get: function () { return protocol_1.ProtocolHandler; } }));\nvar util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/nats/lib/nats-base-client/util.js\");\nObject.defineProperty(exports, \"backoff\", ({ enumerable: true, get: function () { return util_1.backoff; } }));\nObject.defineProperty(exports, \"collect\", ({ enumerable: true, get: function () { return util_1.collect; } }));\nObject.defineProperty(exports, \"deadline\", ({ enumerable: true, get: function () { return util_1.deadline; } }));\nObject.defineProperty(exports, \"deferred\", ({ enumerable: true, get: function () { return util_1.deferred; } }));\nObject.defineProperty(exports, \"delay\", ({ enumerable: true, get: function () { return util_1.delay; } }));\nObject.defineProperty(exports, \"extend\", ({ enumerable: true, get: function () { return util_1.extend; } }));\nObject.defineProperty(exports, \"render\", ({ enumerable: true, get: function () { return util_1.render; } }));\nObject.defineProperty(exports, \"timeout\", ({ enumerable: true, get: function () { return util_1.timeout; } }));\nvar headers_1 = __webpack_require__(/*! ./headers */ \"(rsc)/./node_modules/nats/lib/nats-base-client/headers.js\");\nObject.defineProperty(exports, \"canonicalMIMEHeaderKey\", ({ enumerable: true, get: function () { return headers_1.canonicalMIMEHeaderKey; } }));\nObject.defineProperty(exports, \"headers\", ({ enumerable: true, get: function () { return headers_1.headers; } }));\nObject.defineProperty(exports, \"MsgHdrsImpl\", ({ enumerable: true, get: function () { return headers_1.MsgHdrsImpl; } }));\nvar heartbeats_1 = __webpack_require__(/*! ./heartbeats */ \"(rsc)/./node_modules/nats/lib/nats-base-client/heartbeats.js\");\nObject.defineProperty(exports, \"Heartbeat\", ({ enumerable: true, get: function () { return heartbeats_1.Heartbeat; } }));\nvar muxsubscription_1 = __webpack_require__(/*! ./muxsubscription */ \"(rsc)/./node_modules/nats/lib/nats-base-client/muxsubscription.js\");\nObject.defineProperty(exports, \"MuxSubscription\", ({ enumerable: true, get: function () { return muxsubscription_1.MuxSubscription; } }));\nvar databuffer_1 = __webpack_require__(/*! ./databuffer */ \"(rsc)/./node_modules/nats/lib/nats-base-client/databuffer.js\");\nObject.defineProperty(exports, \"DataBuffer\", ({ enumerable: true, get: function () { return databuffer_1.DataBuffer; } }));\nvar options_1 = __webpack_require__(/*! ./options */ \"(rsc)/./node_modules/nats/lib/nats-base-client/options.js\");\nObject.defineProperty(exports, \"buildAuthenticator\", ({ enumerable: true, get: function () { return options_1.buildAuthenticator; } }));\nObject.defineProperty(exports, \"checkOptions\", ({ enumerable: true, get: function () { return options_1.checkOptions; } }));\nObject.defineProperty(exports, \"checkUnsupportedOption\", ({ enumerable: true, get: function () { return options_1.checkUnsupportedOption; } }));\nvar request_1 = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/nats/lib/nats-base-client/request.js\");\nObject.defineProperty(exports, \"RequestOne\", ({ enumerable: true, get: function () { return request_1.RequestOne; } }));\nvar authenticator_1 = __webpack_require__(/*! ./authenticator */ \"(rsc)/./node_modules/nats/lib/nats-base-client/authenticator.js\");\nObject.defineProperty(exports, \"credsAuthenticator\", ({ enumerable: true, get: function () { return authenticator_1.credsAuthenticator; } }));\nObject.defineProperty(exports, \"jwtAuthenticator\", ({ enumerable: true, get: function () { return authenticator_1.jwtAuthenticator; } }));\nObject.defineProperty(exports, \"nkeyAuthenticator\", ({ enumerable: true, get: function () { return authenticator_1.nkeyAuthenticator; } }));\nObject.defineProperty(exports, \"tokenAuthenticator\", ({ enumerable: true, get: function () { return authenticator_1.tokenAuthenticator; } }));\nObject.defineProperty(exports, \"usernamePasswordAuthenticator\", ({ enumerable: true, get: function () { return authenticator_1.usernamePasswordAuthenticator; } }));\nvar codec_1 = __webpack_require__(/*! ./codec */ \"(rsc)/./node_modules/nats/lib/nats-base-client/codec.js\");\nObject.defineProperty(exports, \"JSONCodec\", ({ enumerable: true, get: function () { return codec_1.JSONCodec; } }));\nObject.defineProperty(exports, \"StringCodec\", ({ enumerable: true, get: function () { return codec_1.StringCodec; } }));\n__exportStar(__webpack_require__(/*! ./nkeys */ \"(rsc)/./node_modules/nats/lib/nats-base-client/nkeys.js\"), exports);\nvar queued_iterator_1 = __webpack_require__(/*! ./queued_iterator */ \"(rsc)/./node_modules/nats/lib/nats-base-client/queued_iterator.js\");\nObject.defineProperty(exports, \"QueuedIteratorImpl\", ({ enumerable: true, get: function () { return queued_iterator_1.QueuedIteratorImpl; } }));\nvar parser_1 = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/nats/lib/nats-base-client/parser.js\");\nObject.defineProperty(exports, \"Kind\", ({ enumerable: true, get: function () { return parser_1.Kind; } }));\nObject.defineProperty(exports, \"Parser\", ({ enumerable: true, get: function () { return parser_1.Parser; } }));\nObject.defineProperty(exports, \"State\", ({ enumerable: true, get: function () { return parser_1.State; } }));\nvar denobuffer_1 = __webpack_require__(/*! ./denobuffer */ \"(rsc)/./node_modules/nats/lib/nats-base-client/denobuffer.js\");\nObject.defineProperty(exports, \"DenoBuffer\", ({ enumerable: true, get: function () { return denobuffer_1.DenoBuffer; } }));\nObject.defineProperty(exports, \"MAX_SIZE\", ({ enumerable: true, get: function () { return denobuffer_1.MAX_SIZE; } }));\nObject.defineProperty(exports, \"readAll\", ({ enumerable: true, get: function () { return denobuffer_1.readAll; } }));\nObject.defineProperty(exports, \"writeAll\", ({ enumerable: true, get: function () { return denobuffer_1.writeAll; } }));\nvar bench_1 = __webpack_require__(/*! ./bench */ \"(rsc)/./node_modules/nats/lib/nats-base-client/bench.js\");\nObject.defineProperty(exports, \"Bench\", ({ enumerable: true, get: function () { return bench_1.Bench; } }));\nObject.defineProperty(exports, \"Metric\", ({ enumerable: true, get: function () { return bench_1.Metric; } }));\nvar encoders_1 = __webpack_require__(/*! ./encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nObject.defineProperty(exports, \"TD\", ({ enumerable: true, get: function () { return encoders_1.TD; } }));\nObject.defineProperty(exports, \"TE\", ({ enumerable: true, get: function () { return encoders_1.TE; } }));\nvar ipparser_1 = __webpack_require__(/*! ./ipparser */ \"(rsc)/./node_modules/nats/lib/nats-base-client/ipparser.js\");\nObject.defineProperty(exports, \"isIP\", ({ enumerable: true, get: function () { return ipparser_1.isIP; } }));\nObject.defineProperty(exports, \"parseIP\", ({ enumerable: true, get: function () { return ipparser_1.parseIP; } }));\nvar typedsub_1 = __webpack_require__(/*! ./typedsub */ \"(rsc)/./node_modules/nats/lib/nats-base-client/typedsub.js\");\nObject.defineProperty(exports, \"TypedSubscription\", ({ enumerable: true, get: function () { return typedsub_1.TypedSubscription; } }));\nvar kv_1 = __webpack_require__(/*! ../jetstream/kv */ \"(rsc)/./node_modules/nats/lib/jetstream/kv.js\");\nObject.defineProperty(exports, \"Base64KeyCodec\", ({ enumerable: true, get: function () { return kv_1.Base64KeyCodec; } }));\nObject.defineProperty(exports, \"Bucket\", ({ enumerable: true, get: function () { return kv_1.Bucket; } }));\nObject.defineProperty(exports, \"defaultBucketOpts\", ({ enumerable: true, get: function () { return kv_1.defaultBucketOpts; } }));\nObject.defineProperty(exports, \"NoopKvCodecs\", ({ enumerable: true, get: function () { return kv_1.NoopKvCodecs; } }));\nvar semver_1 = __webpack_require__(/*! ./semver */ \"(rsc)/./node_modules/nats/lib/nats-base-client/semver.js\");\nObject.defineProperty(exports, \"compare\", ({ enumerable: true, get: function () { return semver_1.compare; } }));\nObject.defineProperty(exports, \"parseSemVer\", ({ enumerable: true, get: function () { return semver_1.parseSemVer; } }));\nvar types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/nats/lib/nats-base-client/types.js\");\nObject.defineProperty(exports, \"Empty\", ({ enumerable: true, get: function () { return types_1.Empty; } }));\nvar transport_2 = __webpack_require__(/*! ./transport */ \"(rsc)/./node_modules/nats/lib/nats-base-client/transport.js\");\nObject.defineProperty(exports, \"extractProtocolMessage\", ({ enumerable: true, get: function () { return transport_2.extractProtocolMessage; } }));\nvar core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nObject.defineProperty(exports, \"createInbox\", ({ enumerable: true, get: function () { return core_1.createInbox; } }));\nObject.defineProperty(exports, \"DebugEvents\", ({ enumerable: true, get: function () { return core_1.DebugEvents; } }));\nObject.defineProperty(exports, \"ErrorCode\", ({ enumerable: true, get: function () { return core_1.ErrorCode; } }));\nObject.defineProperty(exports, \"Events\", ({ enumerable: true, get: function () { return core_1.Events; } }));\nObject.defineProperty(exports, \"isNatsError\", ({ enumerable: true, get: function () { return core_1.isNatsError; } }));\nObject.defineProperty(exports, \"Match\", ({ enumerable: true, get: function () { return core_1.Match; } }));\nObject.defineProperty(exports, \"NatsError\", ({ enumerable: true, get: function () { return core_1.NatsError; } }));\nObject.defineProperty(exports, \"RequestStrategy\", ({ enumerable: true, get: function () { return core_1.RequestStrategy; } }));\nObject.defineProperty(exports, \"ServiceError\", ({ enumerable: true, get: function () { return core_1.ServiceError; } }));\nObject.defineProperty(exports, \"ServiceErrorCodeHeader\", ({ enumerable: true, get: function () { return core_1.ServiceErrorCodeHeader; } }));\nObject.defineProperty(exports, \"ServiceErrorHeader\", ({ enumerable: true, get: function () { return core_1.ServiceErrorHeader; } }));\nObject.defineProperty(exports, \"ServiceResponseType\", ({ enumerable: true, get: function () { return core_1.ServiceResponseType; } }));\nObject.defineProperty(exports, \"ServiceVerb\", ({ enumerable: true, get: function () { return core_1.ServiceVerb; } }));\nObject.defineProperty(exports, \"syncIterator\", ({ enumerable: true, get: function () { return core_1.syncIterator; } }));\nvar protocol_2 = __webpack_require__(/*! ./protocol */ \"(rsc)/./node_modules/nats/lib/nats-base-client/protocol.js\");\nObject.defineProperty(exports, \"SubscriptionImpl\", ({ enumerable: true, get: function () { return protocol_2.SubscriptionImpl; } }));\nObject.defineProperty(exports, \"Subscriptions\", ({ enumerable: true, get: function () { return protocol_2.Subscriptions; } }));\n//# sourceMappingURL=internal_mod.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9pbnRlcm5hbF9tb2QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYyxHQUFHLHNCQUFzQixHQUFHLHlCQUF5QixHQUFHLGVBQWUsR0FBRyxZQUFZLEdBQUcsVUFBVSxHQUFHLFVBQVUsR0FBRyxjQUFjLEdBQUcsYUFBYSxHQUFHLGdCQUFnQixHQUFHLGVBQWUsR0FBRyxnQkFBZ0IsR0FBRyxrQkFBa0IsR0FBRyxhQUFhLEdBQUcsY0FBYyxHQUFHLFlBQVksR0FBRywwQkFBMEIsR0FBRyxtQkFBbUIsR0FBRyxpQkFBaUIsR0FBRyxxQ0FBcUMsR0FBRywwQkFBMEIsR0FBRyx5QkFBeUIsR0FBRyx3QkFBd0IsR0FBRywwQkFBMEIsR0FBRyxrQkFBa0IsR0FBRyw4QkFBOEIsR0FBRyxvQkFBb0IsR0FBRywwQkFBMEIsR0FBRyxrQkFBa0IsR0FBRyx1QkFBdUIsR0FBRyxpQkFBaUIsR0FBRyxtQkFBbUIsR0FBRyxlQUFlLEdBQUcsOEJBQThCLEdBQUcsZUFBZSxHQUFHLGNBQWMsR0FBRyxjQUFjLEdBQUcsYUFBYSxHQUFHLGdCQUFnQixHQUFHLGdCQUFnQixHQUFHLGVBQWUsR0FBRyxlQUFlLEdBQUcsdUJBQXVCLEdBQUcsWUFBWSxHQUFHLGVBQWUsR0FBRywyQkFBMkIsR0FBRyxlQUFlLEdBQUcsWUFBWSxHQUFHLFlBQVksR0FBRywwQkFBMEI7QUFDdGlDLHFCQUFxQixHQUFHLHdCQUF3QixHQUFHLG9CQUFvQixHQUFHLG1CQUFtQixHQUFHLDJCQUEyQixHQUFHLDBCQUEwQixHQUFHLDhCQUE4QixHQUFHLG9CQUFvQixHQUFHLHVCQUF1QixHQUFHLGlCQUFpQixHQUFHLGFBQWEsR0FBRyxtQkFBbUIsR0FBRyxjQUFjLEdBQUcsaUJBQWlCLEdBQUcsbUJBQW1CLEdBQUcsbUJBQW1CLEdBQUcsOEJBQThCLEdBQUcsYUFBYSxHQUFHLG1CQUFtQixHQUFHLGVBQWUsR0FBRyxvQkFBb0IsR0FBRyx5QkFBeUI7QUFDamdCLGFBQWEsbUJBQU8sQ0FBQyxzRUFBUTtBQUM3QixzREFBcUQsRUFBRSxxQ0FBcUMscUNBQXFDLEVBQUM7QUFDbEksYUFBYSxtQkFBTyxDQUFDLHNFQUFRO0FBQzdCLHdDQUF1QyxFQUFFLHFDQUFxQyx1QkFBdUIsRUFBQztBQUN0Ryx3Q0FBdUMsRUFBRSxxQ0FBcUMsdUJBQXVCLEVBQUM7QUFDdEcsWUFBWSxtQkFBTyxDQUFDLG9FQUFPO0FBQzNCLDJDQUEwQyxFQUFFLHFDQUFxQyx5QkFBeUIsRUFBQztBQUMzRyxrQkFBa0IsbUJBQU8sQ0FBQyxnRkFBYTtBQUN2Qyx1REFBc0QsRUFBRSxxQ0FBcUMsMkNBQTJDLEVBQUM7QUFDekksaUJBQWlCLG1CQUFPLENBQUMsOEVBQVk7QUFDckMsMkNBQTBDLEVBQUUscUNBQXFDLDhCQUE4QixFQUFDO0FBQ2hILHdDQUF1QyxFQUFFLHFDQUFxQywyQkFBMkIsRUFBQztBQUMxRyxtREFBa0QsRUFBRSxxQ0FBcUMsc0NBQXNDLEVBQUM7QUFDaEksYUFBYSxtQkFBTyxDQUFDLHNFQUFRO0FBQzdCLDJDQUEwQyxFQUFFLHFDQUFxQywwQkFBMEIsRUFBQztBQUM1RywyQ0FBMEMsRUFBRSxxQ0FBcUMsMEJBQTBCLEVBQUM7QUFDNUcsNENBQTJDLEVBQUUscUNBQXFDLDJCQUEyQixFQUFDO0FBQzlHLDRDQUEyQyxFQUFFLHFDQUFxQywyQkFBMkIsRUFBQztBQUM5Ryx5Q0FBd0MsRUFBRSxxQ0FBcUMsd0JBQXdCLEVBQUM7QUFDeEcsMENBQXlDLEVBQUUscUNBQXFDLHlCQUF5QixFQUFDO0FBQzFHLDBDQUF5QyxFQUFFLHFDQUFxQyx5QkFBeUIsRUFBQztBQUMxRywyQ0FBMEMsRUFBRSxxQ0FBcUMsMEJBQTBCLEVBQUM7QUFDNUcsZ0JBQWdCLG1CQUFPLENBQUMsNEVBQVc7QUFDbkMsMERBQXlELEVBQUUscUNBQXFDLDRDQUE0QyxFQUFDO0FBQzdJLDJDQUEwQyxFQUFFLHFDQUFxQyw2QkFBNkIsRUFBQztBQUMvRywrQ0FBOEMsRUFBRSxxQ0FBcUMsaUNBQWlDLEVBQUM7QUFDdkgsbUJBQW1CLG1CQUFPLENBQUMsa0ZBQWM7QUFDekMsNkNBQTRDLEVBQUUscUNBQXFDLGtDQUFrQyxFQUFDO0FBQ3RILHdCQUF3QixtQkFBTyxDQUFDLDRGQUFtQjtBQUNuRCxtREFBa0QsRUFBRSxxQ0FBcUMsNkNBQTZDLEVBQUM7QUFDdkksbUJBQW1CLG1CQUFPLENBQUMsa0ZBQWM7QUFDekMsOENBQTZDLEVBQUUscUNBQXFDLG1DQUFtQyxFQUFDO0FBQ3hILGdCQUFnQixtQkFBTyxDQUFDLDRFQUFXO0FBQ25DLHNEQUFxRCxFQUFFLHFDQUFxQyx3Q0FBd0MsRUFBQztBQUNySSxnREFBK0MsRUFBRSxxQ0FBcUMsa0NBQWtDLEVBQUM7QUFDekgsMERBQXlELEVBQUUscUNBQXFDLDRDQUE0QyxFQUFDO0FBQzdJLGdCQUFnQixtQkFBTyxDQUFDLDRFQUFXO0FBQ25DLDhDQUE2QyxFQUFFLHFDQUFxQyxnQ0FBZ0MsRUFBQztBQUNySCxzQkFBc0IsbUJBQU8sQ0FBQyx3RkFBaUI7QUFDL0Msc0RBQXFELEVBQUUscUNBQXFDLDhDQUE4QyxFQUFDO0FBQzNJLG9EQUFtRCxFQUFFLHFDQUFxQyw0Q0FBNEMsRUFBQztBQUN2SSxxREFBb0QsRUFBRSxxQ0FBcUMsNkNBQTZDLEVBQUM7QUFDekksc0RBQXFELEVBQUUscUNBQXFDLDhDQUE4QyxFQUFDO0FBQzNJLGlFQUFnRSxFQUFFLHFDQUFxQyx5REFBeUQsRUFBQztBQUNqSyxjQUFjLG1CQUFPLENBQUMsd0VBQVM7QUFDL0IsNkNBQTRDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQ2pILCtDQUE4QyxFQUFFLHFDQUFxQywrQkFBK0IsRUFBQztBQUNySCxhQUFhLG1CQUFPLENBQUMsd0VBQVM7QUFDOUIsd0JBQXdCLG1CQUFPLENBQUMsNEZBQW1CO0FBQ25ELHNEQUFxRCxFQUFFLHFDQUFxQyxnREFBZ0QsRUFBQztBQUM3SSxlQUFlLG1CQUFPLENBQUMsMEVBQVU7QUFDakMsd0NBQXVDLEVBQUUscUNBQXFDLHlCQUF5QixFQUFDO0FBQ3hHLDBDQUF5QyxFQUFFLHFDQUFxQywyQkFBMkIsRUFBQztBQUM1Ryx5Q0FBd0MsRUFBRSxxQ0FBcUMsMEJBQTBCLEVBQUM7QUFDMUcsbUJBQW1CLG1CQUFPLENBQUMsa0ZBQWM7QUFDekMsOENBQTZDLEVBQUUscUNBQXFDLG1DQUFtQyxFQUFDO0FBQ3hILDRDQUEyQyxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQztBQUNwSCwyQ0FBMEMsRUFBRSxxQ0FBcUMsZ0NBQWdDLEVBQUM7QUFDbEgsNENBQTJDLEVBQUUscUNBQXFDLGlDQUFpQyxFQUFDO0FBQ3BILGNBQWMsbUJBQU8sQ0FBQyx3RUFBUztBQUMvQix5Q0FBd0MsRUFBRSxxQ0FBcUMseUJBQXlCLEVBQUM7QUFDekcsMENBQXlDLEVBQUUscUNBQXFDLDBCQUEwQixFQUFDO0FBQzNHLGlCQUFpQixtQkFBTyxDQUFDLDhFQUFZO0FBQ3JDLHNDQUFxQyxFQUFFLHFDQUFxQyx5QkFBeUIsRUFBQztBQUN0RyxzQ0FBcUMsRUFBRSxxQ0FBcUMseUJBQXlCLEVBQUM7QUFDdEcsaUJBQWlCLG1CQUFPLENBQUMsOEVBQVk7QUFDckMsd0NBQXVDLEVBQUUscUNBQXFDLDJCQUEyQixFQUFDO0FBQzFHLDJDQUEwQyxFQUFFLHFDQUFxQyw4QkFBOEIsRUFBQztBQUNoSCxpQkFBaUIsbUJBQU8sQ0FBQyw4RUFBWTtBQUNyQyxxREFBb0QsRUFBRSxxQ0FBcUMsd0NBQXdDLEVBQUM7QUFDcEksV0FBVyxtQkFBTyxDQUFDLHNFQUFpQjtBQUNwQyxrREFBaUQsRUFBRSxxQ0FBcUMsK0JBQStCLEVBQUM7QUFDeEgsMENBQXlDLEVBQUUscUNBQXFDLHVCQUF1QixFQUFDO0FBQ3hHLHFEQUFvRCxFQUFFLHFDQUFxQyxrQ0FBa0MsRUFBQztBQUM5SCxnREFBK0MsRUFBRSxxQ0FBcUMsNkJBQTZCLEVBQUM7QUFDcEgsZUFBZSxtQkFBTyxDQUFDLDBFQUFVO0FBQ2pDLDJDQUEwQyxFQUFFLHFDQUFxQyw0QkFBNEIsRUFBQztBQUM5RywrQ0FBOEMsRUFBRSxxQ0FBcUMsZ0NBQWdDLEVBQUM7QUFDdEgsY0FBYyxtQkFBTyxDQUFDLHdFQUFTO0FBQy9CLHlDQUF3QyxFQUFFLHFDQUFxQyx5QkFBeUIsRUFBQztBQUN6RyxrQkFBa0IsbUJBQU8sQ0FBQyxnRkFBYTtBQUN2QywwREFBeUQsRUFBRSxxQ0FBcUMsOENBQThDLEVBQUM7QUFDL0ksYUFBYSxtQkFBTyxDQUFDLHNFQUFRO0FBQzdCLCtDQUE4QyxFQUFFLHFDQUFxQyw4QkFBOEIsRUFBQztBQUNwSCwrQ0FBOEMsRUFBRSxxQ0FBcUMsOEJBQThCLEVBQUM7QUFDcEgsNkNBQTRDLEVBQUUscUNBQXFDLDRCQUE0QixFQUFDO0FBQ2hILDBDQUF5QyxFQUFFLHFDQUFxQyx5QkFBeUIsRUFBQztBQUMxRywrQ0FBOEMsRUFBRSxxQ0FBcUMsOEJBQThCLEVBQUM7QUFDcEgseUNBQXdDLEVBQUUscUNBQXFDLHdCQUF3QixFQUFDO0FBQ3hHLDZDQUE0QyxFQUFFLHFDQUFxQyw0QkFBNEIsRUFBQztBQUNoSCxtREFBa0QsRUFBRSxxQ0FBcUMsa0NBQWtDLEVBQUM7QUFDNUgsZ0RBQStDLEVBQUUscUNBQXFDLCtCQUErQixFQUFDO0FBQ3RILDBEQUF5RCxFQUFFLHFDQUFxQyx5Q0FBeUMsRUFBQztBQUMxSSxzREFBcUQsRUFBRSxxQ0FBcUMscUNBQXFDLEVBQUM7QUFDbEksdURBQXNELEVBQUUscUNBQXFDLHNDQUFzQyxFQUFDO0FBQ3BJLCtDQUE4QyxFQUFFLHFDQUFxQyw4QkFBOEIsRUFBQztBQUNwSCxnREFBK0MsRUFBRSxxQ0FBcUMsK0JBQStCLEVBQUM7QUFDdEgsaUJBQWlCLG1CQUFPLENBQUMsOEVBQVk7QUFDckMsb0RBQW1ELEVBQUUscUNBQXFDLHVDQUF1QyxFQUFDO0FBQ2xJLGlEQUFnRCxFQUFFLHFDQUFxQyxvQ0FBb0MsRUFBQztBQUM1SCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL25hdHMvbGliL25hdHMtYmFzZS1jbGllbnQvaW50ZXJuYWxfbW9kLmpzPzQ2NTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnVja2V0ID0gZXhwb3J0cy5CYXNlNjRLZXlDb2RlYyA9IGV4cG9ydHMuVHlwZWRTdWJzY3JpcHRpb24gPSBleHBvcnRzLnBhcnNlSVAgPSBleHBvcnRzLmlzSVAgPSBleHBvcnRzLlRFID0gZXhwb3J0cy5URCA9IGV4cG9ydHMuTWV0cmljID0gZXhwb3J0cy5CZW5jaCA9IGV4cG9ydHMud3JpdGVBbGwgPSBleHBvcnRzLnJlYWRBbGwgPSBleHBvcnRzLk1BWF9TSVpFID0gZXhwb3J0cy5EZW5vQnVmZmVyID0gZXhwb3J0cy5TdGF0ZSA9IGV4cG9ydHMuUGFyc2VyID0gZXhwb3J0cy5LaW5kID0gZXhwb3J0cy5RdWV1ZWRJdGVyYXRvckltcGwgPSBleHBvcnRzLlN0cmluZ0NvZGVjID0gZXhwb3J0cy5KU09OQ29kZWMgPSBleHBvcnRzLnVzZXJuYW1lUGFzc3dvcmRBdXRoZW50aWNhdG9yID0gZXhwb3J0cy50b2tlbkF1dGhlbnRpY2F0b3IgPSBleHBvcnRzLm5rZXlBdXRoZW50aWNhdG9yID0gZXhwb3J0cy5qd3RBdXRoZW50aWNhdG9yID0gZXhwb3J0cy5jcmVkc0F1dGhlbnRpY2F0b3IgPSBleHBvcnRzLlJlcXVlc3RPbmUgPSBleHBvcnRzLmNoZWNrVW5zdXBwb3J0ZWRPcHRpb24gPSBleHBvcnRzLmNoZWNrT3B0aW9ucyA9IGV4cG9ydHMuYnVpbGRBdXRoZW50aWNhdG9yID0gZXhwb3J0cy5EYXRhQnVmZmVyID0gZXhwb3J0cy5NdXhTdWJzY3JpcHRpb24gPSBleHBvcnRzLkhlYXJ0YmVhdCA9IGV4cG9ydHMuTXNnSGRyc0ltcGwgPSBleHBvcnRzLmhlYWRlcnMgPSBleHBvcnRzLmNhbm9uaWNhbE1JTUVIZWFkZXJLZXkgPSBleHBvcnRzLnRpbWVvdXQgPSBleHBvcnRzLnJlbmRlciA9IGV4cG9ydHMuZXh0ZW5kID0gZXhwb3J0cy5kZWxheSA9IGV4cG9ydHMuZGVmZXJyZWQgPSBleHBvcnRzLmRlYWRsaW5lID0gZXhwb3J0cy5jb2xsZWN0ID0gZXhwb3J0cy5iYWNrb2ZmID0gZXhwb3J0cy5Qcm90b2NvbEhhbmRsZXIgPSBleHBvcnRzLklORk8gPSBleHBvcnRzLkNvbm5lY3QgPSBleHBvcnRzLnNldFRyYW5zcG9ydEZhY3RvcnkgPSBleHBvcnRzLk1zZ0ltcGwgPSBleHBvcnRzLm51aWQgPSBleHBvcnRzLk51aWQgPSBleHBvcnRzLk5hdHNDb25uZWN0aW9uSW1wbCA9IHZvaWQgMDtcbmV4cG9ydHMuU3Vic2NyaXB0aW9ucyA9IGV4cG9ydHMuU3Vic2NyaXB0aW9uSW1wbCA9IGV4cG9ydHMuc3luY0l0ZXJhdG9yID0gZXhwb3J0cy5TZXJ2aWNlVmVyYiA9IGV4cG9ydHMuU2VydmljZVJlc3BvbnNlVHlwZSA9IGV4cG9ydHMuU2VydmljZUVycm9ySGVhZGVyID0gZXhwb3J0cy5TZXJ2aWNlRXJyb3JDb2RlSGVhZGVyID0gZXhwb3J0cy5TZXJ2aWNlRXJyb3IgPSBleHBvcnRzLlJlcXVlc3RTdHJhdGVneSA9IGV4cG9ydHMuTmF0c0Vycm9yID0gZXhwb3J0cy5NYXRjaCA9IGV4cG9ydHMuaXNOYXRzRXJyb3IgPSBleHBvcnRzLkV2ZW50cyA9IGV4cG9ydHMuRXJyb3JDb2RlID0gZXhwb3J0cy5EZWJ1Z0V2ZW50cyA9IGV4cG9ydHMuY3JlYXRlSW5ib3ggPSBleHBvcnRzLmV4dHJhY3RQcm90b2NvbE1lc3NhZ2UgPSBleHBvcnRzLkVtcHR5ID0gZXhwb3J0cy5wYXJzZVNlbVZlciA9IGV4cG9ydHMuY29tcGFyZSA9IGV4cG9ydHMuTm9vcEt2Q29kZWNzID0gZXhwb3J0cy5kZWZhdWx0QnVja2V0T3B0cyA9IHZvaWQgMDtcbnZhciBuYXRzXzEgPSByZXF1aXJlKFwiLi9uYXRzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTmF0c0Nvbm5lY3Rpb25JbXBsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRzXzEuTmF0c0Nvbm5lY3Rpb25JbXBsOyB9IH0pO1xudmFyIG51aWRfMSA9IHJlcXVpcmUoXCIuL251aWRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOdWlkXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBudWlkXzEuTnVpZDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm51aWRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51aWRfMS5udWlkOyB9IH0pO1xudmFyIG1zZ18xID0gcmVxdWlyZShcIi4vbXNnXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTXNnSW1wbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbXNnXzEuTXNnSW1wbDsgfSB9KTtcbnZhciB0cmFuc3BvcnRfMSA9IHJlcXVpcmUoXCIuL3RyYW5zcG9ydFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNldFRyYW5zcG9ydEZhY3RvcnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRyYW5zcG9ydF8xLnNldFRyYW5zcG9ydEZhY3Rvcnk7IH0gfSk7XG52YXIgcHJvdG9jb2xfMSA9IHJlcXVpcmUoXCIuL3Byb3RvY29sXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29ubmVjdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfMS5Db25uZWN0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSU5GT1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfMS5JTkZPOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUHJvdG9jb2xIYW5kbGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF8xLlByb3RvY29sSGFuZGxlcjsgfSB9KTtcbnZhciB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYmFja29mZlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbF8xLmJhY2tvZmY7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb2xsZWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsXzEuY29sbGVjdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlYWRsaW5lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsXzEuZGVhZGxpbmU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZlcnJlZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbF8xLmRlZmVycmVkOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVsYXlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxfMS5kZWxheTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImV4dGVuZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbF8xLmV4dGVuZDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlbmRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbF8xLnJlbmRlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRpbWVvdXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxfMS50aW1lb3V0OyB9IH0pO1xudmFyIGhlYWRlcnNfMSA9IHJlcXVpcmUoXCIuL2hlYWRlcnNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjYW5vbmljYWxNSU1FSGVhZGVyS2V5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBoZWFkZXJzXzEuY2Fub25pY2FsTUlNRUhlYWRlcktleTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImhlYWRlcnNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGhlYWRlcnNfMS5oZWFkZXJzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTXNnSGRyc0ltcGxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGhlYWRlcnNfMS5Nc2dIZHJzSW1wbDsgfSB9KTtcbnZhciBoZWFydGJlYXRzXzEgPSByZXF1aXJlKFwiLi9oZWFydGJlYXRzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSGVhcnRiZWF0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBoZWFydGJlYXRzXzEuSGVhcnRiZWF0OyB9IH0pO1xudmFyIG11eHN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4vbXV4c3Vic2NyaXB0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTXV4U3Vic2NyaXB0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtdXhzdWJzY3JpcHRpb25fMS5NdXhTdWJzY3JpcHRpb247IH0gfSk7XG52YXIgZGF0YWJ1ZmZlcl8xID0gcmVxdWlyZShcIi4vZGF0YWJ1ZmZlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRhdGFCdWZmZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRhdGFidWZmZXJfMS5EYXRhQnVmZmVyOyB9IH0pO1xudmFyIG9wdGlvbnNfMSA9IHJlcXVpcmUoXCIuL29wdGlvbnNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJidWlsZEF1dGhlbnRpY2F0b3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9wdGlvbnNfMS5idWlsZEF1dGhlbnRpY2F0b3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjaGVja09wdGlvbnNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9wdGlvbnNfMS5jaGVja09wdGlvbnM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjaGVja1Vuc3VwcG9ydGVkT3B0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBvcHRpb25zXzEuY2hlY2tVbnN1cHBvcnRlZE9wdGlvbjsgfSB9KTtcbnZhciByZXF1ZXN0XzEgPSByZXF1aXJlKFwiLi9yZXF1ZXN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVxdWVzdE9uZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWVzdF8xLlJlcXVlc3RPbmU7IH0gfSk7XG52YXIgYXV0aGVudGljYXRvcl8xID0gcmVxdWlyZShcIi4vYXV0aGVudGljYXRvclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWRzQXV0aGVudGljYXRvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXV0aGVudGljYXRvcl8xLmNyZWRzQXV0aGVudGljYXRvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImp3dEF1dGhlbnRpY2F0b3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1dGhlbnRpY2F0b3JfMS5qd3RBdXRoZW50aWNhdG9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibmtleUF1dGhlbnRpY2F0b3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1dGhlbnRpY2F0b3JfMS5ua2V5QXV0aGVudGljYXRvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRva2VuQXV0aGVudGljYXRvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXV0aGVudGljYXRvcl8xLnRva2VuQXV0aGVudGljYXRvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZXJuYW1lUGFzc3dvcmRBdXRoZW50aWNhdG9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhdXRoZW50aWNhdG9yXzEudXNlcm5hbWVQYXNzd29yZEF1dGhlbnRpY2F0b3I7IH0gfSk7XG52YXIgY29kZWNfMSA9IHJlcXVpcmUoXCIuL2NvZGVjXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSlNPTkNvZGVjXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2RlY18xLkpTT05Db2RlYzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN0cmluZ0NvZGVjXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2RlY18xLlN0cmluZ0NvZGVjOyB9IH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL25rZXlzXCIpLCBleHBvcnRzKTtcbnZhciBxdWV1ZWRfaXRlcmF0b3JfMSA9IHJlcXVpcmUoXCIuL3F1ZXVlZF9pdGVyYXRvclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlF1ZXVlZEl0ZXJhdG9ySW1wbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcXVldWVkX2l0ZXJhdG9yXzEuUXVldWVkSXRlcmF0b3JJbXBsOyB9IH0pO1xudmFyIHBhcnNlcl8xID0gcmVxdWlyZShcIi4vcGFyc2VyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiS2luZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFyc2VyXzEuS2luZDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBhcnNlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFyc2VyXzEuUGFyc2VyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3RhdGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBhcnNlcl8xLlN0YXRlOyB9IH0pO1xudmFyIGRlbm9idWZmZXJfMSA9IHJlcXVpcmUoXCIuL2Rlbm9idWZmZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEZW5vQnVmZmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZW5vYnVmZmVyXzEuRGVub0J1ZmZlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1BWF9TSVpFXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZW5vYnVmZmVyXzEuTUFYX1NJWkU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZWFkQWxsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZW5vYnVmZmVyXzEucmVhZEFsbDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIndyaXRlQWxsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZW5vYnVmZmVyXzEud3JpdGVBbGw7IH0gfSk7XG52YXIgYmVuY2hfMSA9IHJlcXVpcmUoXCIuL2JlbmNoXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQmVuY2hcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJlbmNoXzEuQmVuY2g7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNZXRyaWNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJlbmNoXzEuTWV0cmljOyB9IH0pO1xudmFyIGVuY29kZXJzXzEgPSByZXF1aXJlKFwiLi9lbmNvZGVyc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlREXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbmNvZGVyc18xLlREOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVEVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZXJzXzEuVEU7IH0gfSk7XG52YXIgaXBwYXJzZXJfMSA9IHJlcXVpcmUoXCIuL2lwcGFyc2VyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNJUFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXBwYXJzZXJfMS5pc0lQOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGFyc2VJUFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXBwYXJzZXJfMS5wYXJzZUlQOyB9IH0pO1xudmFyIHR5cGVkc3ViXzEgPSByZXF1aXJlKFwiLi90eXBlZHN1YlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlR5cGVkU3Vic2NyaXB0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlZHN1Yl8xLlR5cGVkU3Vic2NyaXB0aW9uOyB9IH0pO1xudmFyIGt2XzEgPSByZXF1aXJlKFwiLi4vamV0c3RyZWFtL2t2XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQmFzZTY0S2V5Q29kZWNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGt2XzEuQmFzZTY0S2V5Q29kZWM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCdWNrZXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGt2XzEuQnVja2V0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdEJ1Y2tldE9wdHNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGt2XzEuZGVmYXVsdEJ1Y2tldE9wdHM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb29wS3ZDb2RlY3NcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGt2XzEuTm9vcEt2Q29kZWNzOyB9IH0pO1xudmFyIHNlbXZlcl8xID0gcmVxdWlyZShcIi4vc2VtdmVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29tcGFyZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VtdmVyXzEuY29tcGFyZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBhcnNlU2VtVmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZW12ZXJfMS5wYXJzZVNlbVZlcjsgfSB9KTtcbnZhciB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFbXB0eVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHlwZXNfMS5FbXB0eTsgfSB9KTtcbnZhciB0cmFuc3BvcnRfMiA9IHJlcXVpcmUoXCIuL3RyYW5zcG9ydFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImV4dHJhY3RQcm90b2NvbE1lc3NhZ2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRyYW5zcG9ydF8yLmV4dHJhY3RQcm90b2NvbE1lc3NhZ2U7IH0gfSk7XG52YXIgY29yZV8xID0gcmVxdWlyZShcIi4vY29yZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZUluYm94XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlXzEuY3JlYXRlSW5ib3g7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEZWJ1Z0V2ZW50c1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29yZV8xLkRlYnVnRXZlbnRzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXJyb3JDb2RlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlXzEuRXJyb3JDb2RlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXZlbnRzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlXzEuRXZlbnRzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNOYXRzRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmVfMS5pc05hdHNFcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1hdGNoXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlXzEuTWF0Y2g7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOYXRzRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmVfMS5OYXRzRXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0U3RyYXRlZ3lcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmVfMS5SZXF1ZXN0U3RyYXRlZ3k7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTZXJ2aWNlRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmVfMS5TZXJ2aWNlRXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTZXJ2aWNlRXJyb3JDb2RlSGVhZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlXzEuU2VydmljZUVycm9yQ29kZUhlYWRlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNlcnZpY2VFcnJvckhlYWRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29yZV8xLlNlcnZpY2VFcnJvckhlYWRlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNlcnZpY2VSZXNwb25zZVR5cGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmVfMS5TZXJ2aWNlUmVzcG9uc2VUeXBlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2VydmljZVZlcmJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmVfMS5TZXJ2aWNlVmVyYjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN5bmNJdGVyYXRvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29yZV8xLnN5bmNJdGVyYXRvcjsgfSB9KTtcbnZhciBwcm90b2NvbF8yID0gcmVxdWlyZShcIi4vcHJvdG9jb2xcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdWJzY3JpcHRpb25JbXBsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF8yLlN1YnNjcmlwdGlvbkltcGw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdWJzY3JpcHRpb25zXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF8yLlN1YnNjcmlwdGlvbnM7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcm5hbF9tb2QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/internal_mod.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/ipparser.js":
/*!************************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/ipparser.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2020-2021 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseIP = exports.isIP = exports.ipV4 = void 0;\n// JavaScript port of go net/ip/ParseIP\n// https://github.com/golang/go/blob/master/src/net/ip.go\n// Copyright 2009 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\nconst IPv4LEN = 4;\nconst IPv6LEN = 16;\nconst ASCII0 = 48;\nconst ASCII9 = 57;\nconst ASCIIA = 65;\nconst ASCIIF = 70;\nconst ASCIIa = 97;\nconst ASCIIf = 102;\nconst big = 0xFFFFFF;\nfunction ipV4(a, b, c, d) {\n    const ip = new Uint8Array(IPv6LEN);\n    const prefix = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff];\n    prefix.forEach((v, idx) => {\n        ip[idx] = v;\n    });\n    ip[12] = a;\n    ip[13] = b;\n    ip[14] = c;\n    ip[15] = d;\n    return ip;\n}\nexports.ipV4 = ipV4;\nfunction isIP(h) {\n    return parseIP(h) !== undefined;\n}\nexports.isIP = isIP;\nfunction parseIP(h) {\n    for (let i = 0; i < h.length; i++) {\n        switch (h[i]) {\n            case \".\":\n                return parseIPv4(h);\n            case \":\":\n                return parseIPv6(h);\n        }\n    }\n    return;\n}\nexports.parseIP = parseIP;\nfunction parseIPv4(s) {\n    const ip = new Uint8Array(IPv4LEN);\n    for (let i = 0; i < IPv4LEN; i++) {\n        if (s.length === 0) {\n            return undefined;\n        }\n        if (i > 0) {\n            if (s[0] !== \".\") {\n                return undefined;\n            }\n            s = s.substring(1);\n        }\n        const { n, c, ok } = dtoi(s);\n        if (!ok || n > 0xFF) {\n            return undefined;\n        }\n        s = s.substring(c);\n        ip[i] = n;\n    }\n    return ipV4(ip[0], ip[1], ip[2], ip[3]);\n}\nfunction parseIPv6(s) {\n    const ip = new Uint8Array(IPv6LEN);\n    let ellipsis = -1;\n    if (s.length >= 2 && s[0] === \":\" && s[1] === \":\") {\n        ellipsis = 0;\n        s = s.substring(2);\n        if (s.length === 0) {\n            return ip;\n        }\n    }\n    let i = 0;\n    while (i < IPv6LEN) {\n        const { n, c, ok } = xtoi(s);\n        if (!ok || n > 0xFFFF) {\n            return undefined;\n        }\n        if (c < s.length && s[c] === \".\") {\n            if (ellipsis < 0 && i != IPv6LEN - IPv4LEN) {\n                return undefined;\n            }\n            if (i + IPv4LEN > IPv6LEN) {\n                return undefined;\n            }\n            const ip4 = parseIPv4(s);\n            if (ip4 === undefined) {\n                return undefined;\n            }\n            ip[i] = ip4[12];\n            ip[i + 1] = ip4[13];\n            ip[i + 2] = ip4[14];\n            ip[i + 3] = ip4[15];\n            s = \"\";\n            i += IPv4LEN;\n            break;\n        }\n        ip[i] = n >> 8;\n        ip[i + 1] = n;\n        i += 2;\n        s = s.substring(c);\n        if (s.length === 0) {\n            break;\n        }\n        if (s[0] !== \":\" || s.length == 1) {\n            return undefined;\n        }\n        s = s.substring(1);\n        if (s[0] === \":\") {\n            if (ellipsis >= 0) {\n                return undefined;\n            }\n            ellipsis = i;\n            s = s.substring(1);\n            if (s.length === 0) {\n                break;\n            }\n        }\n    }\n    if (s.length !== 0) {\n        return undefined;\n    }\n    if (i < IPv6LEN) {\n        if (ellipsis < 0) {\n            return undefined;\n        }\n        const n = IPv6LEN - i;\n        for (let j = i - 1; j >= ellipsis; j--) {\n            ip[j + n] = ip[j];\n        }\n        for (let j = ellipsis + n - 1; j >= ellipsis; j--) {\n            ip[j] = 0;\n        }\n    }\n    else if (ellipsis >= 0) {\n        return undefined;\n    }\n    return ip;\n}\nfunction dtoi(s) {\n    let i = 0;\n    let n = 0;\n    for (i = 0; i < s.length && ASCII0 <= s.charCodeAt(i) && s.charCodeAt(i) <= ASCII9; i++) {\n        n = n * 10 + (s.charCodeAt(i) - ASCII0);\n        if (n >= big) {\n            return { n: big, c: i, ok: false };\n        }\n    }\n    if (i === 0) {\n        return { n: 0, c: 0, ok: false };\n    }\n    return { n: n, c: i, ok: true };\n}\nfunction xtoi(s) {\n    let n = 0;\n    let i = 0;\n    for (i = 0; i < s.length; i++) {\n        if (ASCII0 <= s.charCodeAt(i) && s.charCodeAt(i) <= ASCII9) {\n            n *= 16;\n            n += s.charCodeAt(i) - ASCII0;\n        }\n        else if (ASCIIa <= s.charCodeAt(i) && s.charCodeAt(i) <= ASCIIf) {\n            n *= 16;\n            n += (s.charCodeAt(i) - ASCIIa) + 10;\n        }\n        else if (ASCIIA <= s.charCodeAt(i) && s.charCodeAt(i) <= ASCIIF) {\n            n *= 16;\n            n += (s.charCodeAt(i) - ASCIIA) + 10;\n        }\n        else {\n            break;\n        }\n        if (n >= big) {\n            return { n: 0, c: i, ok: false };\n        }\n    }\n    if (i === 0) {\n        return { n: 0, c: i, ok: false };\n    }\n    return { n: n, c: i, ok: true };\n}\n//# sourceMappingURL=ipparser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/ipparser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/mod.js":
/*!*******************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/mod.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.usernamePasswordAuthenticator = exports.tokenAuthenticator = exports.syncIterator = exports.StringCodec = exports.ServiceVerb = exports.ServiceResponseType = exports.ServiceErrorHeader = exports.ServiceErrorCodeHeader = exports.ServiceError = exports.RequestStrategy = exports.nuid = exports.Nuid = exports.nkeys = exports.nkeyAuthenticator = exports.NatsError = exports.MsgHdrsImpl = exports.Metric = exports.Match = exports.jwtAuthenticator = exports.JSONCodec = exports.headers = exports.Events = exports.ErrorCode = exports.Empty = exports.delay = exports.deferred = exports.DebugEvents = exports.deadline = exports.credsAuthenticator = exports.createInbox = exports.canonicalMIMEHeaderKey = exports.buildAuthenticator = exports.Bench = exports.backoff = void 0;\nvar internal_mod_1 = __webpack_require__(/*! ./internal_mod */ \"(rsc)/./node_modules/nats/lib/nats-base-client/internal_mod.js\");\nObject.defineProperty(exports, \"backoff\", ({ enumerable: true, get: function () { return internal_mod_1.backoff; } }));\nObject.defineProperty(exports, \"Bench\", ({ enumerable: true, get: function () { return internal_mod_1.Bench; } }));\nObject.defineProperty(exports, \"buildAuthenticator\", ({ enumerable: true, get: function () { return internal_mod_1.buildAuthenticator; } }));\nObject.defineProperty(exports, \"canonicalMIMEHeaderKey\", ({ enumerable: true, get: function () { return internal_mod_1.canonicalMIMEHeaderKey; } }));\nObject.defineProperty(exports, \"createInbox\", ({ enumerable: true, get: function () { return internal_mod_1.createInbox; } }));\nObject.defineProperty(exports, \"credsAuthenticator\", ({ enumerable: true, get: function () { return internal_mod_1.credsAuthenticator; } }));\nObject.defineProperty(exports, \"deadline\", ({ enumerable: true, get: function () { return internal_mod_1.deadline; } }));\nObject.defineProperty(exports, \"DebugEvents\", ({ enumerable: true, get: function () { return internal_mod_1.DebugEvents; } }));\nObject.defineProperty(exports, \"deferred\", ({ enumerable: true, get: function () { return internal_mod_1.deferred; } }));\nObject.defineProperty(exports, \"delay\", ({ enumerable: true, get: function () { return internal_mod_1.delay; } }));\nObject.defineProperty(exports, \"Empty\", ({ enumerable: true, get: function () { return internal_mod_1.Empty; } }));\nObject.defineProperty(exports, \"ErrorCode\", ({ enumerable: true, get: function () { return internal_mod_1.ErrorCode; } }));\nObject.defineProperty(exports, \"Events\", ({ enumerable: true, get: function () { return internal_mod_1.Events; } }));\nObject.defineProperty(exports, \"headers\", ({ enumerable: true, get: function () { return internal_mod_1.headers; } }));\nObject.defineProperty(exports, \"JSONCodec\", ({ enumerable: true, get: function () { return internal_mod_1.JSONCodec; } }));\nObject.defineProperty(exports, \"jwtAuthenticator\", ({ enumerable: true, get: function () { return internal_mod_1.jwtAuthenticator; } }));\nObject.defineProperty(exports, \"Match\", ({ enumerable: true, get: function () { return internal_mod_1.Match; } }));\nObject.defineProperty(exports, \"Metric\", ({ enumerable: true, get: function () { return internal_mod_1.Metric; } }));\nObject.defineProperty(exports, \"MsgHdrsImpl\", ({ enumerable: true, get: function () { return internal_mod_1.MsgHdrsImpl; } }));\nObject.defineProperty(exports, \"NatsError\", ({ enumerable: true, get: function () { return internal_mod_1.NatsError; } }));\nObject.defineProperty(exports, \"nkeyAuthenticator\", ({ enumerable: true, get: function () { return internal_mod_1.nkeyAuthenticator; } }));\nObject.defineProperty(exports, \"nkeys\", ({ enumerable: true, get: function () { return internal_mod_1.nkeys; } }));\nObject.defineProperty(exports, \"Nuid\", ({ enumerable: true, get: function () { return internal_mod_1.Nuid; } }));\nObject.defineProperty(exports, \"nuid\", ({ enumerable: true, get: function () { return internal_mod_1.nuid; } }));\nObject.defineProperty(exports, \"RequestStrategy\", ({ enumerable: true, get: function () { return internal_mod_1.RequestStrategy; } }));\nObject.defineProperty(exports, \"ServiceError\", ({ enumerable: true, get: function () { return internal_mod_1.ServiceError; } }));\nObject.defineProperty(exports, \"ServiceErrorCodeHeader\", ({ enumerable: true, get: function () { return internal_mod_1.ServiceErrorCodeHeader; } }));\nObject.defineProperty(exports, \"ServiceErrorHeader\", ({ enumerable: true, get: function () { return internal_mod_1.ServiceErrorHeader; } }));\nObject.defineProperty(exports, \"ServiceResponseType\", ({ enumerable: true, get: function () { return internal_mod_1.ServiceResponseType; } }));\nObject.defineProperty(exports, \"ServiceVerb\", ({ enumerable: true, get: function () { return internal_mod_1.ServiceVerb; } }));\nObject.defineProperty(exports, \"StringCodec\", ({ enumerable: true, get: function () { return internal_mod_1.StringCodec; } }));\nObject.defineProperty(exports, \"syncIterator\", ({ enumerable: true, get: function () { return internal_mod_1.syncIterator; } }));\nObject.defineProperty(exports, \"tokenAuthenticator\", ({ enumerable: true, get: function () { return internal_mod_1.tokenAuthenticator; } }));\nObject.defineProperty(exports, \"usernamePasswordAuthenticator\", ({ enumerable: true, get: function () { return internal_mod_1.usernamePasswordAuthenticator; } }));\n//# sourceMappingURL=mod.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/mod.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/msg.js":
/*!*******************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/msg.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MsgImpl = exports.isRequestError = void 0;\n/*\n * Copyright 2020-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst headers_1 = __webpack_require__(/*! ./headers */ \"(rsc)/./node_modules/nats/lib/nats-base-client/headers.js\");\nconst encoders_1 = __webpack_require__(/*! ./encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nconst codec_1 = __webpack_require__(/*! ./codec */ \"(rsc)/./node_modules/nats/lib/nats-base-client/codec.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nfunction isRequestError(msg) {\n    var _a;\n    // NATS core only considers errors 503s on messages that have no payload\n    // everything else simply forwarded as part of the message and is considered\n    // application level information\n    if (msg && msg.data.length === 0 && ((_a = msg.headers) === null || _a === void 0 ? void 0 : _a.code) === 503) {\n        return core_1.NatsError.errorForCode(core_1.ErrorCode.NoResponders);\n    }\n    return null;\n}\nexports.isRequestError = isRequestError;\nclass MsgImpl {\n    constructor(msg, data, publisher) {\n        this._msg = msg;\n        this._rdata = data;\n        this.publisher = publisher;\n    }\n    get subject() {\n        if (this._subject) {\n            return this._subject;\n        }\n        this._subject = encoders_1.TD.decode(this._msg.subject);\n        return this._subject;\n    }\n    get reply() {\n        if (this._reply) {\n            return this._reply;\n        }\n        this._reply = encoders_1.TD.decode(this._msg.reply);\n        return this._reply;\n    }\n    get sid() {\n        return this._msg.sid;\n    }\n    get headers() {\n        if (this._msg.hdr > -1 && !this._headers) {\n            const buf = this._rdata.subarray(0, this._msg.hdr);\n            this._headers = headers_1.MsgHdrsImpl.decode(buf);\n        }\n        return this._headers;\n    }\n    get data() {\n        if (!this._rdata) {\n            return new Uint8Array(0);\n        }\n        return this._msg.hdr > -1\n            ? this._rdata.subarray(this._msg.hdr)\n            : this._rdata;\n    }\n    // eslint-ignore-next-line @typescript-eslint/no-explicit-any\n    respond(data = encoders_1.Empty, opts) {\n        if (this.reply) {\n            this.publisher.publish(this.reply, data, opts);\n            return true;\n        }\n        return false;\n    }\n    size() {\n        var _a;\n        const subj = this._msg.subject.length;\n        const reply = ((_a = this._msg.reply) === null || _a === void 0 ? void 0 : _a.length) || 0;\n        const payloadAndHeaders = this._msg.size === -1 ? 0 : this._msg.size;\n        return subj + reply + payloadAndHeaders;\n    }\n    json(reviver) {\n        return (0, codec_1.JSONCodec)(reviver).decode(this.data);\n    }\n    string() {\n        return encoders_1.TD.decode(this.data);\n    }\n}\nexports.MsgImpl = MsgImpl;\n//# sourceMappingURL=msg.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9tc2cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZSxHQUFHLHNCQUFzQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMsNEVBQVc7QUFDckMsbUJBQW1CLG1CQUFPLENBQUMsOEVBQVk7QUFDdkMsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQVM7QUFDakMsZUFBZSxtQkFBTyxDQUFDLHNFQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL25hdHMvbGliL25hdHMtYmFzZS1jbGllbnQvbXNnLmpzPzZiNjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1zZ0ltcGwgPSBleHBvcnRzLmlzUmVxdWVzdEVycm9yID0gdm9pZCAwO1xuLypcbiAqIENvcHlyaWdodCAyMDIwLTIwMjMgVGhlIE5BVFMgQXV0aG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNvbnN0IGhlYWRlcnNfMSA9IHJlcXVpcmUoXCIuL2hlYWRlcnNcIik7XG5jb25zdCBlbmNvZGVyc18xID0gcmVxdWlyZShcIi4vZW5jb2RlcnNcIik7XG5jb25zdCBjb2RlY18xID0gcmVxdWlyZShcIi4vY29kZWNcIik7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiLi9jb3JlXCIpO1xuZnVuY3Rpb24gaXNSZXF1ZXN0RXJyb3IobXNnKSB7XG4gICAgdmFyIF9hO1xuICAgIC8vIE5BVFMgY29yZSBvbmx5IGNvbnNpZGVycyBlcnJvcnMgNTAzcyBvbiBtZXNzYWdlcyB0aGF0IGhhdmUgbm8gcGF5bG9hZFxuICAgIC8vIGV2ZXJ5dGhpbmcgZWxzZSBzaW1wbHkgZm9yd2FyZGVkIGFzIHBhcnQgb2YgdGhlIG1lc3NhZ2UgYW5kIGlzIGNvbnNpZGVyZWRcbiAgICAvLyBhcHBsaWNhdGlvbiBsZXZlbCBpbmZvcm1hdGlvblxuICAgIGlmIChtc2cgJiYgbXNnLmRhdGEubGVuZ3RoID09PSAwICYmICgoX2EgPSBtc2cuaGVhZGVycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvZGUpID09PSA1MDMpIHtcbiAgICAgICAgcmV0dXJuIGNvcmVfMS5OYXRzRXJyb3IuZXJyb3JGb3JDb2RlKGNvcmVfMS5FcnJvckNvZGUuTm9SZXNwb25kZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnRzLmlzUmVxdWVzdEVycm9yID0gaXNSZXF1ZXN0RXJyb3I7XG5jbGFzcyBNc2dJbXBsIHtcbiAgICBjb25zdHJ1Y3Rvcihtc2csIGRhdGEsIHB1Ymxpc2hlcikge1xuICAgICAgICB0aGlzLl9tc2cgPSBtc2c7XG4gICAgICAgIHRoaXMuX3JkYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5wdWJsaXNoZXIgPSBwdWJsaXNoZXI7XG4gICAgfVxuICAgIGdldCBzdWJqZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5fc3ViamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3ViamVjdCA9IGVuY29kZXJzXzEuVEQuZGVjb2RlKHRoaXMuX21zZy5zdWJqZWN0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1YmplY3Q7XG4gICAgfVxuICAgIGdldCByZXBseSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlcGx5KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVwbHk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVwbHkgPSBlbmNvZGVyc18xLlRELmRlY29kZSh0aGlzLl9tc2cucmVwbHkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVwbHk7XG4gICAgfVxuICAgIGdldCBzaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tc2cuc2lkO1xuICAgIH1cbiAgICBnZXQgaGVhZGVycygpIHtcbiAgICAgICAgaWYgKHRoaXMuX21zZy5oZHIgPiAtMSAmJiAhdGhpcy5faGVhZGVycykge1xuICAgICAgICAgICAgY29uc3QgYnVmID0gdGhpcy5fcmRhdGEuc3ViYXJyYXkoMCwgdGhpcy5fbXNnLmhkcik7XG4gICAgICAgICAgICB0aGlzLl9oZWFkZXJzID0gaGVhZGVyc18xLk1zZ0hkcnNJbXBsLmRlY29kZShidWYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9oZWFkZXJzO1xuICAgIH1cbiAgICBnZXQgZGF0YSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9yZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9tc2cuaGRyID4gLTFcbiAgICAgICAgICAgID8gdGhpcy5fcmRhdGEuc3ViYXJyYXkodGhpcy5fbXNnLmhkcilcbiAgICAgICAgICAgIDogdGhpcy5fcmRhdGE7XG4gICAgfVxuICAgIC8vIGVzbGludC1pZ25vcmUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICByZXNwb25kKGRhdGEgPSBlbmNvZGVyc18xLkVtcHR5LCBvcHRzKSB7XG4gICAgICAgIGlmICh0aGlzLnJlcGx5KSB7XG4gICAgICAgICAgICB0aGlzLnB1Ymxpc2hlci5wdWJsaXNoKHRoaXMucmVwbHksIGRhdGEsIG9wdHMpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBzaXplKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHN1YmogPSB0aGlzLl9tc2cuc3ViamVjdC5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHJlcGx5ID0gKChfYSA9IHRoaXMuX21zZy5yZXBseSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgfHwgMDtcbiAgICAgICAgY29uc3QgcGF5bG9hZEFuZEhlYWRlcnMgPSB0aGlzLl9tc2cuc2l6ZSA9PT0gLTEgPyAwIDogdGhpcy5fbXNnLnNpemU7XG4gICAgICAgIHJldHVybiBzdWJqICsgcmVwbHkgKyBwYXlsb2FkQW5kSGVhZGVycztcbiAgICB9XG4gICAganNvbihyZXZpdmVyKSB7XG4gICAgICAgIHJldHVybiAoMCwgY29kZWNfMS5KU09OQ29kZWMpKHJldml2ZXIpLmRlY29kZSh0aGlzLmRhdGEpO1xuICAgIH1cbiAgICBzdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBlbmNvZGVyc18xLlRELmRlY29kZSh0aGlzLmRhdGEpO1xuICAgIH1cbn1cbmV4cG9ydHMuTXNnSW1wbCA9IE1zZ0ltcGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tc2cuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/msg.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/muxsubscription.js":
/*!*******************************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/muxsubscription.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MuxSubscription = void 0;\n/*\n * Copyright 2020-2021 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst msg_1 = __webpack_require__(/*! ./msg */ \"(rsc)/./node_modules/nats/lib/nats-base-client/msg.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nclass MuxSubscription {\n    constructor() {\n        this.reqs = new Map();\n    }\n    size() {\n        return this.reqs.size;\n    }\n    init(prefix) {\n        this.baseInbox = `${(0, core_1.createInbox)(prefix)}.`;\n        return this.baseInbox;\n    }\n    add(r) {\n        if (!isNaN(r.received)) {\n            r.received = 0;\n        }\n        this.reqs.set(r.token, r);\n    }\n    get(token) {\n        return this.reqs.get(token);\n    }\n    cancel(r) {\n        this.reqs.delete(r.token);\n    }\n    getToken(m) {\n        const s = m.subject || \"\";\n        if (s.indexOf(this.baseInbox) === 0) {\n            return s.substring(this.baseInbox.length);\n        }\n        return null;\n    }\n    all() {\n        return Array.from(this.reqs.values());\n    }\n    handleError(isMuxPermissionError, err) {\n        if (err && err.permissionContext) {\n            if (isMuxPermissionError) {\n                // one or more requests queued but mux cannot process them\n                this.all().forEach((r) => {\n                    r.resolver(err, {});\n                });\n                return true;\n            }\n            const ctx = err.permissionContext;\n            if (ctx.operation === \"publish\") {\n                const req = this.all().find((s) => {\n                    return s.requestSubject === ctx.subject;\n                });\n                if (req) {\n                    req.resolver(err, {});\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    dispatcher() {\n        return (err, m) => {\n            const token = this.getToken(m);\n            if (token) {\n                const r = this.get(token);\n                if (r) {\n                    if (err === null && m.headers) {\n                        err = (0, msg_1.isRequestError)(m);\n                    }\n                    r.resolver(err, m);\n                }\n            }\n        };\n    }\n    close() {\n        const err = core_1.NatsError.errorForCode(core_1.ErrorCode.Timeout);\n        this.reqs.forEach((req) => {\n            req.resolver(err, {});\n        });\n    }\n}\nexports.MuxSubscription = MuxSubscription;\n//# sourceMappingURL=muxsubscription.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9tdXhzdWJzY3JpcHRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG1CQUFPLENBQUMsb0VBQU87QUFDN0IsZUFBZSxtQkFBTyxDQUFDLHNFQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsZ0NBQWdDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEMsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLFNBQVM7QUFDVDtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9tdXhzdWJzY3JpcHRpb24uanM/NThjNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTXV4U3Vic2NyaXB0aW9uID0gdm9pZCAwO1xuLypcbiAqIENvcHlyaWdodCAyMDIwLTIwMjEgVGhlIE5BVFMgQXV0aG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNvbnN0IG1zZ18xID0gcmVxdWlyZShcIi4vbXNnXCIpO1xuY29uc3QgY29yZV8xID0gcmVxdWlyZShcIi4vY29yZVwiKTtcbmNsYXNzIE11eFN1YnNjcmlwdGlvbiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucmVxcyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxcy5zaXplO1xuICAgIH1cbiAgICBpbml0KHByZWZpeCkge1xuICAgICAgICB0aGlzLmJhc2VJbmJveCA9IGAkeygwLCBjb3JlXzEuY3JlYXRlSW5ib3gpKHByZWZpeCl9LmA7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VJbmJveDtcbiAgICB9XG4gICAgYWRkKHIpIHtcbiAgICAgICAgaWYgKCFpc05hTihyLnJlY2VpdmVkKSkge1xuICAgICAgICAgICAgci5yZWNlaXZlZCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXFzLnNldChyLnRva2VuLCByKTtcbiAgICB9XG4gICAgZ2V0KHRva2VuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXMuZ2V0KHRva2VuKTtcbiAgICB9XG4gICAgY2FuY2VsKHIpIHtcbiAgICAgICAgdGhpcy5yZXFzLmRlbGV0ZShyLnRva2VuKTtcbiAgICB9XG4gICAgZ2V0VG9rZW4obSkge1xuICAgICAgICBjb25zdCBzID0gbS5zdWJqZWN0IHx8IFwiXCI7XG4gICAgICAgIGlmIChzLmluZGV4T2YodGhpcy5iYXNlSW5ib3gpID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcy5zdWJzdHJpbmcodGhpcy5iYXNlSW5ib3gubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgYWxsKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnJlcXMudmFsdWVzKCkpO1xuICAgIH1cbiAgICBoYW5kbGVFcnJvcihpc011eFBlcm1pc3Npb25FcnJvciwgZXJyKSB7XG4gICAgICAgIGlmIChlcnIgJiYgZXJyLnBlcm1pc3Npb25Db250ZXh0KSB7XG4gICAgICAgICAgICBpZiAoaXNNdXhQZXJtaXNzaW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBvbmUgb3IgbW9yZSByZXF1ZXN0cyBxdWV1ZWQgYnV0IG11eCBjYW5ub3QgcHJvY2VzcyB0aGVtXG4gICAgICAgICAgICAgICAgdGhpcy5hbGwoKS5mb3JFYWNoKChyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHIucmVzb2x2ZXIoZXJyLCB7fSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjdHggPSBlcnIucGVybWlzc2lvbkNvbnRleHQ7XG4gICAgICAgICAgICBpZiAoY3R4Lm9wZXJhdGlvbiA9PT0gXCJwdWJsaXNoXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXEgPSB0aGlzLmFsbCgpLmZpbmQoKHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMucmVxdWVzdFN1YmplY3QgPT09IGN0eC5zdWJqZWN0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChyZXEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxLnJlc29sdmVyKGVyciwge30pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBkaXNwYXRjaGVyKCkge1xuICAgICAgICByZXR1cm4gKGVyciwgbSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmdldFRva2VuKG0pO1xuICAgICAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHRoaXMuZ2V0KHRva2VuKTtcbiAgICAgICAgICAgICAgICBpZiAocikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyID09PSBudWxsICYmIG0uaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyID0gKDAsIG1zZ18xLmlzUmVxdWVzdEVycm9yKShtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByLnJlc29sdmVyKGVyciwgbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgY29uc3QgZXJyID0gY29yZV8xLk5hdHNFcnJvci5lcnJvckZvckNvZGUoY29yZV8xLkVycm9yQ29kZS5UaW1lb3V0KTtcbiAgICAgICAgdGhpcy5yZXFzLmZvckVhY2goKHJlcSkgPT4ge1xuICAgICAgICAgICAgcmVxLnJlc29sdmVyKGVyciwge30pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLk11eFN1YnNjcmlwdGlvbiA9IE11eFN1YnNjcmlwdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11eHN1YnNjcmlwdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/muxsubscription.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/nats.js":
/*!********************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/nats.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright 2018-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServicesFactory = exports.NatsConnectionImpl = void 0;\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/nats/lib/nats-base-client/util.js\");\nconst protocol_1 = __webpack_require__(/*! ./protocol */ \"(rsc)/./node_modules/nats/lib/nats-base-client/protocol.js\");\nconst encoders_1 = __webpack_require__(/*! ./encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/nats/lib/nats-base-client/types.js\");\nconst semver_1 = __webpack_require__(/*! ./semver */ \"(rsc)/./node_modules/nats/lib/nats-base-client/semver.js\");\nconst options_1 = __webpack_require__(/*! ./options */ \"(rsc)/./node_modules/nats/lib/nats-base-client/options.js\");\nconst queued_iterator_1 = __webpack_require__(/*! ./queued_iterator */ \"(rsc)/./node_modules/nats/lib/nats-base-client/queued_iterator.js\");\nconst request_1 = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/nats/lib/nats-base-client/request.js\");\nconst msg_1 = __webpack_require__(/*! ./msg */ \"(rsc)/./node_modules/nats/lib/nats-base-client/msg.js\");\nconst jsm_1 = __webpack_require__(/*! ../jetstream/jsm */ \"(rsc)/./node_modules/nats/lib/jetstream/jsm.js\");\nconst jsclient_1 = __webpack_require__(/*! ../jetstream/jsclient */ \"(rsc)/./node_modules/nats/lib/jetstream/jsclient.js\");\nconst service_1 = __webpack_require__(/*! ./service */ \"(rsc)/./node_modules/nats/lib/nats-base-client/service.js\");\nconst serviceclient_1 = __webpack_require__(/*! ./serviceclient */ \"(rsc)/./node_modules/nats/lib/nats-base-client/serviceclient.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nclass NatsConnectionImpl {\n    constructor(opts) {\n        this.draining = false;\n        this.options = (0, options_1.parseOptions)(opts);\n        this.listeners = [];\n    }\n    static connect(opts = {}) {\n        return new Promise((resolve, reject) => {\n            const nc = new NatsConnectionImpl(opts);\n            protocol_1.ProtocolHandler.connect(nc.options, nc)\n                .then((ph) => {\n                nc.protocol = ph;\n                (function () {\n                    var _a, e_1, _b, _c;\n                    return __awaiter(this, void 0, void 0, function* () {\n                        try {\n                            for (var _d = true, _e = __asyncValues(ph.status()), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {\n                                _c = _f.value;\n                                _d = false;\n                                const s = _c;\n                                nc.listeners.forEach((l) => {\n                                    l.push(s);\n                                });\n                            }\n                        }\n                        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                        finally {\n                            try {\n                                if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);\n                            }\n                            finally { if (e_1) throw e_1.error; }\n                        }\n                    });\n                })();\n                resolve(nc);\n            })\n                .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n    closed() {\n        return this.protocol.closed;\n    }\n    close() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.protocol.close();\n        });\n    }\n    _check(subject, sub, pub) {\n        if (this.isClosed()) {\n            throw types_1.NatsError.errorForCode(core_1.ErrorCode.ConnectionClosed);\n        }\n        if (sub && this.isDraining()) {\n            throw types_1.NatsError.errorForCode(core_1.ErrorCode.ConnectionDraining);\n        }\n        if (pub && this.protocol.noMorePublishing) {\n            throw types_1.NatsError.errorForCode(core_1.ErrorCode.ConnectionDraining);\n        }\n        subject = subject || \"\";\n        if (subject.length === 0) {\n            throw types_1.NatsError.errorForCode(core_1.ErrorCode.BadSubject);\n        }\n    }\n    publish(subject, data, options) {\n        this._check(subject, false, true);\n        this.protocol.publish(subject, data, options);\n    }\n    subscribe(subject, opts = {}) {\n        this._check(subject, true, false);\n        const sub = new protocol_1.SubscriptionImpl(this.protocol, subject, opts);\n        this.protocol.subscribe(sub);\n        return sub;\n    }\n    _resub(s, subject, max) {\n        this._check(subject, true, false);\n        const si = s;\n        // FIXME: need way of understanding a callbacks processed\n        //   count without it, we cannot really do much - ie\n        //   for rejected messages, the count would be lower, etc.\n        //   To handle cases were for example KV is building a map\n        //   the consumer would say how many messages we need to do\n        //   a proper build before we can handle updates.\n        si.max = max; // this might clear it\n        if (max) {\n            // we cannot auto-unsub, because we don't know the\n            // number of messages we processed vs received\n            // allow the auto-unsub on processMsg to work if they\n            // we were called with a new max\n            si.max = max + si.received;\n        }\n        this.protocol.resub(si, subject);\n    }\n    // possibilities are:\n    // stop on error or any non-100 status\n    // AND:\n    // - wait for timer\n    // - wait for n messages or timer\n    // - wait for unknown messages, done when empty or reset timer expires (with possible alt wait)\n    // - wait for unknown messages, done when an empty payload is received or timer expires (with possible alt wait)\n    requestMany(subject, data = encoders_1.Empty, opts = { maxWait: 1000, maxMessages: -1 }) {\n        const asyncTraces = !(this.protocol.options.noAsyncTraces || false);\n        try {\n            this._check(subject, true, true);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n        opts.strategy = opts.strategy || core_1.RequestStrategy.Timer;\n        opts.maxWait = opts.maxWait || 1000;\n        if (opts.maxWait < 1) {\n            return Promise.reject(new types_1.NatsError(\"timeout\", core_1.ErrorCode.InvalidOption));\n        }\n        // the iterator for user results\n        const qi = new queued_iterator_1.QueuedIteratorImpl();\n        function stop(err) {\n            //@ts-ignore: stop function\n            qi.push(() => {\n                qi.stop(err);\n            });\n        }\n        // callback for the subscription or the mux handler\n        // simply pushes errors and messages into the iterator\n        function callback(err, msg) {\n            if (err || msg === null) {\n                stop(err === null ? undefined : err);\n            }\n            else {\n                qi.push(msg);\n            }\n        }\n        if (opts.noMux) {\n            // we setup a subscription and manage it\n            const stack = asyncTraces ? new Error().stack : null;\n            let max = typeof opts.maxMessages === \"number\" && opts.maxMessages > 0\n                ? opts.maxMessages\n                : -1;\n            const sub = this.subscribe((0, core_1.createInbox)(this.options.inboxPrefix), {\n                callback: (err, msg) => {\n                    var _a, _b;\n                    // we only expect runtime errors or a no responders\n                    if (((_a = msg === null || msg === void 0 ? void 0 : msg.data) === null || _a === void 0 ? void 0 : _a.length) === 0 &&\n                        ((_b = msg === null || msg === void 0 ? void 0 : msg.headers) === null || _b === void 0 ? void 0 : _b.status) === core_1.ErrorCode.NoResponders) {\n                        err = types_1.NatsError.errorForCode(core_1.ErrorCode.NoResponders);\n                    }\n                    // augment any error with the current stack to provide context\n                    // for the error on the suer code\n                    if (err) {\n                        if (stack) {\n                            err.stack += `\\n\\n${stack}`;\n                        }\n                        cancel(err);\n                        return;\n                    }\n                    // push the message\n                    callback(null, msg);\n                    // see if the m request is completed\n                    if (opts.strategy === core_1.RequestStrategy.Count) {\n                        max--;\n                        if (max === 0) {\n                            cancel();\n                        }\n                    }\n                    if (opts.strategy === core_1.RequestStrategy.JitterTimer) {\n                        clearTimers();\n                        timer = setTimeout(() => {\n                            cancel();\n                        }, 300);\n                    }\n                    if (opts.strategy === core_1.RequestStrategy.SentinelMsg) {\n                        if (msg && msg.data.length === 0) {\n                            cancel();\n                        }\n                    }\n                },\n            });\n            sub.closed\n                .then(() => {\n                stop();\n            })\n                .catch((err) => {\n                qi.stop(err);\n            });\n            const cancel = (err) => {\n                if (err) {\n                    //@ts-ignore: error\n                    qi.push(() => {\n                        throw err;\n                    });\n                }\n                clearTimers();\n                sub.drain()\n                    .then(() => {\n                    stop();\n                })\n                    .catch((_err) => {\n                    stop();\n                });\n            };\n            qi.iterClosed\n                .then(() => {\n                clearTimers();\n                sub === null || sub === void 0 ? void 0 : sub.unsubscribe();\n            })\n                .catch((_err) => {\n                clearTimers();\n                sub === null || sub === void 0 ? void 0 : sub.unsubscribe();\n            });\n            try {\n                this.publish(subject, data, { reply: sub.getSubject() });\n            }\n            catch (err) {\n                cancel(err);\n            }\n            let timer = setTimeout(() => {\n                cancel();\n            }, opts.maxWait);\n            const clearTimers = () => {\n                if (timer) {\n                    clearTimeout(timer);\n                }\n            };\n        }\n        else {\n            // the ingestion is the RequestMany\n            const rmo = opts;\n            rmo.callback = callback;\n            qi.iterClosed.then(() => {\n                r.cancel();\n            }).catch((err) => {\n                r.cancel(err);\n            });\n            const r = new request_1.RequestMany(this.protocol.muxSubscriptions, subject, rmo);\n            this.protocol.request(r);\n            try {\n                this.publish(subject, data, {\n                    reply: `${this.protocol.muxSubscriptions.baseInbox}${r.token}`,\n                    headers: opts.headers,\n                });\n            }\n            catch (err) {\n                r.cancel(err);\n            }\n        }\n        return Promise.resolve(qi);\n    }\n    request(subject, data, opts = { timeout: 1000, noMux: false }) {\n        try {\n            this._check(subject, true, true);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n        const asyncTraces = !(this.protocol.options.noAsyncTraces || false);\n        opts.timeout = opts.timeout || 1000;\n        if (opts.timeout < 1) {\n            return Promise.reject(new types_1.NatsError(\"timeout\", core_1.ErrorCode.InvalidOption));\n        }\n        if (!opts.noMux && opts.reply) {\n            return Promise.reject(new types_1.NatsError(\"reply can only be used with noMux\", core_1.ErrorCode.InvalidOption));\n        }\n        if (opts.noMux) {\n            const inbox = opts.reply\n                ? opts.reply\n                : (0, core_1.createInbox)(this.options.inboxPrefix);\n            const d = (0, util_1.deferred)();\n            const errCtx = asyncTraces ? new Error() : null;\n            const sub = this.subscribe(inbox, {\n                max: 1,\n                timeout: opts.timeout,\n                callback: (err, msg) => {\n                    if (err) {\n                        // timeouts from `timeout()` will have the proper stack\n                        if (errCtx && err.code !== core_1.ErrorCode.Timeout) {\n                            err.stack += `\\n\\n${errCtx.stack}`;\n                        }\n                        d.reject(err);\n                    }\n                    else {\n                        err = (0, msg_1.isRequestError)(msg);\n                        if (err) {\n                            // if we failed here, help the developer by showing what failed\n                            if (errCtx) {\n                                err.stack += `\\n\\n${errCtx.stack}`;\n                            }\n                            d.reject(err);\n                        }\n                        else {\n                            d.resolve(msg);\n                        }\n                    }\n                },\n            });\n            sub.requestSubject = subject;\n            this.protocol.publish(subject, data, {\n                reply: inbox,\n                headers: opts.headers,\n            });\n            return d;\n        }\n        else {\n            const r = new request_1.RequestOne(this.protocol.muxSubscriptions, subject, opts, asyncTraces);\n            this.protocol.request(r);\n            try {\n                this.publish(subject, data, {\n                    reply: `${this.protocol.muxSubscriptions.baseInbox}${r.token}`,\n                    headers: opts.headers,\n                });\n            }\n            catch (err) {\n                r.cancel(err);\n            }\n            const p = Promise.race([r.timer, r.deferred]);\n            p.catch(() => {\n                r.cancel();\n            });\n            return p;\n        }\n    }\n    /** *\n     * Flushes to the server. Promise resolves when round-trip completes.\n     * @returns {Promise<void>}\n     */\n    flush() {\n        if (this.isClosed()) {\n            return Promise.reject(types_1.NatsError.errorForCode(core_1.ErrorCode.ConnectionClosed));\n        }\n        return this.protocol.flush();\n    }\n    drain() {\n        if (this.isClosed()) {\n            return Promise.reject(types_1.NatsError.errorForCode(core_1.ErrorCode.ConnectionClosed));\n        }\n        if (this.isDraining()) {\n            return Promise.reject(types_1.NatsError.errorForCode(core_1.ErrorCode.ConnectionDraining));\n        }\n        this.draining = true;\n        return this.protocol.drain();\n    }\n    isClosed() {\n        return this.protocol.isClosed();\n    }\n    isDraining() {\n        return this.draining;\n    }\n    getServer() {\n        const srv = this.protocol.getServer();\n        return srv ? srv.listen : \"\";\n    }\n    status() {\n        const iter = new queued_iterator_1.QueuedIteratorImpl();\n        iter.iterClosed.then(() => {\n            const idx = this.listeners.indexOf(iter);\n            this.listeners.splice(idx, 1);\n        });\n        this.listeners.push(iter);\n        return iter;\n    }\n    get info() {\n        return this.protocol.isClosed() ? undefined : this.protocol.info;\n    }\n    stats() {\n        return {\n            inBytes: this.protocol.inBytes,\n            outBytes: this.protocol.outBytes,\n            inMsgs: this.protocol.inMsgs,\n            outMsgs: this.protocol.outMsgs,\n        };\n    }\n    jetstreamManager(opts = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const adm = new jsm_1.JetStreamManagerImpl(this, opts);\n            if (opts.checkAPI !== false) {\n                try {\n                    yield adm.getAccountInfo();\n                }\n                catch (err) {\n                    const ne = err;\n                    if (ne.code === core_1.ErrorCode.NoResponders) {\n                        ne.code = core_1.ErrorCode.JetStreamNotEnabled;\n                    }\n                    throw ne;\n                }\n            }\n            return adm;\n        });\n    }\n    jetstream(opts = {}) {\n        return new jsclient_1.JetStreamClientImpl(this, opts);\n    }\n    getServerVersion() {\n        const info = this.info;\n        return info ? (0, semver_1.parseSemVer)(info.version) : undefined;\n    }\n    rtt() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.protocol._closed && !this.protocol.connected) {\n                throw types_1.NatsError.errorForCode(core_1.ErrorCode.Disconnect);\n            }\n            const start = Date.now();\n            yield this.flush();\n            return Date.now() - start;\n        });\n    }\n    get features() {\n        return this.protocol.features;\n    }\n    get services() {\n        if (!this._services) {\n            this._services = new ServicesFactory(this);\n        }\n        return this._services;\n    }\n    reconnect() {\n        if (this.isClosed()) {\n            return Promise.reject(types_1.NatsError.errorForCode(core_1.ErrorCode.ConnectionClosed));\n        }\n        if (this.isDraining()) {\n            return Promise.reject(types_1.NatsError.errorForCode(core_1.ErrorCode.ConnectionDraining));\n        }\n        return this.protocol.reconnect();\n    }\n}\nexports.NatsConnectionImpl = NatsConnectionImpl;\nclass ServicesFactory {\n    constructor(nc) {\n        this.nc = nc;\n    }\n    add(config) {\n        try {\n            const s = new service_1.ServiceImpl(this.nc, config);\n            return s.start();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    client(opts, prefix) {\n        return new serviceclient_1.ServiceClientImpl(this.nc, opts, prefix);\n    }\n}\nexports.ServicesFactory = ServicesFactory;\n//# sourceMappingURL=nats.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/nats.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/nkeys.js":
/*!*********************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/nkeys.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.nkeys = void 0;\nexports.nkeys = __webpack_require__(/*! nkeys.js */ \"(rsc)/./node_modules/nkeys.js/lib/index.js\");\n//# sourceMappingURL=nkeys.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9ua2V5cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhO0FBQ2IsaUdBQW1DO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9ua2V5cy5qcz8zM2Y3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ua2V5cyA9IHZvaWQgMDtcbmV4cG9ydHMubmtleXMgPSByZXF1aXJlKFwibmtleXMuanNcIik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ua2V5cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/nkeys.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/nuid.js":
/*!********************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/nuid.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n * Copyright 2016-2021 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.nuid = exports.Nuid = void 0;\nconst digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nconst base = 36;\nconst preLen = 12;\nconst seqLen = 10;\nconst maxSeq = 3656158440062976; // base^seqLen == 36^10\nconst minInc = 33;\nconst maxInc = 333;\nconst totalLen = preLen + seqLen;\nfunction _getRandomValues(a) {\n    for (let i = 0; i < a.length; i++) {\n        a[i] = Math.floor(Math.random() * 255);\n    }\n}\nfunction fillRandom(a) {\n    var _a;\n    if ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.crypto) === null || _a === void 0 ? void 0 : _a.getRandomValues) {\n        globalThis.crypto.getRandomValues(a);\n    }\n    else {\n        _getRandomValues(a);\n    }\n}\n/**\n * Create and initialize a nuid.\n *\n * @api private\n */\nclass Nuid {\n    constructor() {\n        this.buf = new Uint8Array(totalLen);\n        this.init();\n    }\n    /**\n     * Initializes a nuid with a crypto random prefix,\n     * and pseudo-random sequence and increment.\n     *\n     * @api private\n     */\n    init() {\n        this.setPre();\n        this.initSeqAndInc();\n        this.fillSeq();\n    }\n    /**\n     * Initializes the pseudo randmon sequence number and the increment range.\n     *\n     * @api private\n     */\n    initSeqAndInc() {\n        this.seq = Math.floor(Math.random() * maxSeq);\n        this.inc = Math.floor(Math.random() * (maxInc - minInc) + minInc);\n    }\n    /**\n     * Sets the prefix from crypto random bytes. Converts to base36.\n     *\n     * @api private\n     */\n    setPre() {\n        const cbuf = new Uint8Array(preLen);\n        fillRandom(cbuf);\n        for (let i = 0; i < preLen; i++) {\n            const di = cbuf[i] % base;\n            this.buf[i] = digits.charCodeAt(di);\n        }\n    }\n    /**\n     * Fills the sequence part of the nuid as base36 from this.seq.\n     *\n     * @api private\n     */\n    fillSeq() {\n        let n = this.seq;\n        for (let i = totalLen - 1; i >= preLen; i--) {\n            this.buf[i] = digits.charCodeAt(n % base);\n            n = Math.floor(n / base);\n        }\n    }\n    /**\n     * Returns the next nuid.\n     *\n     * @api private\n     */\n    next() {\n        this.seq += this.inc;\n        if (this.seq > maxSeq) {\n            this.setPre();\n            this.initSeqAndInc();\n        }\n        this.fillSeq();\n        // @ts-ignore - Uint8Arrays can be an argument\n        return String.fromCharCode.apply(String, this.buf);\n    }\n    reset() {\n        this.init();\n    }\n}\nexports.Nuid = Nuid;\nexports.nuid = new Nuid();\n//# sourceMappingURL=nuid.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9udWlkLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxZQUFZLEdBQUcsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixjQUFjO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsWUFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGFBQWE7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWixZQUFZO0FBQ1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9uYXRzL2xpYi9uYXRzLWJhc2UtY2xpZW50L251aWQuanM/ZTBlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTYtMjAyMSBUaGUgTkFUUyBBdXRob3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm51aWQgPSBleHBvcnRzLk51aWQgPSB2b2lkIDA7XG5jb25zdCBkaWdpdHMgPSBcIjAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlwiO1xuY29uc3QgYmFzZSA9IDM2O1xuY29uc3QgcHJlTGVuID0gMTI7XG5jb25zdCBzZXFMZW4gPSAxMDtcbmNvbnN0IG1heFNlcSA9IDM2NTYxNTg0NDAwNjI5NzY7IC8vIGJhc2Vec2VxTGVuID09IDM2XjEwXG5jb25zdCBtaW5JbmMgPSAzMztcbmNvbnN0IG1heEluYyA9IDMzMztcbmNvbnN0IHRvdGFsTGVuID0gcHJlTGVuICsgc2VxTGVuO1xuZnVuY3Rpb24gX2dldFJhbmRvbVZhbHVlcyhhKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFbaV0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNTUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGZpbGxSYW5kb20oYSkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoKF9hID0gZ2xvYmFsVGhpcyA9PT0gbnVsbCB8fCBnbG9iYWxUaGlzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBnbG9iYWxUaGlzLmNyeXB0bykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldFJhbmRvbVZhbHVlcykge1xuICAgICAgICBnbG9iYWxUaGlzLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBfZ2V0UmFuZG9tVmFsdWVzKGEpO1xuICAgIH1cbn1cbi8qKlxuICogQ3JlYXRlIGFuZCBpbml0aWFsaXplIGEgbnVpZC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuY2xhc3MgTnVpZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYnVmID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW4pO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYSBudWlkIHdpdGggYSBjcnlwdG8gcmFuZG9tIHByZWZpeCxcbiAgICAgKiBhbmQgcHNldWRvLXJhbmRvbSBzZXF1ZW5jZSBhbmQgaW5jcmVtZW50LlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5zZXRQcmUoKTtcbiAgICAgICAgdGhpcy5pbml0U2VxQW5kSW5jKCk7XG4gICAgICAgIHRoaXMuZmlsbFNlcSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgcHNldWRvIHJhbmRtb24gc2VxdWVuY2UgbnVtYmVyIGFuZCB0aGUgaW5jcmVtZW50IHJhbmdlLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgaW5pdFNlcUFuZEluYygpIHtcbiAgICAgICAgdGhpcy5zZXEgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtYXhTZXEpO1xuICAgICAgICB0aGlzLmluYyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXhJbmMgLSBtaW5JbmMpICsgbWluSW5jKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcHJlZml4IGZyb20gY3J5cHRvIHJhbmRvbSBieXRlcy4gQ29udmVydHMgdG8gYmFzZTM2LlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgc2V0UHJlKCkge1xuICAgICAgICBjb25zdCBjYnVmID0gbmV3IFVpbnQ4QXJyYXkocHJlTGVuKTtcbiAgICAgICAgZmlsbFJhbmRvbShjYnVmKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVMZW47IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZGkgPSBjYnVmW2ldICUgYmFzZTtcbiAgICAgICAgICAgIHRoaXMuYnVmW2ldID0gZGlnaXRzLmNoYXJDb2RlQXQoZGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbGxzIHRoZSBzZXF1ZW5jZSBwYXJ0IG9mIHRoZSBudWlkIGFzIGJhc2UzNiBmcm9tIHRoaXMuc2VxLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgZmlsbFNlcSgpIHtcbiAgICAgICAgbGV0IG4gPSB0aGlzLnNlcTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRvdGFsTGVuIC0gMTsgaSA+PSBwcmVMZW47IGktLSkge1xuICAgICAgICAgICAgdGhpcy5idWZbaV0gPSBkaWdpdHMuY2hhckNvZGVBdChuICUgYmFzZSk7XG4gICAgICAgICAgICBuID0gTWF0aC5mbG9vcihuIC8gYmFzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmV4dCBudWlkLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgbmV4dCgpIHtcbiAgICAgICAgdGhpcy5zZXEgKz0gdGhpcy5pbmM7XG4gICAgICAgIGlmICh0aGlzLnNlcSA+IG1heFNlcSkge1xuICAgICAgICAgICAgdGhpcy5zZXRQcmUoKTtcbiAgICAgICAgICAgIHRoaXMuaW5pdFNlcUFuZEluYygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmlsbFNlcSgpO1xuICAgICAgICAvLyBAdHMtaWdub3JlIC0gVWludDhBcnJheXMgY2FuIGJlIGFuIGFyZ3VtZW50XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgdGhpcy5idWYpO1xuICAgIH1cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxufVxuZXhwb3J0cy5OdWlkID0gTnVpZDtcbmV4cG9ydHMubnVpZCA9IG5ldyBOdWlkKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1udWlkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/nuid.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/options.js":
/*!***********************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/options.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2021-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.checkUnsupportedOption = exports.checkOptions = exports.parseOptions = exports.buildAuthenticator = exports.defaultOptions = exports.DEFAULT_RECONNECT_TIME_WAIT = exports.DEFAULT_MAX_PING_OUT = exports.DEFAULT_PING_INTERVAL = exports.DEFAULT_JITTER_TLS = exports.DEFAULT_JITTER = exports.DEFAULT_MAX_RECONNECT_ATTEMPTS = void 0;\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/nats/lib/nats-base-client/util.js\");\nconst transport_1 = __webpack_require__(/*! ./transport */ \"(rsc)/./node_modules/nats/lib/nats-base-client/transport.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nconst authenticator_1 = __webpack_require__(/*! ./authenticator */ \"(rsc)/./node_modules/nats/lib/nats-base-client/authenticator.js\");\nconst core_2 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nexports.DEFAULT_MAX_RECONNECT_ATTEMPTS = 10;\nexports.DEFAULT_JITTER = 100;\nexports.DEFAULT_JITTER_TLS = 1000;\n// Ping interval\nexports.DEFAULT_PING_INTERVAL = 2 * 60 * 1000; // 2 minutes\nexports.DEFAULT_MAX_PING_OUT = 2;\n// DISCONNECT Parameters, 2 sec wait, 10 tries\nexports.DEFAULT_RECONNECT_TIME_WAIT = 2 * 1000;\nfunction defaultOptions() {\n    return {\n        maxPingOut: exports.DEFAULT_MAX_PING_OUT,\n        maxReconnectAttempts: exports.DEFAULT_MAX_RECONNECT_ATTEMPTS,\n        noRandomize: false,\n        pedantic: false,\n        pingInterval: exports.DEFAULT_PING_INTERVAL,\n        reconnect: true,\n        reconnectJitter: exports.DEFAULT_JITTER,\n        reconnectJitterTLS: exports.DEFAULT_JITTER_TLS,\n        reconnectTimeWait: exports.DEFAULT_RECONNECT_TIME_WAIT,\n        tls: undefined,\n        verbose: false,\n        waitOnFirstConnect: false,\n        ignoreAuthErrorAbort: false,\n    };\n}\nexports.defaultOptions = defaultOptions;\nfunction buildAuthenticator(opts) {\n    const buf = [];\n    // jwtAuthenticator is created by the user, since it\n    // will require possibly reading files which\n    // some of the clients are simply unable to do\n    if (typeof opts.authenticator === \"function\") {\n        buf.push(opts.authenticator);\n    }\n    if (Array.isArray(opts.authenticator)) {\n        buf.push(...opts.authenticator);\n    }\n    if (opts.token) {\n        buf.push((0, authenticator_1.tokenAuthenticator)(opts.token));\n    }\n    if (opts.user) {\n        buf.push((0, authenticator_1.usernamePasswordAuthenticator)(opts.user, opts.pass));\n    }\n    return buf.length === 0 ? (0, authenticator_1.noAuthFn)() : (0, authenticator_1.multiAuthenticator)(buf);\n}\nexports.buildAuthenticator = buildAuthenticator;\nfunction parseOptions(opts) {\n    const dhp = `${core_2.DEFAULT_HOST}:${(0, transport_1.defaultPort)()}`;\n    opts = opts || { servers: [dhp] };\n    opts.servers = opts.servers || [];\n    if (typeof opts.servers === \"string\") {\n        opts.servers = [opts.servers];\n    }\n    if (opts.servers.length > 0 && opts.port) {\n        throw new core_2.NatsError(\"port and servers options are mutually exclusive\", core_2.ErrorCode.InvalidOption);\n    }\n    if (opts.servers.length === 0 && opts.port) {\n        opts.servers = [`${core_2.DEFAULT_HOST}:${opts.port}`];\n    }\n    if (opts.servers && opts.servers.length === 0) {\n        opts.servers = [dhp];\n    }\n    const options = (0, util_1.extend)(defaultOptions(), opts);\n    options.authenticator = buildAuthenticator(options);\n    [\"reconnectDelayHandler\", \"authenticator\"].forEach((n) => {\n        if (options[n] && typeof options[n] !== \"function\") {\n            throw new core_2.NatsError(`${n} option should be a function`, core_2.ErrorCode.NotFunction);\n        }\n    });\n    if (!options.reconnectDelayHandler) {\n        options.reconnectDelayHandler = () => {\n            let extra = options.tls\n                ? options.reconnectJitterTLS\n                : options.reconnectJitter;\n            if (extra) {\n                extra++;\n                extra = Math.floor(Math.random() * extra);\n            }\n            return options.reconnectTimeWait + extra;\n        };\n    }\n    if (options.inboxPrefix) {\n        try {\n            (0, core_1.createInbox)(options.inboxPrefix);\n        }\n        catch (err) {\n            throw new core_2.NatsError(err.message, core_2.ErrorCode.ApiError);\n        }\n    }\n    if (options.resolve) {\n        if (typeof (0, transport_1.getResolveFn)() !== \"function\") {\n            throw new core_2.NatsError(`'resolve' is not supported on this client`, core_2.ErrorCode.InvalidOption);\n        }\n    }\n    return options;\n}\nexports.parseOptions = parseOptions;\nfunction checkOptions(info, options) {\n    const { proto, tls_required: tlsRequired, tls_available: tlsAvailable } = info;\n    if ((proto === undefined || proto < 1) && options.noEcho) {\n        throw new core_2.NatsError(\"noEcho\", core_2.ErrorCode.ServerOptionNotAvailable);\n    }\n    const tls = tlsRequired || tlsAvailable || false;\n    if (options.tls && !tls) {\n        throw new core_2.NatsError(\"tls\", core_2.ErrorCode.ServerOptionNotAvailable);\n    }\n}\nexports.checkOptions = checkOptions;\nfunction checkUnsupportedOption(prop, v) {\n    if (v) {\n        throw new core_2.NatsError(prop, core_2.ErrorCode.InvalidOption);\n    }\n}\nexports.checkUnsupportedOption = checkUnsupportedOption;\n//# sourceMappingURL=options.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/parser.js":
/*!**********************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/parser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.State = exports.Parser = exports.describe = exports.Kind = void 0;\n// deno-lint-ignore-file no-undef\n/*\n * Copyright 2020-2021 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst denobuffer_1 = __webpack_require__(/*! ./denobuffer */ \"(rsc)/./node_modules/nats/lib/nats-base-client/denobuffer.js\");\nconst encoders_1 = __webpack_require__(/*! ./encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nvar Kind;\n(function (Kind) {\n    Kind[Kind[\"OK\"] = 0] = \"OK\";\n    Kind[Kind[\"ERR\"] = 1] = \"ERR\";\n    Kind[Kind[\"MSG\"] = 2] = \"MSG\";\n    Kind[Kind[\"INFO\"] = 3] = \"INFO\";\n    Kind[Kind[\"PING\"] = 4] = \"PING\";\n    Kind[Kind[\"PONG\"] = 5] = \"PONG\";\n})(Kind || (exports.Kind = Kind = {}));\nfunction describe(e) {\n    let ks;\n    let data = \"\";\n    switch (e.kind) {\n        case Kind.MSG:\n            ks = \"MSG\";\n            break;\n        case Kind.OK:\n            ks = \"OK\";\n            break;\n        case Kind.ERR:\n            ks = \"ERR\";\n            data = encoders_1.TD.decode(e.data);\n            break;\n        case Kind.PING:\n            ks = \"PING\";\n            break;\n        case Kind.PONG:\n            ks = \"PONG\";\n            break;\n        case Kind.INFO:\n            ks = \"INFO\";\n            data = encoders_1.TD.decode(e.data);\n    }\n    return `${ks}: ${data}`;\n}\nexports.describe = describe;\nfunction newMsgArg() {\n    const ma = {};\n    ma.sid = -1;\n    ma.hdr = -1;\n    ma.size = -1;\n    return ma;\n}\nconst ASCII_0 = 48;\nconst ASCII_9 = 57;\n// This is an almost verbatim port of the Go NATS parser\n// https://github.com/nats-io/nats.go/blob/master/parser.go\nclass Parser {\n    constructor(dispatcher) {\n        this.dispatcher = dispatcher;\n        this.state = State.OP_START;\n        this.as = 0;\n        this.drop = 0;\n        this.hdr = 0;\n    }\n    parse(buf) {\n        let i;\n        for (i = 0; i < buf.length; i++) {\n            const b = buf[i];\n            switch (this.state) {\n                case State.OP_START:\n                    switch (b) {\n                        case cc.M:\n                        case cc.m:\n                            this.state = State.OP_M;\n                            this.hdr = -1;\n                            this.ma = newMsgArg();\n                            break;\n                        case cc.H:\n                        case cc.h:\n                            this.state = State.OP_H;\n                            this.hdr = 0;\n                            this.ma = newMsgArg();\n                            break;\n                        case cc.P:\n                        case cc.p:\n                            this.state = State.OP_P;\n                            break;\n                        case cc.PLUS:\n                            this.state = State.OP_PLUS;\n                            break;\n                        case cc.MINUS:\n                            this.state = State.OP_MINUS;\n                            break;\n                        case cc.I:\n                        case cc.i:\n                            this.state = State.OP_I;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_H:\n                    switch (b) {\n                        case cc.M:\n                        case cc.m:\n                            this.state = State.OP_M;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_M:\n                    switch (b) {\n                        case cc.S:\n                        case cc.s:\n                            this.state = State.OP_MS;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_MS:\n                    switch (b) {\n                        case cc.G:\n                        case cc.g:\n                            this.state = State.OP_MSG;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_MSG:\n                    switch (b) {\n                        case cc.SPACE:\n                        case cc.TAB:\n                            this.state = State.OP_MSG_SPC;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_MSG_SPC:\n                    switch (b) {\n                        case cc.SPACE:\n                        case cc.TAB:\n                            continue;\n                        default:\n                            this.state = State.MSG_ARG;\n                            this.as = i;\n                    }\n                    break;\n                case State.MSG_ARG:\n                    switch (b) {\n                        case cc.CR:\n                            this.drop = 1;\n                            break;\n                        case cc.NL: {\n                            const arg = this.argBuf\n                                ? this.argBuf.bytes()\n                                : buf.subarray(this.as, i - this.drop);\n                            this.processMsgArgs(arg);\n                            this.drop = 0;\n                            this.as = i + 1;\n                            this.state = State.MSG_PAYLOAD;\n                            // jump ahead with the index. If this overruns\n                            // what is left we fall out and process a split buffer.\n                            i = this.as + this.ma.size - 1;\n                            break;\n                        }\n                        default:\n                            if (this.argBuf) {\n                                this.argBuf.writeByte(b);\n                            }\n                    }\n                    break;\n                case State.MSG_PAYLOAD:\n                    if (this.msgBuf) {\n                        if (this.msgBuf.length >= this.ma.size) {\n                            const data = this.msgBuf.bytes({ copy: false });\n                            this.dispatcher.push({ kind: Kind.MSG, msg: this.ma, data: data });\n                            this.argBuf = undefined;\n                            this.msgBuf = undefined;\n                            this.state = State.MSG_END;\n                        }\n                        else {\n                            let toCopy = this.ma.size - this.msgBuf.length;\n                            const avail = buf.length - i;\n                            if (avail < toCopy) {\n                                toCopy = avail;\n                            }\n                            if (toCopy > 0) {\n                                this.msgBuf.write(buf.subarray(i, i + toCopy));\n                                i = (i + toCopy) - 1;\n                            }\n                            else {\n                                this.msgBuf.writeByte(b);\n                            }\n                        }\n                    }\n                    else if (i - this.as >= this.ma.size) {\n                        this.dispatcher.push({ kind: Kind.MSG, msg: this.ma, data: buf.subarray(this.as, i) });\n                        this.argBuf = undefined;\n                        this.msgBuf = undefined;\n                        this.state = State.MSG_END;\n                    }\n                    break;\n                case State.MSG_END:\n                    switch (b) {\n                        case cc.NL:\n                            this.drop = 0;\n                            this.as = i + 1;\n                            this.state = State.OP_START;\n                            break;\n                        default:\n                            continue;\n                    }\n                    break;\n                case State.OP_PLUS:\n                    switch (b) {\n                        case cc.O:\n                        case cc.o:\n                            this.state = State.OP_PLUS_O;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_PLUS_O:\n                    switch (b) {\n                        case cc.K:\n                        case cc.k:\n                            this.state = State.OP_PLUS_OK;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_PLUS_OK:\n                    switch (b) {\n                        case cc.NL:\n                            this.dispatcher.push({ kind: Kind.OK });\n                            this.drop = 0;\n                            this.state = State.OP_START;\n                            break;\n                    }\n                    break;\n                case State.OP_MINUS:\n                    switch (b) {\n                        case cc.E:\n                        case cc.e:\n                            this.state = State.OP_MINUS_E;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_MINUS_E:\n                    switch (b) {\n                        case cc.R:\n                        case cc.r:\n                            this.state = State.OP_MINUS_ER;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_MINUS_ER:\n                    switch (b) {\n                        case cc.R:\n                        case cc.r:\n                            this.state = State.OP_MINUS_ERR;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_MINUS_ERR:\n                    switch (b) {\n                        case cc.SPACE:\n                        case cc.TAB:\n                            this.state = State.OP_MINUS_ERR_SPC;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_MINUS_ERR_SPC:\n                    switch (b) {\n                        case cc.SPACE:\n                        case cc.TAB:\n                            continue;\n                        default:\n                            this.state = State.MINUS_ERR_ARG;\n                            this.as = i;\n                    }\n                    break;\n                case State.MINUS_ERR_ARG:\n                    switch (b) {\n                        case cc.CR:\n                            this.drop = 1;\n                            break;\n                        case cc.NL: {\n                            let arg;\n                            if (this.argBuf) {\n                                arg = this.argBuf.bytes();\n                                this.argBuf = undefined;\n                            }\n                            else {\n                                arg = buf.subarray(this.as, i - this.drop);\n                            }\n                            this.dispatcher.push({ kind: Kind.ERR, data: arg });\n                            this.drop = 0;\n                            this.as = i + 1;\n                            this.state = State.OP_START;\n                            break;\n                        }\n                        default:\n                            if (this.argBuf) {\n                                this.argBuf.write(Uint8Array.of(b));\n                            }\n                    }\n                    break;\n                case State.OP_P:\n                    switch (b) {\n                        case cc.I:\n                        case cc.i:\n                            this.state = State.OP_PI;\n                            break;\n                        case cc.O:\n                        case cc.o:\n                            this.state = State.OP_PO;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_PO:\n                    switch (b) {\n                        case cc.N:\n                        case cc.n:\n                            this.state = State.OP_PON;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_PON:\n                    switch (b) {\n                        case cc.G:\n                        case cc.g:\n                            this.state = State.OP_PONG;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_PONG:\n                    switch (b) {\n                        case cc.NL:\n                            this.dispatcher.push({ kind: Kind.PONG });\n                            this.drop = 0;\n                            this.state = State.OP_START;\n                            break;\n                    }\n                    break;\n                case State.OP_PI:\n                    switch (b) {\n                        case cc.N:\n                        case cc.n:\n                            this.state = State.OP_PIN;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_PIN:\n                    switch (b) {\n                        case cc.G:\n                        case cc.g:\n                            this.state = State.OP_PING;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_PING:\n                    switch (b) {\n                        case cc.NL:\n                            this.dispatcher.push({ kind: Kind.PING });\n                            this.drop = 0;\n                            this.state = State.OP_START;\n                            break;\n                    }\n                    break;\n                case State.OP_I:\n                    switch (b) {\n                        case cc.N:\n                        case cc.n:\n                            this.state = State.OP_IN;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_IN:\n                    switch (b) {\n                        case cc.F:\n                        case cc.f:\n                            this.state = State.OP_INF;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_INF:\n                    switch (b) {\n                        case cc.O:\n                        case cc.o:\n                            this.state = State.OP_INFO;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_INFO:\n                    switch (b) {\n                        case cc.SPACE:\n                        case cc.TAB:\n                            this.state = State.OP_INFO_SPC;\n                            break;\n                        default:\n                            throw this.fail(buf.subarray(i));\n                    }\n                    break;\n                case State.OP_INFO_SPC:\n                    switch (b) {\n                        case cc.SPACE:\n                        case cc.TAB:\n                            continue;\n                        default:\n                            this.state = State.INFO_ARG;\n                            this.as = i;\n                    }\n                    break;\n                case State.INFO_ARG:\n                    switch (b) {\n                        case cc.CR:\n                            this.drop = 1;\n                            break;\n                        case cc.NL: {\n                            let arg;\n                            if (this.argBuf) {\n                                arg = this.argBuf.bytes();\n                                this.argBuf = undefined;\n                            }\n                            else {\n                                arg = buf.subarray(this.as, i - this.drop);\n                            }\n                            this.dispatcher.push({ kind: Kind.INFO, data: arg });\n                            this.drop = 0;\n                            this.as = i + 1;\n                            this.state = State.OP_START;\n                            break;\n                        }\n                        default:\n                            if (this.argBuf) {\n                                this.argBuf.writeByte(b);\n                            }\n                    }\n                    break;\n                default:\n                    throw this.fail(buf.subarray(i));\n            }\n        }\n        if ((this.state === State.MSG_ARG || this.state === State.MINUS_ERR_ARG ||\n            this.state === State.INFO_ARG) && !this.argBuf) {\n            this.argBuf = new denobuffer_1.DenoBuffer(buf.subarray(this.as, i - this.drop));\n        }\n        if (this.state === State.MSG_PAYLOAD && !this.msgBuf) {\n            if (!this.argBuf) {\n                this.cloneMsgArg();\n            }\n            this.msgBuf = new denobuffer_1.DenoBuffer(buf.subarray(this.as));\n        }\n    }\n    cloneMsgArg() {\n        const s = this.ma.subject.length;\n        const r = this.ma.reply ? this.ma.reply.length : 0;\n        const buf = new Uint8Array(s + r);\n        buf.set(this.ma.subject);\n        if (this.ma.reply) {\n            buf.set(this.ma.reply, s);\n        }\n        this.argBuf = new denobuffer_1.DenoBuffer(buf);\n        this.ma.subject = buf.subarray(0, s);\n        if (this.ma.reply) {\n            this.ma.reply = buf.subarray(s);\n        }\n    }\n    processMsgArgs(arg) {\n        if (this.hdr >= 0) {\n            return this.processHeaderMsgArgs(arg);\n        }\n        const args = [];\n        let start = -1;\n        for (let i = 0; i < arg.length; i++) {\n            const b = arg[i];\n            switch (b) {\n                case cc.SPACE:\n                case cc.TAB:\n                case cc.CR:\n                case cc.NL:\n                    if (start >= 0) {\n                        args.push(arg.subarray(start, i));\n                        start = -1;\n                    }\n                    break;\n                default:\n                    if (start < 0) {\n                        start = i;\n                    }\n            }\n        }\n        if (start >= 0) {\n            args.push(arg.subarray(start));\n        }\n        switch (args.length) {\n            case 3:\n                this.ma.subject = args[0];\n                this.ma.sid = this.protoParseInt(args[1]);\n                this.ma.reply = undefined;\n                this.ma.size = this.protoParseInt(args[2]);\n                break;\n            case 4:\n                this.ma.subject = args[0];\n                this.ma.sid = this.protoParseInt(args[1]);\n                this.ma.reply = args[2];\n                this.ma.size = this.protoParseInt(args[3]);\n                break;\n            default:\n                throw this.fail(arg, \"processMsgArgs Parse Error\");\n        }\n        if (this.ma.sid < 0) {\n            throw this.fail(arg, \"processMsgArgs Bad or Missing Sid Error\");\n        }\n        if (this.ma.size < 0) {\n            throw this.fail(arg, \"processMsgArgs Bad or Missing Size Error\");\n        }\n    }\n    fail(data, label = \"\") {\n        if (!label) {\n            label = `parse error [${this.state}]`;\n        }\n        else {\n            label = `${label} [${this.state}]`;\n        }\n        return new Error(`${label}: ${encoders_1.TD.decode(data)}`);\n    }\n    processHeaderMsgArgs(arg) {\n        const args = [];\n        let start = -1;\n        for (let i = 0; i < arg.length; i++) {\n            const b = arg[i];\n            switch (b) {\n                case cc.SPACE:\n                case cc.TAB:\n                case cc.CR:\n                case cc.NL:\n                    if (start >= 0) {\n                        args.push(arg.subarray(start, i));\n                        start = -1;\n                    }\n                    break;\n                default:\n                    if (start < 0) {\n                        start = i;\n                    }\n            }\n        }\n        if (start >= 0) {\n            args.push(arg.subarray(start));\n        }\n        switch (args.length) {\n            case 4:\n                this.ma.subject = args[0];\n                this.ma.sid = this.protoParseInt(args[1]);\n                this.ma.reply = undefined;\n                this.ma.hdr = this.protoParseInt(args[2]);\n                this.ma.size = this.protoParseInt(args[3]);\n                break;\n            case 5:\n                this.ma.subject = args[0];\n                this.ma.sid = this.protoParseInt(args[1]);\n                this.ma.reply = args[2];\n                this.ma.hdr = this.protoParseInt(args[3]);\n                this.ma.size = this.protoParseInt(args[4]);\n                break;\n            default:\n                throw this.fail(arg, \"processHeaderMsgArgs Parse Error\");\n        }\n        if (this.ma.sid < 0) {\n            throw this.fail(arg, \"processHeaderMsgArgs Bad or Missing Sid Error\");\n        }\n        if (this.ma.hdr < 0 || this.ma.hdr > this.ma.size) {\n            throw this.fail(arg, \"processHeaderMsgArgs Bad or Missing Header Size Error\");\n        }\n        if (this.ma.size < 0) {\n            throw this.fail(arg, \"processHeaderMsgArgs Bad or Missing Size Error\");\n        }\n    }\n    protoParseInt(a) {\n        if (a.length === 0) {\n            return -1;\n        }\n        let n = 0;\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] < ASCII_0 || a[i] > ASCII_9) {\n                return -1;\n            }\n            n = n * 10 + (a[i] - ASCII_0);\n        }\n        return n;\n    }\n}\nexports.Parser = Parser;\nvar State;\n(function (State) {\n    State[State[\"OP_START\"] = 0] = \"OP_START\";\n    State[State[\"OP_PLUS\"] = 1] = \"OP_PLUS\";\n    State[State[\"OP_PLUS_O\"] = 2] = \"OP_PLUS_O\";\n    State[State[\"OP_PLUS_OK\"] = 3] = \"OP_PLUS_OK\";\n    State[State[\"OP_MINUS\"] = 4] = \"OP_MINUS\";\n    State[State[\"OP_MINUS_E\"] = 5] = \"OP_MINUS_E\";\n    State[State[\"OP_MINUS_ER\"] = 6] = \"OP_MINUS_ER\";\n    State[State[\"OP_MINUS_ERR\"] = 7] = \"OP_MINUS_ERR\";\n    State[State[\"OP_MINUS_ERR_SPC\"] = 8] = \"OP_MINUS_ERR_SPC\";\n    State[State[\"MINUS_ERR_ARG\"] = 9] = \"MINUS_ERR_ARG\";\n    State[State[\"OP_M\"] = 10] = \"OP_M\";\n    State[State[\"OP_MS\"] = 11] = \"OP_MS\";\n    State[State[\"OP_MSG\"] = 12] = \"OP_MSG\";\n    State[State[\"OP_MSG_SPC\"] = 13] = \"OP_MSG_SPC\";\n    State[State[\"MSG_ARG\"] = 14] = \"MSG_ARG\";\n    State[State[\"MSG_PAYLOAD\"] = 15] = \"MSG_PAYLOAD\";\n    State[State[\"MSG_END\"] = 16] = \"MSG_END\";\n    State[State[\"OP_H\"] = 17] = \"OP_H\";\n    State[State[\"OP_P\"] = 18] = \"OP_P\";\n    State[State[\"OP_PI\"] = 19] = \"OP_PI\";\n    State[State[\"OP_PIN\"] = 20] = \"OP_PIN\";\n    State[State[\"OP_PING\"] = 21] = \"OP_PING\";\n    State[State[\"OP_PO\"] = 22] = \"OP_PO\";\n    State[State[\"OP_PON\"] = 23] = \"OP_PON\";\n    State[State[\"OP_PONG\"] = 24] = \"OP_PONG\";\n    State[State[\"OP_I\"] = 25] = \"OP_I\";\n    State[State[\"OP_IN\"] = 26] = \"OP_IN\";\n    State[State[\"OP_INF\"] = 27] = \"OP_INF\";\n    State[State[\"OP_INFO\"] = 28] = \"OP_INFO\";\n    State[State[\"OP_INFO_SPC\"] = 29] = \"OP_INFO_SPC\";\n    State[State[\"INFO_ARG\"] = 30] = \"INFO_ARG\";\n})(State || (exports.State = State = {}));\nvar cc;\n(function (cc) {\n    cc[cc[\"CR\"] = \"\\r\".charCodeAt(0)] = \"CR\";\n    cc[cc[\"E\"] = \"E\".charCodeAt(0)] = \"E\";\n    cc[cc[\"e\"] = \"e\".charCodeAt(0)] = \"e\";\n    cc[cc[\"F\"] = \"F\".charCodeAt(0)] = \"F\";\n    cc[cc[\"f\"] = \"f\".charCodeAt(0)] = \"f\";\n    cc[cc[\"G\"] = \"G\".charCodeAt(0)] = \"G\";\n    cc[cc[\"g\"] = \"g\".charCodeAt(0)] = \"g\";\n    cc[cc[\"H\"] = \"H\".charCodeAt(0)] = \"H\";\n    cc[cc[\"h\"] = \"h\".charCodeAt(0)] = \"h\";\n    cc[cc[\"I\"] = \"I\".charCodeAt(0)] = \"I\";\n    cc[cc[\"i\"] = \"i\".charCodeAt(0)] = \"i\";\n    cc[cc[\"K\"] = \"K\".charCodeAt(0)] = \"K\";\n    cc[cc[\"k\"] = \"k\".charCodeAt(0)] = \"k\";\n    cc[cc[\"M\"] = \"M\".charCodeAt(0)] = \"M\";\n    cc[cc[\"m\"] = \"m\".charCodeAt(0)] = \"m\";\n    cc[cc[\"MINUS\"] = \"-\".charCodeAt(0)] = \"MINUS\";\n    cc[cc[\"N\"] = \"N\".charCodeAt(0)] = \"N\";\n    cc[cc[\"n\"] = \"n\".charCodeAt(0)] = \"n\";\n    cc[cc[\"NL\"] = \"\\n\".charCodeAt(0)] = \"NL\";\n    cc[cc[\"O\"] = \"O\".charCodeAt(0)] = \"O\";\n    cc[cc[\"o\"] = \"o\".charCodeAt(0)] = \"o\";\n    cc[cc[\"P\"] = \"P\".charCodeAt(0)] = \"P\";\n    cc[cc[\"p\"] = \"p\".charCodeAt(0)] = \"p\";\n    cc[cc[\"PLUS\"] = \"+\".charCodeAt(0)] = \"PLUS\";\n    cc[cc[\"R\"] = \"R\".charCodeAt(0)] = \"R\";\n    cc[cc[\"r\"] = \"r\".charCodeAt(0)] = \"r\";\n    cc[cc[\"S\"] = \"S\".charCodeAt(0)] = \"S\";\n    cc[cc[\"s\"] = \"s\".charCodeAt(0)] = \"s\";\n    cc[cc[\"SPACE\"] = \" \".charCodeAt(0)] = \"SPACE\";\n    cc[cc[\"TAB\"] = \"\\t\".charCodeAt(0)] = \"TAB\";\n})(cc || (cc = {}));\n//# sourceMappingURL=parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/protocol.js":
/*!************************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/protocol.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProtocolHandler = exports.Subscriptions = exports.SubscriptionImpl = exports.Connect = exports.INFO = void 0;\n/*\n * Copyright 2018-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst encoders_1 = __webpack_require__(/*! ./encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nconst transport_1 = __webpack_require__(/*! ./transport */ \"(rsc)/./node_modules/nats/lib/nats-base-client/transport.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/nats/lib/nats-base-client/util.js\");\nconst databuffer_1 = __webpack_require__(/*! ./databuffer */ \"(rsc)/./node_modules/nats/lib/nats-base-client/databuffer.js\");\nconst servers_1 = __webpack_require__(/*! ./servers */ \"(rsc)/./node_modules/nats/lib/nats-base-client/servers.js\");\nconst queued_iterator_1 = __webpack_require__(/*! ./queued_iterator */ \"(rsc)/./node_modules/nats/lib/nats-base-client/queued_iterator.js\");\nconst muxsubscription_1 = __webpack_require__(/*! ./muxsubscription */ \"(rsc)/./node_modules/nats/lib/nats-base-client/muxsubscription.js\");\nconst heartbeats_1 = __webpack_require__(/*! ./heartbeats */ \"(rsc)/./node_modules/nats/lib/nats-base-client/heartbeats.js\");\nconst parser_1 = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/nats/lib/nats-base-client/parser.js\");\nconst msg_1 = __webpack_require__(/*! ./msg */ \"(rsc)/./node_modules/nats/lib/nats-base-client/msg.js\");\nconst semver_1 = __webpack_require__(/*! ./semver */ \"(rsc)/./node_modules/nats/lib/nats-base-client/semver.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nconst options_1 = __webpack_require__(/*! ./options */ \"(rsc)/./node_modules/nats/lib/nats-base-client/options.js\");\nconst FLUSH_THRESHOLD = 1024 * 32;\nexports.INFO = /^INFO\\s+([^\\r\\n]+)\\r\\n/i;\nconst PONG_CMD = (0, encoders_1.encode)(\"PONG\\r\\n\");\nconst PING_CMD = (0, encoders_1.encode)(\"PING\\r\\n\");\nclass Connect {\n    constructor(transport, opts, nonce) {\n        this.protocol = 1;\n        this.version = transport.version;\n        this.lang = transport.lang;\n        this.echo = opts.noEcho ? false : undefined;\n        this.verbose = opts.verbose;\n        this.pedantic = opts.pedantic;\n        this.tls_required = opts.tls ? true : undefined;\n        this.name = opts.name;\n        const creds = (opts && typeof opts.authenticator === \"function\"\n            ? opts.authenticator(nonce)\n            : {}) || {};\n        (0, util_1.extend)(this, creds);\n    }\n}\nexports.Connect = Connect;\nclass SubscriptionImpl extends queued_iterator_1.QueuedIteratorImpl {\n    constructor(protocol, subject, opts = {}) {\n        var _a;\n        super();\n        (0, util_1.extend)(this, opts);\n        this.protocol = protocol;\n        this.subject = subject;\n        this.draining = false;\n        this.noIterator = typeof opts.callback === \"function\";\n        this.closed = (0, util_1.deferred)();\n        const asyncTraces = !(((_a = protocol.options) === null || _a === void 0 ? void 0 : _a.noAsyncTraces) || false);\n        if (opts.timeout) {\n            this.timer = (0, util_1.timeout)(opts.timeout, asyncTraces);\n            this.timer\n                .then(() => {\n                // timer was cancelled\n                this.timer = undefined;\n            })\n                .catch((err) => {\n                // timer fired\n                this.stop(err);\n                if (this.noIterator) {\n                    this.callback(err, {});\n                }\n            });\n        }\n        if (!this.noIterator) {\n            // cleanup - they used break or return from the iterator\n            // make sure we clean up, if they didn't call unsub\n            this.iterClosed.then(() => {\n                this.closed.resolve();\n                this.unsubscribe();\n            });\n        }\n    }\n    setPrePostHandlers(opts) {\n        if (this.noIterator) {\n            const uc = this.callback;\n            const ingestion = opts.ingestionFilterFn\n                ? opts.ingestionFilterFn\n                : () => {\n                    return { ingest: true, protocol: false };\n                };\n            const filter = opts.protocolFilterFn ? opts.protocolFilterFn : () => {\n                return true;\n            };\n            const dispatched = opts.dispatchedFn ? opts.dispatchedFn : () => { };\n            this.callback = (err, msg) => {\n                const { ingest } = ingestion(msg);\n                if (!ingest) {\n                    return;\n                }\n                if (filter(msg)) {\n                    uc(err, msg);\n                    dispatched(msg);\n                }\n            };\n        }\n        else {\n            this.protocolFilterFn = opts.protocolFilterFn;\n            this.dispatchedFn = opts.dispatchedFn;\n        }\n    }\n    callback(err, msg) {\n        this.cancelTimeout();\n        err ? this.stop(err) : this.push(msg);\n    }\n    close() {\n        if (!this.isClosed()) {\n            this.cancelTimeout();\n            const fn = () => {\n                this.stop();\n                if (this.cleanupFn) {\n                    try {\n                        this.cleanupFn(this, this.info);\n                    }\n                    catch (_err) {\n                        // ignoring\n                    }\n                }\n                this.closed.resolve();\n            };\n            if (this.noIterator) {\n                fn();\n            }\n            else {\n                //@ts-ignore: schedule the close once all messages are processed\n                this.push(fn);\n            }\n        }\n    }\n    unsubscribe(max) {\n        this.protocol.unsubscribe(this, max);\n    }\n    cancelTimeout() {\n        if (this.timer) {\n            this.timer.cancel();\n            this.timer = undefined;\n        }\n    }\n    drain() {\n        if (this.protocol.isClosed()) {\n            return Promise.reject(core_1.NatsError.errorForCode(core_1.ErrorCode.ConnectionClosed));\n        }\n        if (this.isClosed()) {\n            return Promise.reject(core_1.NatsError.errorForCode(core_1.ErrorCode.SubClosed));\n        }\n        if (!this.drained) {\n            this.draining = true;\n            this.protocol.unsub(this);\n            this.drained = this.protocol.flush((0, util_1.deferred)())\n                .then(() => {\n                this.protocol.subscriptions.cancel(this);\n            })\n                .catch(() => {\n                this.protocol.subscriptions.cancel(this);\n            });\n        }\n        return this.drained;\n    }\n    isDraining() {\n        return this.draining;\n    }\n    isClosed() {\n        return this.done;\n    }\n    getSubject() {\n        return this.subject;\n    }\n    getMax() {\n        return this.max;\n    }\n    getID() {\n        return this.sid;\n    }\n}\nexports.SubscriptionImpl = SubscriptionImpl;\nclass Subscriptions {\n    constructor() {\n        this.sidCounter = 0;\n        this.mux = null;\n        this.subs = new Map();\n    }\n    size() {\n        return this.subs.size;\n    }\n    add(s) {\n        this.sidCounter++;\n        s.sid = this.sidCounter;\n        this.subs.set(s.sid, s);\n        return s;\n    }\n    setMux(s) {\n        this.mux = s;\n        return s;\n    }\n    getMux() {\n        return this.mux;\n    }\n    get(sid) {\n        return this.subs.get(sid);\n    }\n    resub(s) {\n        this.sidCounter++;\n        this.subs.delete(s.sid);\n        s.sid = this.sidCounter;\n        this.subs.set(s.sid, s);\n        return s;\n    }\n    all() {\n        return Array.from(this.subs.values());\n    }\n    cancel(s) {\n        if (s) {\n            s.close();\n            this.subs.delete(s.sid);\n        }\n    }\n    handleError(err) {\n        if (err && err.permissionContext) {\n            const ctx = err.permissionContext;\n            const subs = this.all();\n            let sub;\n            if (ctx.operation === \"subscription\") {\n                sub = subs.find((s) => {\n                    return s.subject === ctx.subject;\n                });\n            }\n            if (ctx.operation === \"publish\") {\n                // we have a no mux subscription\n                sub = subs.find((s) => {\n                    return s.requestSubject === ctx.subject;\n                });\n            }\n            if (sub) {\n                sub.callback(err, {});\n                sub.close();\n                this.subs.delete(sub.sid);\n                return sub !== this.mux;\n            }\n        }\n        return false;\n    }\n    close() {\n        this.subs.forEach((sub) => {\n            sub.close();\n        });\n    }\n}\nexports.Subscriptions = Subscriptions;\nclass ProtocolHandler {\n    constructor(options, publisher) {\n        this._closed = false;\n        this.connected = false;\n        this.connectedOnce = false;\n        this.infoReceived = false;\n        this.noMorePublishing = false;\n        this.abortReconnect = false;\n        this.listeners = [];\n        this.pendingLimit = FLUSH_THRESHOLD;\n        this.outMsgs = 0;\n        this.inMsgs = 0;\n        this.outBytes = 0;\n        this.inBytes = 0;\n        this.options = options;\n        this.publisher = publisher;\n        this.subscriptions = new Subscriptions();\n        this.muxSubscriptions = new muxsubscription_1.MuxSubscription();\n        this.outbound = new databuffer_1.DataBuffer();\n        this.pongs = [];\n        this.whyClosed = \"\";\n        //@ts-ignore: options.pendingLimit is hidden\n        this.pendingLimit = options.pendingLimit || this.pendingLimit;\n        this.features = new semver_1.Features({ major: 0, minor: 0, micro: 0 });\n        this.connectPromise = null;\n        const servers = typeof options.servers === \"string\"\n            ? [options.servers]\n            : options.servers;\n        this.servers = new servers_1.Servers(servers, {\n            randomize: !options.noRandomize,\n        });\n        this.closed = (0, util_1.deferred)();\n        this.parser = new parser_1.Parser(this);\n        this.heartbeats = new heartbeats_1.Heartbeat(this, this.options.pingInterval || options_1.DEFAULT_PING_INTERVAL, this.options.maxPingOut || options_1.DEFAULT_MAX_PING_OUT);\n    }\n    resetOutbound() {\n        this.outbound.reset();\n        const pongs = this.pongs;\n        this.pongs = [];\n        // reject the pongs - the disconnect from here shouldn't have a trace\n        // because that confuses API consumers\n        const err = core_1.NatsError.errorForCode(core_1.ErrorCode.Disconnect);\n        err.stack = \"\";\n        pongs.forEach((p) => {\n            p.reject(err);\n        });\n        this.parser = new parser_1.Parser(this);\n        this.infoReceived = false;\n    }\n    dispatchStatus(status) {\n        this.listeners.forEach((q) => {\n            q.push(status);\n        });\n    }\n    status() {\n        const iter = new queued_iterator_1.QueuedIteratorImpl();\n        this.listeners.push(iter);\n        return iter;\n    }\n    prepare() {\n        if (this.transport) {\n            this.transport.discard();\n        }\n        this.info = undefined;\n        this.resetOutbound();\n        const pong = (0, util_1.deferred)();\n        pong.catch(() => {\n            // provide at least one catch - as pong rejection can happen before it is expected\n        });\n        this.pongs.unshift(pong);\n        this.connectError = (err) => {\n            pong.reject(err);\n        };\n        this.transport = (0, transport_1.newTransport)();\n        this.transport.closed()\n            .then((_err) => __awaiter(this, void 0, void 0, function* () {\n            this.connected = false;\n            if (!this.isClosed()) {\n                // if the transport gave an error use that, otherwise\n                // we may have received a protocol error\n                yield this.disconnected(this.transport.closeError || this.lastError);\n                return;\n            }\n        }));\n        return pong;\n    }\n    disconnect() {\n        this.dispatchStatus({ type: core_1.DebugEvents.StaleConnection, data: \"\" });\n        this.transport.disconnect();\n    }\n    reconnect() {\n        if (this.connected) {\n            this.dispatchStatus({\n                type: core_1.DebugEvents.ClientInitiatedReconnect,\n                data: \"\",\n            });\n            this.transport.disconnect();\n        }\n        return Promise.resolve();\n    }\n    disconnected(err) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.dispatchStatus({\n                type: core_1.Events.Disconnect,\n                data: this.servers.getCurrentServer().toString(),\n            });\n            if (this.options.reconnect) {\n                yield this.dialLoop()\n                    .then(() => {\n                    var _a;\n                    this.dispatchStatus({\n                        type: core_1.Events.Reconnect,\n                        data: this.servers.getCurrentServer().toString(),\n                    });\n                    // if we are here we reconnected, but we have an authentication\n                    // that expired, we need to clean it up, otherwise we'll queue up\n                    // two of these, and the default for the client will be to\n                    // close, rather than attempt again - possibly they have an\n                    // authenticator that dynamically updates\n                    if (((_a = this.lastError) === null || _a === void 0 ? void 0 : _a.code) === core_1.ErrorCode.AuthenticationExpired) {\n                        this.lastError = undefined;\n                    }\n                })\n                    .catch((err) => {\n                    this._close(err);\n                });\n            }\n            else {\n                yield this._close(err);\n            }\n        });\n    }\n    dial(srv) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pong = this.prepare();\n            let timer;\n            try {\n                timer = (0, util_1.timeout)(this.options.timeout || 20000);\n                const cp = this.transport.connect(srv, this.options);\n                yield Promise.race([cp, timer]);\n                (() => __awaiter(this, void 0, void 0, function* () {\n                    var _a, e_1, _b, _c;\n                    try {\n                        try {\n                            for (var _d = true, _e = __asyncValues(this.transport), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {\n                                _c = _f.value;\n                                _d = false;\n                                const b = _c;\n                                this.parser.parse(b);\n                            }\n                        }\n                        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                        finally {\n                            try {\n                                if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);\n                            }\n                            finally { if (e_1) throw e_1.error; }\n                        }\n                    }\n                    catch (err) {\n                        console.log(\"reader closed\", err);\n                    }\n                }))().then();\n            }\n            catch (err) {\n                pong.reject(err);\n            }\n            try {\n                yield Promise.race([timer, pong]);\n                if (timer) {\n                    timer.cancel();\n                }\n                this.connected = true;\n                this.connectError = undefined;\n                this.sendSubscriptions();\n                this.connectedOnce = true;\n                this.server.didConnect = true;\n                this.server.reconnects = 0;\n                this.flushPending();\n                this.heartbeats.start();\n            }\n            catch (err) {\n                if (timer) {\n                    timer.cancel();\n                }\n                yield this.transport.close(err);\n                throw err;\n            }\n        });\n    }\n    _doDial(srv) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const alts = yield srv.resolve({\n                fn: (0, transport_1.getResolveFn)(),\n                debug: this.options.debug,\n                randomize: !this.options.noRandomize,\n            });\n            let lastErr = null;\n            for (const a of alts) {\n                try {\n                    lastErr = null;\n                    this.dispatchStatus({ type: core_1.DebugEvents.Reconnecting, data: a.toString() });\n                    yield this.dial(a);\n                    // if here we connected\n                    return;\n                }\n                catch (err) {\n                    lastErr = err;\n                }\n            }\n            // if we are here, we failed, and we have no additional\n            // alternatives for this server\n            throw lastErr;\n        });\n    }\n    dialLoop() {\n        if (this.connectPromise === null) {\n            this.connectPromise = this.dodialLoop();\n            this.connectPromise\n                .then(() => { })\n                .catch(() => { })\n                .finally(() => {\n                this.connectPromise = null;\n            });\n        }\n        return this.connectPromise;\n    }\n    dodialLoop() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let lastError;\n            while (true) {\n                if (this._closed) {\n                    // if we are disconnected, and close is called, the client\n                    // still tries to reconnect - to match the reconnect policy\n                    // in the case of close, want to stop.\n                    this.servers.clear();\n                }\n                const wait = this.options.reconnectDelayHandler\n                    ? this.options.reconnectDelayHandler()\n                    : options_1.DEFAULT_RECONNECT_TIME_WAIT;\n                let maxWait = wait;\n                const srv = this.selectServer();\n                if (!srv || this.abortReconnect) {\n                    if (lastError) {\n                        throw lastError;\n                    }\n                    else if (this.lastError) {\n                        throw this.lastError;\n                    }\n                    else {\n                        throw core_1.NatsError.errorForCode(core_1.ErrorCode.ConnectionRefused);\n                    }\n                }\n                const now = Date.now();\n                if (srv.lastConnect === 0 || srv.lastConnect + wait <= now) {\n                    srv.lastConnect = Date.now();\n                    try {\n                        yield this._doDial(srv);\n                        break;\n                    }\n                    catch (err) {\n                        lastError = err;\n                        if (!this.connectedOnce) {\n                            if (this.options.waitOnFirstConnect) {\n                                continue;\n                            }\n                            this.servers.removeCurrentServer();\n                        }\n                        srv.reconnects++;\n                        const mra = this.options.maxReconnectAttempts || 0;\n                        if (mra !== -1 && srv.reconnects >= mra) {\n                            this.servers.removeCurrentServer();\n                        }\n                    }\n                }\n                else {\n                    maxWait = Math.min(maxWait, srv.lastConnect + wait - now);\n                    yield (0, util_1.delay)(maxWait);\n                }\n            }\n        });\n    }\n    static connect(options, publisher) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const h = new ProtocolHandler(options, publisher);\n            yield h.dialLoop();\n            return h;\n        });\n    }\n    static toError(s) {\n        const t = s ? s.toLowerCase() : \"\";\n        if (t.indexOf(\"permissions violation\") !== -1) {\n            const err = new core_1.NatsError(s, core_1.ErrorCode.PermissionsViolation);\n            const m = s.match(/(Publish|Subscription) to \"(\\S+)\"/);\n            if (m) {\n                err.permissionContext = {\n                    operation: m[1].toLowerCase(),\n                    subject: m[2],\n                };\n            }\n            return err;\n        }\n        else if (t.indexOf(\"authorization violation\") !== -1) {\n            return new core_1.NatsError(s, core_1.ErrorCode.AuthorizationViolation);\n        }\n        else if (t.indexOf(\"user authentication expired\") !== -1) {\n            return new core_1.NatsError(s, core_1.ErrorCode.AuthenticationExpired);\n        }\n        else if (t.indexOf(\"authentication timeout\") !== -1) {\n            return new core_1.NatsError(s, core_1.ErrorCode.AuthenticationTimeout);\n        }\n        else {\n            return new core_1.NatsError(s, core_1.ErrorCode.ProtocolError);\n        }\n    }\n    processMsg(msg, data) {\n        this.inMsgs++;\n        this.inBytes += data.length;\n        if (!this.subscriptions.sidCounter) {\n            return;\n        }\n        const sub = this.subscriptions.get(msg.sid);\n        if (!sub) {\n            return;\n        }\n        sub.received += 1;\n        if (sub.callback) {\n            sub.callback(null, new msg_1.MsgImpl(msg, data, this));\n        }\n        if (sub.max !== undefined && sub.received >= sub.max) {\n            sub.unsubscribe();\n        }\n    }\n    processError(m) {\n        const s = (0, encoders_1.decode)(m);\n        const err = ProtocolHandler.toError(s);\n        const status = { type: core_1.Events.Error, data: err.code };\n        if (err.isPermissionError()) {\n            let isMuxPermissionError = false;\n            if (err.permissionContext) {\n                status.permissionContext = err.permissionContext;\n                const mux = this.subscriptions.getMux();\n                isMuxPermissionError = (mux === null || mux === void 0 ? void 0 : mux.subject) === err.permissionContext.subject;\n            }\n            this.subscriptions.handleError(err);\n            this.muxSubscriptions.handleError(isMuxPermissionError, err);\n            if (isMuxPermissionError) {\n                // remove the permission - enable it to be recreated\n                this.subscriptions.setMux(null);\n            }\n        }\n        this.dispatchStatus(status);\n        this.handleError(err);\n    }\n    handleError(err) {\n        if (err.isAuthError()) {\n            this.handleAuthError(err);\n        }\n        else if (err.isProtocolError()) {\n            this.lastError = err;\n        }\n        else if (err.isAuthTimeout()) {\n            this.lastError = err;\n        }\n        // fallthrough here\n        if (!err.isPermissionError()) {\n            this.lastError = err;\n        }\n    }\n    handleAuthError(err) {\n        if ((this.lastError && err.code === this.lastError.code) &&\n            this.options.ignoreAuthErrorAbort === false) {\n            this.abortReconnect = true;\n        }\n        if (this.connectError) {\n            this.connectError(err);\n        }\n        else {\n            this.disconnect();\n        }\n    }\n    processPing() {\n        this.transport.send(PONG_CMD);\n    }\n    processPong() {\n        const cb = this.pongs.shift();\n        if (cb) {\n            cb.resolve();\n        }\n    }\n    processInfo(m) {\n        const info = JSON.parse((0, encoders_1.decode)(m));\n        this.info = info;\n        const updates = this.options && this.options.ignoreClusterUpdates\n            ? undefined\n            : this.servers.update(info, this.transport.isEncrypted());\n        if (!this.infoReceived) {\n            this.features.update((0, semver_1.parseSemVer)(info.version));\n            this.infoReceived = true;\n            if (this.transport.isEncrypted()) {\n                this.servers.updateTLSName();\n            }\n            // send connect\n            const { version, lang } = this.transport;\n            try {\n                const c = new Connect({ version, lang }, this.options, info.nonce);\n                if (info.headers) {\n                    c.headers = true;\n                    c.no_responders = true;\n                }\n                const cs = JSON.stringify(c);\n                this.transport.send((0, encoders_1.encode)(`CONNECT ${cs}${transport_1.CR_LF}`));\n                this.transport.send(PING_CMD);\n            }\n            catch (err) {\n                // if we are dying here, this is likely some an authenticator blowing up\n                this._close(err);\n            }\n        }\n        if (updates) {\n            this.dispatchStatus({ type: core_1.Events.Update, data: updates });\n        }\n        const ldm = info.ldm !== undefined ? info.ldm : false;\n        if (ldm) {\n            this.dispatchStatus({\n                type: core_1.Events.LDM,\n                data: this.servers.getCurrentServer().toString(),\n            });\n        }\n    }\n    push(e) {\n        switch (e.kind) {\n            case parser_1.Kind.MSG: {\n                const { msg, data } = e;\n                this.processMsg(msg, data);\n                break;\n            }\n            case parser_1.Kind.OK:\n                break;\n            case parser_1.Kind.ERR:\n                this.processError(e.data);\n                break;\n            case parser_1.Kind.PING:\n                this.processPing();\n                break;\n            case parser_1.Kind.PONG:\n                this.processPong();\n                break;\n            case parser_1.Kind.INFO:\n                this.processInfo(e.data);\n                break;\n        }\n    }\n    sendCommand(cmd, ...payloads) {\n        const len = this.outbound.length();\n        let buf;\n        if (typeof cmd === \"string\") {\n            buf = (0, encoders_1.encode)(cmd);\n        }\n        else {\n            buf = cmd;\n        }\n        this.outbound.fill(buf, ...payloads);\n        if (len === 0) {\n            queueMicrotask(() => {\n                this.flushPending();\n            });\n        }\n        else if (this.outbound.size() >= this.pendingLimit) {\n            // flush inline\n            this.flushPending();\n        }\n    }\n    publish(subject, payload = encoders_1.Empty, options) {\n        let data;\n        if (payload instanceof Uint8Array) {\n            data = payload;\n        }\n        else if (typeof payload === \"string\") {\n            data = encoders_1.TE.encode(payload);\n        }\n        else {\n            throw core_1.NatsError.errorForCode(core_1.ErrorCode.BadPayload);\n        }\n        let len = data.length;\n        options = options || {};\n        options.reply = options.reply || \"\";\n        let headers = encoders_1.Empty;\n        let hlen = 0;\n        if (options.headers) {\n            if (this.info && !this.info.headers) {\n                throw new core_1.NatsError(\"headers\", core_1.ErrorCode.ServerOptionNotAvailable);\n            }\n            const hdrs = options.headers;\n            headers = hdrs.encode();\n            hlen = headers.length;\n            len = data.length + hlen;\n        }\n        if (this.info && len > this.info.max_payload) {\n            throw core_1.NatsError.errorForCode(core_1.ErrorCode.MaxPayloadExceeded);\n        }\n        this.outBytes += len;\n        this.outMsgs++;\n        let proto;\n        if (options.headers) {\n            if (options.reply) {\n                proto = `HPUB ${subject} ${options.reply} ${hlen} ${len}\\r\\n`;\n            }\n            else {\n                proto = `HPUB ${subject} ${hlen} ${len}\\r\\n`;\n            }\n            this.sendCommand(proto, headers, data, transport_1.CRLF);\n        }\n        else {\n            if (options.reply) {\n                proto = `PUB ${subject} ${options.reply} ${len}\\r\\n`;\n            }\n            else {\n                proto = `PUB ${subject} ${len}\\r\\n`;\n            }\n            this.sendCommand(proto, data, transport_1.CRLF);\n        }\n    }\n    request(r) {\n        this.initMux();\n        this.muxSubscriptions.add(r);\n        return r;\n    }\n    subscribe(s) {\n        this.subscriptions.add(s);\n        this._subunsub(s);\n        return s;\n    }\n    _sub(s) {\n        if (s.queue) {\n            this.sendCommand(`SUB ${s.subject} ${s.queue} ${s.sid}\\r\\n`);\n        }\n        else {\n            this.sendCommand(`SUB ${s.subject} ${s.sid}\\r\\n`);\n        }\n    }\n    _subunsub(s) {\n        this._sub(s);\n        if (s.max) {\n            this.unsubscribe(s, s.max);\n        }\n        return s;\n    }\n    unsubscribe(s, max) {\n        this.unsub(s, max);\n        if (s.max === undefined || s.received >= s.max) {\n            this.subscriptions.cancel(s);\n        }\n    }\n    unsub(s, max) {\n        if (!s || this.isClosed()) {\n            return;\n        }\n        if (max) {\n            this.sendCommand(`UNSUB ${s.sid} ${max}\\r\\n`);\n        }\n        else {\n            this.sendCommand(`UNSUB ${s.sid}\\r\\n`);\n        }\n        s.max = max;\n    }\n    resub(s, subject) {\n        if (!s || this.isClosed()) {\n            return;\n        }\n        s.subject = subject;\n        this.subscriptions.resub(s);\n        // we don't auto-unsub here because we don't\n        // really know \"processed\"\n        this._sub(s);\n    }\n    flush(p) {\n        if (!p) {\n            p = (0, util_1.deferred)();\n        }\n        this.pongs.push(p);\n        this.outbound.fill(PING_CMD);\n        this.flushPending();\n        return p;\n    }\n    sendSubscriptions() {\n        const cmds = [];\n        this.subscriptions.all().forEach((s) => {\n            const sub = s;\n            if (sub.queue) {\n                cmds.push(`SUB ${sub.subject} ${sub.queue} ${sub.sid}${transport_1.CR_LF}`);\n            }\n            else {\n                cmds.push(`SUB ${sub.subject} ${sub.sid}${transport_1.CR_LF}`);\n            }\n        });\n        if (cmds.length) {\n            this.transport.send((0, encoders_1.encode)(cmds.join(\"\")));\n        }\n    }\n    _close(err) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._closed) {\n                return;\n            }\n            this.whyClosed = new Error(\"close trace\").stack || \"\";\n            this.heartbeats.cancel();\n            if (this.connectError) {\n                this.connectError(err);\n                this.connectError = undefined;\n            }\n            this.muxSubscriptions.close();\n            this.subscriptions.close();\n            this.listeners.forEach((l) => {\n                l.stop();\n            });\n            this._closed = true;\n            yield this.transport.close(err);\n            yield this.closed.resolve(err);\n        });\n    }\n    close() {\n        return this._close();\n    }\n    isClosed() {\n        return this._closed;\n    }\n    drain() {\n        const subs = this.subscriptions.all();\n        const promises = [];\n        subs.forEach((sub) => {\n            promises.push(sub.drain());\n        });\n        return Promise.all(promises)\n            .then(() => __awaiter(this, void 0, void 0, function* () {\n            this.noMorePublishing = true;\n            yield this.flush();\n            return this.close();\n        }))\n            .catch(() => {\n            // cannot happen\n        });\n    }\n    flushPending() {\n        if (!this.infoReceived || !this.connected) {\n            return;\n        }\n        if (this.outbound.size()) {\n            const d = this.outbound.drain();\n            this.transport.send(d);\n        }\n    }\n    initMux() {\n        const mux = this.subscriptions.getMux();\n        if (!mux) {\n            const inbox = this.muxSubscriptions.init(this.options.inboxPrefix);\n            // dot is already part of mux\n            const sub = new SubscriptionImpl(this, `${inbox}*`);\n            sub.callback = this.muxSubscriptions.dispatcher();\n            this.subscriptions.setMux(sub);\n            this.subscribe(sub);\n        }\n    }\n    selectServer() {\n        const server = this.servers.selectServer();\n        if (server === undefined) {\n            return undefined;\n        }\n        // Place in client context.\n        this.server = server;\n        return this.server;\n    }\n    getServer() {\n        return this.server;\n    }\n}\nexports.ProtocolHandler = ProtocolHandler;\n//# sourceMappingURL=protocol.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9wcm90b2NvbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyR0FBMkcsdUZBQXVGLGNBQWM7QUFDaE4sdUJBQXVCLDhCQUE4QixnREFBZ0Qsd0RBQXdEO0FBQzdKLDZDQUE2QyxzQ0FBc0MsVUFBVSxtQkFBbUIsSUFBSTtBQUNwSDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyxxQkFBcUIsR0FBRyx3QkFBd0IsR0FBRyxlQUFlLEdBQUcsWUFBWTtBQUMzRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMsOEVBQVk7QUFDdkMsb0JBQW9CLG1CQUFPLENBQUMsZ0ZBQWE7QUFDekMsZUFBZSxtQkFBTyxDQUFDLHNFQUFRO0FBQy9CLHFCQUFxQixtQkFBTyxDQUFDLGtGQUFjO0FBQzNDLGtCQUFrQixtQkFBTyxDQUFDLDRFQUFXO0FBQ3JDLDBCQUEwQixtQkFBTyxDQUFDLDRGQUFtQjtBQUNyRCwwQkFBMEIsbUJBQU8sQ0FBQyw0RkFBbUI7QUFDckQscUJBQXFCLG1CQUFPLENBQUMsa0ZBQWM7QUFDM0MsaUJBQWlCLG1CQUFPLENBQUMsMEVBQVU7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLG9FQUFPO0FBQzdCLGlCQUFpQixtQkFBTyxDQUFDLDBFQUFVO0FBQ25DLGVBQWUsbUJBQU8sQ0FBQyxzRUFBUTtBQUMvQixrQkFBa0IsbUJBQU8sQ0FBQyw0RUFBVztBQUNyQztBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsU0FBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsOEJBQThCO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsb0RBQW9EO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RkFBd0YseUNBQXlDO0FBQ2pJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxRQUFRO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsMkRBQTJEO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBLHdDQUF3QyxlQUFlO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsR0FBRyxFQUFFLGtCQUFrQjtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLDJDQUEyQztBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixZQUFZO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFNBQVMsRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFFLElBQUk7QUFDeEU7QUFDQTtBQUNBLGdDQUFnQyxTQUFTLEVBQUUsTUFBTSxFQUFFLElBQUk7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixTQUFTLEVBQUUsZUFBZSxFQUFFLElBQUk7QUFDL0Q7QUFDQTtBQUNBLCtCQUErQixTQUFTLEVBQUUsSUFBSTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU07QUFDbEU7QUFDQTtBQUNBLG9DQUFvQyxXQUFXLEVBQUUsTUFBTTtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLE9BQU8sRUFBRSxJQUFJO0FBQ25EO0FBQ0E7QUFDQSxzQ0FBc0MsTUFBTTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsa0JBQWtCO0FBQ3pGO0FBQ0E7QUFDQSxpQ0FBaUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxrQkFBa0I7QUFDNUU7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELE1BQU07QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9wcm90b2NvbC5qcz82YTE0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19hc3luY1ZhbHVlcyA9ICh0aGlzICYmIHRoaXMuX19hc3luY1ZhbHVlcykgfHwgZnVuY3Rpb24gKG8pIHtcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qcm90b2NvbEhhbmRsZXIgPSBleHBvcnRzLlN1YnNjcmlwdGlvbnMgPSBleHBvcnRzLlN1YnNjcmlwdGlvbkltcGwgPSBleHBvcnRzLkNvbm5lY3QgPSBleHBvcnRzLklORk8gPSB2b2lkIDA7XG4vKlxuICogQ29weXJpZ2h0IDIwMTgtMjAyMyBUaGUgTkFUUyBBdXRob3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY29uc3QgZW5jb2RlcnNfMSA9IHJlcXVpcmUoXCIuL2VuY29kZXJzXCIpO1xuY29uc3QgdHJhbnNwb3J0XzEgPSByZXF1aXJlKFwiLi90cmFuc3BvcnRcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuY29uc3QgZGF0YWJ1ZmZlcl8xID0gcmVxdWlyZShcIi4vZGF0YWJ1ZmZlclwiKTtcbmNvbnN0IHNlcnZlcnNfMSA9IHJlcXVpcmUoXCIuL3NlcnZlcnNcIik7XG5jb25zdCBxdWV1ZWRfaXRlcmF0b3JfMSA9IHJlcXVpcmUoXCIuL3F1ZXVlZF9pdGVyYXRvclwiKTtcbmNvbnN0IG11eHN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4vbXV4c3Vic2NyaXB0aW9uXCIpO1xuY29uc3QgaGVhcnRiZWF0c18xID0gcmVxdWlyZShcIi4vaGVhcnRiZWF0c1wiKTtcbmNvbnN0IHBhcnNlcl8xID0gcmVxdWlyZShcIi4vcGFyc2VyXCIpO1xuY29uc3QgbXNnXzEgPSByZXF1aXJlKFwiLi9tc2dcIik7XG5jb25zdCBzZW12ZXJfMSA9IHJlcXVpcmUoXCIuL3NlbXZlclwiKTtcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCIuL2NvcmVcIik7XG5jb25zdCBvcHRpb25zXzEgPSByZXF1aXJlKFwiLi9vcHRpb25zXCIpO1xuY29uc3QgRkxVU0hfVEhSRVNIT0xEID0gMTAyNCAqIDMyO1xuZXhwb3J0cy5JTkZPID0gL15JTkZPXFxzKyhbXlxcclxcbl0rKVxcclxcbi9pO1xuY29uc3QgUE9OR19DTUQgPSAoMCwgZW5jb2RlcnNfMS5lbmNvZGUpKFwiUE9OR1xcclxcblwiKTtcbmNvbnN0IFBJTkdfQ01EID0gKDAsIGVuY29kZXJzXzEuZW5jb2RlKShcIlBJTkdcXHJcXG5cIik7XG5jbGFzcyBDb25uZWN0IHtcbiAgICBjb25zdHJ1Y3Rvcih0cmFuc3BvcnQsIG9wdHMsIG5vbmNlKSB7XG4gICAgICAgIHRoaXMucHJvdG9jb2wgPSAxO1xuICAgICAgICB0aGlzLnZlcnNpb24gPSB0cmFuc3BvcnQudmVyc2lvbjtcbiAgICAgICAgdGhpcy5sYW5nID0gdHJhbnNwb3J0Lmxhbmc7XG4gICAgICAgIHRoaXMuZWNobyA9IG9wdHMubm9FY2hvID8gZmFsc2UgOiB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudmVyYm9zZSA9IG9wdHMudmVyYm9zZTtcbiAgICAgICAgdGhpcy5wZWRhbnRpYyA9IG9wdHMucGVkYW50aWM7XG4gICAgICAgIHRoaXMudGxzX3JlcXVpcmVkID0gb3B0cy50bHMgPyB0cnVlIDogdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm5hbWUgPSBvcHRzLm5hbWU7XG4gICAgICAgIGNvbnN0IGNyZWRzID0gKG9wdHMgJiYgdHlwZW9mIG9wdHMuYXV0aGVudGljYXRvciA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IG9wdHMuYXV0aGVudGljYXRvcihub25jZSlcbiAgICAgICAgICAgIDoge30pIHx8IHt9O1xuICAgICAgICAoMCwgdXRpbF8xLmV4dGVuZCkodGhpcywgY3JlZHMpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29ubmVjdCA9IENvbm5lY3Q7XG5jbGFzcyBTdWJzY3JpcHRpb25JbXBsIGV4dGVuZHMgcXVldWVkX2l0ZXJhdG9yXzEuUXVldWVkSXRlcmF0b3JJbXBsIHtcbiAgICBjb25zdHJ1Y3Rvcihwcm90b2NvbCwgc3ViamVjdCwgb3B0cyA9IHt9KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgKDAsIHV0aWxfMS5leHRlbmQpKHRoaXMsIG9wdHMpO1xuICAgICAgICB0aGlzLnByb3RvY29sID0gcHJvdG9jb2w7XG4gICAgICAgIHRoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gICAgICAgIHRoaXMuZHJhaW5pbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ub0l0ZXJhdG9yID0gdHlwZW9mIG9wdHMuY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSAoMCwgdXRpbF8xLmRlZmVycmVkKSgpO1xuICAgICAgICBjb25zdCBhc3luY1RyYWNlcyA9ICEoKChfYSA9IHByb3RvY29sLm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ub0FzeW5jVHJhY2VzKSB8fCBmYWxzZSk7XG4gICAgICAgIGlmIChvcHRzLnRpbWVvdXQpIHtcbiAgICAgICAgICAgIHRoaXMudGltZXIgPSAoMCwgdXRpbF8xLnRpbWVvdXQpKG9wdHMudGltZW91dCwgYXN5bmNUcmFjZXMpO1xuICAgICAgICAgICAgdGhpcy50aW1lclxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyB0aW1lciB3YXMgY2FuY2VsbGVkXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAvLyB0aW1lciBmaXJlZFxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcChlcnIpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm5vSXRlcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFjayhlcnIsIHt9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMubm9JdGVyYXRvcikge1xuICAgICAgICAgICAgLy8gY2xlYW51cCAtIHRoZXkgdXNlZCBicmVhayBvciByZXR1cm4gZnJvbSB0aGUgaXRlcmF0b3JcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBjbGVhbiB1cCwgaWYgdGhleSBkaWRuJ3QgY2FsbCB1bnN1YlxuICAgICAgICAgICAgdGhpcy5pdGVyQ2xvc2VkLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VkLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRQcmVQb3N0SGFuZGxlcnMob3B0cykge1xuICAgICAgICBpZiAodGhpcy5ub0l0ZXJhdG9yKSB7XG4gICAgICAgICAgICBjb25zdCB1YyA9IHRoaXMuY2FsbGJhY2s7XG4gICAgICAgICAgICBjb25zdCBpbmdlc3Rpb24gPSBvcHRzLmluZ2VzdGlvbkZpbHRlckZuXG4gICAgICAgICAgICAgICAgPyBvcHRzLmluZ2VzdGlvbkZpbHRlckZuXG4gICAgICAgICAgICAgICAgOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGluZ2VzdDogdHJ1ZSwgcHJvdG9jb2w6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlciA9IG9wdHMucHJvdG9jb2xGaWx0ZXJGbiA/IG9wdHMucHJvdG9jb2xGaWx0ZXJGbiA6ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBkaXNwYXRjaGVkID0gb3B0cy5kaXNwYXRjaGVkRm4gPyBvcHRzLmRpc3BhdGNoZWRGbiA6ICgpID0+IHsgfTtcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2sgPSAoZXJyLCBtc2cpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGluZ2VzdCB9ID0gaW5nZXN0aW9uKG1zZyk7XG4gICAgICAgICAgICAgICAgaWYgKCFpbmdlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyKG1zZykpIHtcbiAgICAgICAgICAgICAgICAgICAgdWMoZXJyLCBtc2cpO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaGVkKG1zZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJvdG9jb2xGaWx0ZXJGbiA9IG9wdHMucHJvdG9jb2xGaWx0ZXJGbjtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hlZEZuID0gb3B0cy5kaXNwYXRjaGVkRm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FsbGJhY2soZXJyLCBtc2cpIHtcbiAgICAgICAgdGhpcy5jYW5jZWxUaW1lb3V0KCk7XG4gICAgICAgIGVyciA/IHRoaXMuc3RvcChlcnIpIDogdGhpcy5wdXNoKG1zZyk7XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNDbG9zZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5jYW5jZWxUaW1lb3V0KCk7XG4gICAgICAgICAgICBjb25zdCBmbiA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jbGVhbnVwRm4pIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYW51cEZuKHRoaXMsIHRoaXMuaW5mbyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKF9lcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yaW5nXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZWQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh0aGlzLm5vSXRlcmF0b3IpIHtcbiAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlOiBzY2hlZHVsZSB0aGUgY2xvc2Ugb25jZSBhbGwgbWVzc2FnZXMgYXJlIHByb2Nlc3NlZFxuICAgICAgICAgICAgICAgIHRoaXMucHVzaChmbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdW5zdWJzY3JpYmUobWF4KSB7XG4gICAgICAgIHRoaXMucHJvdG9jb2wudW5zdWJzY3JpYmUodGhpcywgbWF4KTtcbiAgICB9XG4gICAgY2FuY2VsVGltZW91dCgpIHtcbiAgICAgICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgICAgICAgIHRoaXMudGltZXIuY2FuY2VsKCk7XG4gICAgICAgICAgICB0aGlzLnRpbWVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRyYWluKCkge1xuICAgICAgICBpZiAodGhpcy5wcm90b2NvbC5pc0Nsb3NlZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoY29yZV8xLk5hdHNFcnJvci5lcnJvckZvckNvZGUoY29yZV8xLkVycm9yQ29kZS5Db25uZWN0aW9uQ2xvc2VkKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNDbG9zZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGNvcmVfMS5OYXRzRXJyb3IuZXJyb3JGb3JDb2RlKGNvcmVfMS5FcnJvckNvZGUuU3ViQ2xvc2VkKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmRyYWluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhaW5pbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5wcm90b2NvbC51bnN1Yih0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZHJhaW5lZCA9IHRoaXMucHJvdG9jb2wuZmx1c2goKDAsIHV0aWxfMS5kZWZlcnJlZCkoKSlcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm90b2NvbC5zdWJzY3JpcHRpb25zLmNhbmNlbCh0aGlzKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3RvY29sLnN1YnNjcmlwdGlvbnMuY2FuY2VsKHRoaXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZHJhaW5lZDtcbiAgICB9XG4gICAgaXNEcmFpbmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZHJhaW5pbmc7XG4gICAgfVxuICAgIGlzQ2xvc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kb25lO1xuICAgIH1cbiAgICBnZXRTdWJqZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJqZWN0O1xuICAgIH1cbiAgICBnZXRNYXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heDtcbiAgICB9XG4gICAgZ2V0SUQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpZDtcbiAgICB9XG59XG5leHBvcnRzLlN1YnNjcmlwdGlvbkltcGwgPSBTdWJzY3JpcHRpb25JbXBsO1xuY2xhc3MgU3Vic2NyaXB0aW9ucyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc2lkQ291bnRlciA9IDA7XG4gICAgICAgIHRoaXMubXV4ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdWJzID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJzLnNpemU7XG4gICAgfVxuICAgIGFkZChzKSB7XG4gICAgICAgIHRoaXMuc2lkQ291bnRlcisrO1xuICAgICAgICBzLnNpZCA9IHRoaXMuc2lkQ291bnRlcjtcbiAgICAgICAgdGhpcy5zdWJzLnNldChzLnNpZCwgcyk7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cbiAgICBzZXRNdXgocykge1xuICAgICAgICB0aGlzLm11eCA9IHM7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cbiAgICBnZXRNdXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm11eDtcbiAgICB9XG4gICAgZ2V0KHNpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJzLmdldChzaWQpO1xuICAgIH1cbiAgICByZXN1YihzKSB7XG4gICAgICAgIHRoaXMuc2lkQ291bnRlcisrO1xuICAgICAgICB0aGlzLnN1YnMuZGVsZXRlKHMuc2lkKTtcbiAgICAgICAgcy5zaWQgPSB0aGlzLnNpZENvdW50ZXI7XG4gICAgICAgIHRoaXMuc3Vicy5zZXQocy5zaWQsIHMpO1xuICAgICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgYWxsKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnN1YnMudmFsdWVzKCkpO1xuICAgIH1cbiAgICBjYW5jZWwocykge1xuICAgICAgICBpZiAocykge1xuICAgICAgICAgICAgcy5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5zdWJzLmRlbGV0ZShzLnNpZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlRXJyb3IoZXJyKSB7XG4gICAgICAgIGlmIChlcnIgJiYgZXJyLnBlcm1pc3Npb25Db250ZXh0KSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSBlcnIucGVybWlzc2lvbkNvbnRleHQ7XG4gICAgICAgICAgICBjb25zdCBzdWJzID0gdGhpcy5hbGwoKTtcbiAgICAgICAgICAgIGxldCBzdWI7XG4gICAgICAgICAgICBpZiAoY3R4Lm9wZXJhdGlvbiA9PT0gXCJzdWJzY3JpcHRpb25cIikge1xuICAgICAgICAgICAgICAgIHN1YiA9IHN1YnMuZmluZCgocykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5zdWJqZWN0ID09PSBjdHguc3ViamVjdDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjdHgub3BlcmF0aW9uID09PSBcInB1Ymxpc2hcIikge1xuICAgICAgICAgICAgICAgIC8vIHdlIGhhdmUgYSBubyBtdXggc3Vic2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgc3ViID0gc3Vicy5maW5kKChzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzLnJlcXVlc3RTdWJqZWN0ID09PSBjdHguc3ViamVjdDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdWIpIHtcbiAgICAgICAgICAgICAgICBzdWIuY2FsbGJhY2soZXJyLCB7fSk7XG4gICAgICAgICAgICAgICAgc3ViLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzLmRlbGV0ZShzdWIuc2lkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ViICE9PSB0aGlzLm11eDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLnN1YnMuZm9yRWFjaCgoc3ViKSA9PiB7XG4gICAgICAgICAgICBzdWIuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5TdWJzY3JpcHRpb25zID0gU3Vic2NyaXB0aW9ucztcbmNsYXNzIFByb3RvY29sSGFuZGxlciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucywgcHVibGlzaGVyKSB7XG4gICAgICAgIHRoaXMuX2Nsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZE9uY2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbmZvUmVjZWl2ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ub01vcmVQdWJsaXNoaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYWJvcnRSZWNvbm5lY3QgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgdGhpcy5wZW5kaW5nTGltaXQgPSBGTFVTSF9USFJFU0hPTEQ7XG4gICAgICAgIHRoaXMub3V0TXNncyA9IDA7XG4gICAgICAgIHRoaXMuaW5Nc2dzID0gMDtcbiAgICAgICAgdGhpcy5vdXRCeXRlcyA9IDA7XG4gICAgICAgIHRoaXMuaW5CeXRlcyA9IDA7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMucHVibGlzaGVyID0gcHVibGlzaGVyO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBuZXcgU3Vic2NyaXB0aW9ucygpO1xuICAgICAgICB0aGlzLm11eFN1YnNjcmlwdGlvbnMgPSBuZXcgbXV4c3Vic2NyaXB0aW9uXzEuTXV4U3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHRoaXMub3V0Ym91bmQgPSBuZXcgZGF0YWJ1ZmZlcl8xLkRhdGFCdWZmZXIoKTtcbiAgICAgICAgdGhpcy5wb25ncyA9IFtdO1xuICAgICAgICB0aGlzLndoeUNsb3NlZCA9IFwiXCI7XG4gICAgICAgIC8vQHRzLWlnbm9yZTogb3B0aW9ucy5wZW5kaW5nTGltaXQgaXMgaGlkZGVuXG4gICAgICAgIHRoaXMucGVuZGluZ0xpbWl0ID0gb3B0aW9ucy5wZW5kaW5nTGltaXQgfHwgdGhpcy5wZW5kaW5nTGltaXQ7XG4gICAgICAgIHRoaXMuZmVhdHVyZXMgPSBuZXcgc2VtdmVyXzEuRmVhdHVyZXMoeyBtYWpvcjogMCwgbWlub3I6IDAsIG1pY3JvOiAwIH0pO1xuICAgICAgICB0aGlzLmNvbm5lY3RQcm9taXNlID0gbnVsbDtcbiAgICAgICAgY29uc3Qgc2VydmVycyA9IHR5cGVvZiBvcHRpb25zLnNlcnZlcnMgPT09IFwic3RyaW5nXCJcbiAgICAgICAgICAgID8gW29wdGlvbnMuc2VydmVyc11cbiAgICAgICAgICAgIDogb3B0aW9ucy5zZXJ2ZXJzO1xuICAgICAgICB0aGlzLnNlcnZlcnMgPSBuZXcgc2VydmVyc18xLlNlcnZlcnMoc2VydmVycywge1xuICAgICAgICAgICAgcmFuZG9taXplOiAhb3B0aW9ucy5ub1JhbmRvbWl6ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gKDAsIHV0aWxfMS5kZWZlcnJlZCkoKTtcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBuZXcgcGFyc2VyXzEuUGFyc2VyKHRoaXMpO1xuICAgICAgICB0aGlzLmhlYXJ0YmVhdHMgPSBuZXcgaGVhcnRiZWF0c18xLkhlYXJ0YmVhdCh0aGlzLCB0aGlzLm9wdGlvbnMucGluZ0ludGVydmFsIHx8IG9wdGlvbnNfMS5ERUZBVUxUX1BJTkdfSU5URVJWQUwsIHRoaXMub3B0aW9ucy5tYXhQaW5nT3V0IHx8IG9wdGlvbnNfMS5ERUZBVUxUX01BWF9QSU5HX09VVCk7XG4gICAgfVxuICAgIHJlc2V0T3V0Ym91bmQoKSB7XG4gICAgICAgIHRoaXMub3V0Ym91bmQucmVzZXQoKTtcbiAgICAgICAgY29uc3QgcG9uZ3MgPSB0aGlzLnBvbmdzO1xuICAgICAgICB0aGlzLnBvbmdzID0gW107XG4gICAgICAgIC8vIHJlamVjdCB0aGUgcG9uZ3MgLSB0aGUgZGlzY29ubmVjdCBmcm9tIGhlcmUgc2hvdWxkbid0IGhhdmUgYSB0cmFjZVxuICAgICAgICAvLyBiZWNhdXNlIHRoYXQgY29uZnVzZXMgQVBJIGNvbnN1bWVyc1xuICAgICAgICBjb25zdCBlcnIgPSBjb3JlXzEuTmF0c0Vycm9yLmVycm9yRm9yQ29kZShjb3JlXzEuRXJyb3JDb2RlLkRpc2Nvbm5lY3QpO1xuICAgICAgICBlcnIuc3RhY2sgPSBcIlwiO1xuICAgICAgICBwb25ncy5mb3JFYWNoKChwKSA9PiB7XG4gICAgICAgICAgICBwLnJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBuZXcgcGFyc2VyXzEuUGFyc2VyKHRoaXMpO1xuICAgICAgICB0aGlzLmluZm9SZWNlaXZlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBkaXNwYXRjaFN0YXR1cyhzdGF0dXMpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaCgocSkgPT4ge1xuICAgICAgICAgICAgcS5wdXNoKHN0YXR1cyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0dXMoKSB7XG4gICAgICAgIGNvbnN0IGl0ZXIgPSBuZXcgcXVldWVkX2l0ZXJhdG9yXzEuUXVldWVkSXRlcmF0b3JJbXBsKCk7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2goaXRlcik7XG4gICAgICAgIHJldHVybiBpdGVyO1xuICAgIH1cbiAgICBwcmVwYXJlKCkge1xuICAgICAgICBpZiAodGhpcy50cmFuc3BvcnQpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LmRpc2NhcmQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluZm8gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucmVzZXRPdXRib3VuZCgpO1xuICAgICAgICBjb25zdCBwb25nID0gKDAsIHV0aWxfMS5kZWZlcnJlZCkoKTtcbiAgICAgICAgcG9uZy5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAvLyBwcm92aWRlIGF0IGxlYXN0IG9uZSBjYXRjaCAtIGFzIHBvbmcgcmVqZWN0aW9uIGNhbiBoYXBwZW4gYmVmb3JlIGl0IGlzIGV4cGVjdGVkXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnBvbmdzLnVuc2hpZnQocG9uZyk7XG4gICAgICAgIHRoaXMuY29ubmVjdEVycm9yID0gKGVycikgPT4ge1xuICAgICAgICAgICAgcG9uZy5yZWplY3QoZXJyKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50cmFuc3BvcnQgPSAoMCwgdHJhbnNwb3J0XzEubmV3VHJhbnNwb3J0KSgpO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZWQoKVxuICAgICAgICAgICAgLnRoZW4oKF9lcnIpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNDbG9zZWQoKSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSB0cmFuc3BvcnQgZ2F2ZSBhbiBlcnJvciB1c2UgdGhhdCwgb3RoZXJ3aXNlXG4gICAgICAgICAgICAgICAgLy8gd2UgbWF5IGhhdmUgcmVjZWl2ZWQgYSBwcm90b2NvbCBlcnJvclxuICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuZGlzY29ubmVjdGVkKHRoaXMudHJhbnNwb3J0LmNsb3NlRXJyb3IgfHwgdGhpcy5sYXN0RXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gcG9uZztcbiAgICB9XG4gICAgZGlzY29ubmVjdCgpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaFN0YXR1cyh7IHR5cGU6IGNvcmVfMS5EZWJ1Z0V2ZW50cy5TdGFsZUNvbm5lY3Rpb24sIGRhdGE6IFwiXCIgfSk7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0LmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gICAgcmVjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0dXMoe1xuICAgICAgICAgICAgICAgIHR5cGU6IGNvcmVfMS5EZWJ1Z0V2ZW50cy5DbGllbnRJbml0aWF0ZWRSZWNvbm5lY3QsXG4gICAgICAgICAgICAgICAgZGF0YTogXCJcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQuZGlzY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgZGlzY29ubmVjdGVkKGVycikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaFN0YXR1cyh7XG4gICAgICAgICAgICAgICAgdHlwZTogY29yZV8xLkV2ZW50cy5EaXNjb25uZWN0LFxuICAgICAgICAgICAgICAgIGRhdGE6IHRoaXMuc2VydmVycy5nZXRDdXJyZW50U2VydmVyKCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZWNvbm5lY3QpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLmRpYWxMb29wKClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0dXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogY29yZV8xLkV2ZW50cy5SZWNvbm5lY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLnNlcnZlcnMuZ2V0Q3VycmVudFNlcnZlcigpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSBhcmUgaGVyZSB3ZSByZWNvbm5lY3RlZCwgYnV0IHdlIGhhdmUgYW4gYXV0aGVudGljYXRpb25cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhhdCBleHBpcmVkLCB3ZSBuZWVkIHRvIGNsZWFuIGl0IHVwLCBvdGhlcndpc2Ugd2UnbGwgcXVldWUgdXBcbiAgICAgICAgICAgICAgICAgICAgLy8gdHdvIG9mIHRoZXNlLCBhbmQgdGhlIGRlZmF1bHQgZm9yIHRoZSBjbGllbnQgd2lsbCBiZSB0b1xuICAgICAgICAgICAgICAgICAgICAvLyBjbG9zZSwgcmF0aGVyIHRoYW4gYXR0ZW1wdCBhZ2FpbiAtIHBvc3NpYmx5IHRoZXkgaGF2ZSBhblxuICAgICAgICAgICAgICAgICAgICAvLyBhdXRoZW50aWNhdG9yIHRoYXQgZHluYW1pY2FsbHkgdXBkYXRlc1xuICAgICAgICAgICAgICAgICAgICBpZiAoKChfYSA9IHRoaXMubGFzdEVycm9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29kZSkgPT09IGNvcmVfMS5FcnJvckNvZGUuQXV0aGVudGljYXRpb25FeHBpcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nsb3NlKGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLl9jbG9zZShlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGlhbChzcnYpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvbmcgPSB0aGlzLnByZXBhcmUoKTtcbiAgICAgICAgICAgIGxldCB0aW1lcjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGltZXIgPSAoMCwgdXRpbF8xLnRpbWVvdXQpKHRoaXMub3B0aW9ucy50aW1lb3V0IHx8IDIwMDAwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjcCA9IHRoaXMudHJhbnNwb3J0LmNvbm5lY3Qoc3J2LCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHlpZWxkIFByb21pc2UucmFjZShbY3AsIHRpbWVyXSk7XG4gICAgICAgICAgICAgICAgKCgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBlXzEsIF9iLCBfYztcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2QgPSB0cnVlLCBfZSA9IF9fYXN5bmNWYWx1ZXModGhpcy50cmFuc3BvcnQpLCBfZjsgX2YgPSB5aWVsZCBfZS5uZXh0KCksIF9hID0gX2YuZG9uZSwgIV9hOyBfZCA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MgPSBfZi52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYiA9IF9jO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlci5wYXJzZShiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfZCAmJiAhX2EgJiYgKF9iID0gX2UucmV0dXJuKSkgeWllbGQgX2IuY2FsbChfZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlYWRlciBjbG9zZWRcIiwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKSgpLnRoZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBwb25nLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB5aWVsZCBQcm9taXNlLnJhY2UoW3RpbWVyLCBwb25nXSk7XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVyLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0RXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kU3Vic2NyaXB0aW9ucygpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkT25jZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2ZXIuZGlkQ29ubmVjdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2ZXIucmVjb25uZWN0cyA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5mbHVzaFBlbmRpbmcoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhlYXJ0YmVhdHMuc3RhcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGltZXIuY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMudHJhbnNwb3J0LmNsb3NlKGVycik7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2RvRGlhbChzcnYpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGFsdHMgPSB5aWVsZCBzcnYucmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgZm46ICgwLCB0cmFuc3BvcnRfMS5nZXRSZXNvbHZlRm4pKCksXG4gICAgICAgICAgICAgICAgZGVidWc6IHRoaXMub3B0aW9ucy5kZWJ1ZyxcbiAgICAgICAgICAgICAgICByYW5kb21pemU6ICF0aGlzLm9wdGlvbnMubm9SYW5kb21pemUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCBsYXN0RXJyID0gbnVsbDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYSBvZiBhbHRzKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdEVyciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0dXMoeyB0eXBlOiBjb3JlXzEuRGVidWdFdmVudHMuUmVjb25uZWN0aW5nLCBkYXRhOiBhLnRvU3RyaW5nKCkgfSk7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuZGlhbChhKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgaGVyZSB3ZSBjb25uZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RFcnIgPSBlcnI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgd2UgYXJlIGhlcmUsIHdlIGZhaWxlZCwgYW5kIHdlIGhhdmUgbm8gYWRkaXRpb25hbFxuICAgICAgICAgICAgLy8gYWx0ZXJuYXRpdmVzIGZvciB0aGlzIHNlcnZlclxuICAgICAgICAgICAgdGhyb3cgbGFzdEVycjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRpYWxMb29wKCkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0UHJvbWlzZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0UHJvbWlzZSA9IHRoaXMuZG9kaWFsTG9vcCgpO1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0UHJvbWlzZVxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHsgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT4geyB9KVxuICAgICAgICAgICAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RQcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3RQcm9taXNlO1xuICAgIH1cbiAgICBkb2RpYWxMb29wKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgbGV0IGxhc3RFcnJvcjtcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Nsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSBhcmUgZGlzY29ubmVjdGVkLCBhbmQgY2xvc2UgaXMgY2FsbGVkLCB0aGUgY2xpZW50XG4gICAgICAgICAgICAgICAgICAgIC8vIHN0aWxsIHRyaWVzIHRvIHJlY29ubmVjdCAtIHRvIG1hdGNoIHRoZSByZWNvbm5lY3QgcG9saWN5XG4gICAgICAgICAgICAgICAgICAgIC8vIGluIHRoZSBjYXNlIG9mIGNsb3NlLCB3YW50IHRvIHN0b3AuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VydmVycy5jbGVhcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB3YWl0ID0gdGhpcy5vcHRpb25zLnJlY29ubmVjdERlbGF5SGFuZGxlclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMub3B0aW9ucy5yZWNvbm5lY3REZWxheUhhbmRsZXIoKVxuICAgICAgICAgICAgICAgICAgICA6IG9wdGlvbnNfMS5ERUZBVUxUX1JFQ09OTkVDVF9USU1FX1dBSVQ7XG4gICAgICAgICAgICAgICAgbGV0IG1heFdhaXQgPSB3YWl0O1xuICAgICAgICAgICAgICAgIGNvbnN0IHNydiA9IHRoaXMuc2VsZWN0U2VydmVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFzcnYgfHwgdGhpcy5hYm9ydFJlY29ubmVjdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBsYXN0RXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sYXN0RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IHRoaXMubGFzdEVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgY29yZV8xLk5hdHNFcnJvci5lcnJvckZvckNvZGUoY29yZV8xLkVycm9yQ29kZS5Db25uZWN0aW9uUmVmdXNlZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICBpZiAoc3J2Lmxhc3RDb25uZWN0ID09PSAwIHx8IHNydi5sYXN0Q29ubmVjdCArIHdhaXQgPD0gbm93KSB7XG4gICAgICAgICAgICAgICAgICAgIHNydi5sYXN0Q29ubmVjdCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLl9kb0RpYWwoc3J2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb25uZWN0ZWRPbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy53YWl0T25GaXJzdENvbm5lY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VydmVycy5yZW1vdmVDdXJyZW50U2VydmVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzcnYucmVjb25uZWN0cysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbXJhID0gdGhpcy5vcHRpb25zLm1heFJlY29ubmVjdEF0dGVtcHRzIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobXJhICE9PSAtMSAmJiBzcnYucmVjb25uZWN0cyA+PSBtcmEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcnZlcnMucmVtb3ZlQ3VycmVudFNlcnZlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtYXhXYWl0ID0gTWF0aC5taW4obWF4V2FpdCwgc3J2Lmxhc3RDb25uZWN0ICsgd2FpdCAtIG5vdyk7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkICgwLCB1dGlsXzEuZGVsYXkpKG1heFdhaXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBjb25uZWN0KG9wdGlvbnMsIHB1Ymxpc2hlcikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgaCA9IG5ldyBQcm90b2NvbEhhbmRsZXIob3B0aW9ucywgcHVibGlzaGVyKTtcbiAgICAgICAgICAgIHlpZWxkIGguZGlhbExvb3AoKTtcbiAgICAgICAgICAgIHJldHVybiBoO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIHRvRXJyb3Iocykge1xuICAgICAgICBjb25zdCB0ID0gcyA/IHMudG9Mb3dlckNhc2UoKSA6IFwiXCI7XG4gICAgICAgIGlmICh0LmluZGV4T2YoXCJwZXJtaXNzaW9ucyB2aW9sYXRpb25cIikgIT09IC0xKSB7XG4gICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgY29yZV8xLk5hdHNFcnJvcihzLCBjb3JlXzEuRXJyb3JDb2RlLlBlcm1pc3Npb25zVmlvbGF0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IG0gPSBzLm1hdGNoKC8oUHVibGlzaHxTdWJzY3JpcHRpb24pIHRvIFwiKFxcUyspXCIvKTtcbiAgICAgICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICAgICAgZXJyLnBlcm1pc3Npb25Db250ZXh0ID0ge1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb246IG1bMV0udG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdDogbVsyXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVycjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0LmluZGV4T2YoXCJhdXRob3JpemF0aW9uIHZpb2xhdGlvblwiKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgY29yZV8xLk5hdHNFcnJvcihzLCBjb3JlXzEuRXJyb3JDb2RlLkF1dGhvcml6YXRpb25WaW9sYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHQuaW5kZXhPZihcInVzZXIgYXV0aGVudGljYXRpb24gZXhwaXJlZFwiKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgY29yZV8xLk5hdHNFcnJvcihzLCBjb3JlXzEuRXJyb3JDb2RlLkF1dGhlbnRpY2F0aW9uRXhwaXJlZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodC5pbmRleE9mKFwiYXV0aGVudGljYXRpb24gdGltZW91dFwiKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgY29yZV8xLk5hdHNFcnJvcihzLCBjb3JlXzEuRXJyb3JDb2RlLkF1dGhlbnRpY2F0aW9uVGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGNvcmVfMS5OYXRzRXJyb3IocywgY29yZV8xLkVycm9yQ29kZS5Qcm90b2NvbEVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcm9jZXNzTXNnKG1zZywgZGF0YSkge1xuICAgICAgICB0aGlzLmluTXNncysrO1xuICAgICAgICB0aGlzLmluQnl0ZXMgKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGlmICghdGhpcy5zdWJzY3JpcHRpb25zLnNpZENvdW50ZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdWIgPSB0aGlzLnN1YnNjcmlwdGlvbnMuZ2V0KG1zZy5zaWQpO1xuICAgICAgICBpZiAoIXN1Yikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN1Yi5yZWNlaXZlZCArPSAxO1xuICAgICAgICBpZiAoc3ViLmNhbGxiYWNrKSB7XG4gICAgICAgICAgICBzdWIuY2FsbGJhY2sobnVsbCwgbmV3IG1zZ18xLk1zZ0ltcGwobXNnLCBkYXRhLCB0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1Yi5tYXggIT09IHVuZGVmaW5lZCAmJiBzdWIucmVjZWl2ZWQgPj0gc3ViLm1heCkge1xuICAgICAgICAgICAgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvY2Vzc0Vycm9yKG0pIHtcbiAgICAgICAgY29uc3QgcyA9ICgwLCBlbmNvZGVyc18xLmRlY29kZSkobSk7XG4gICAgICAgIGNvbnN0IGVyciA9IFByb3RvY29sSGFuZGxlci50b0Vycm9yKHMpO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSB7IHR5cGU6IGNvcmVfMS5FdmVudHMuRXJyb3IsIGRhdGE6IGVyci5jb2RlIH07XG4gICAgICAgIGlmIChlcnIuaXNQZXJtaXNzaW9uRXJyb3IoKSkge1xuICAgICAgICAgICAgbGV0IGlzTXV4UGVybWlzc2lvbkVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZXJyLnBlcm1pc3Npb25Db250ZXh0KSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzLnBlcm1pc3Npb25Db250ZXh0ID0gZXJyLnBlcm1pc3Npb25Db250ZXh0O1xuICAgICAgICAgICAgICAgIGNvbnN0IG11eCA9IHRoaXMuc3Vic2NyaXB0aW9ucy5nZXRNdXgoKTtcbiAgICAgICAgICAgICAgICBpc011eFBlcm1pc3Npb25FcnJvciA9IChtdXggPT09IG51bGwgfHwgbXV4ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtdXguc3ViamVjdCkgPT09IGVyci5wZXJtaXNzaW9uQ29udGV4dC5zdWJqZWN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmhhbmRsZUVycm9yKGVycik7XG4gICAgICAgICAgICB0aGlzLm11eFN1YnNjcmlwdGlvbnMuaGFuZGxlRXJyb3IoaXNNdXhQZXJtaXNzaW9uRXJyb3IsIGVycik7XG4gICAgICAgICAgICBpZiAoaXNNdXhQZXJtaXNzaW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIHBlcm1pc3Npb24gLSBlbmFibGUgaXQgdG8gYmUgcmVjcmVhdGVkXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnNldE11eChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpc3BhdGNoU3RhdHVzKHN0YXR1cyk7XG4gICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyKTtcbiAgICB9XG4gICAgaGFuZGxlRXJyb3IoZXJyKSB7XG4gICAgICAgIGlmIChlcnIuaXNBdXRoRXJyb3IoKSkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVBdXRoRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlcnIuaXNQcm90b2NvbEVycm9yKCkpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdEVycm9yID0gZXJyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGVyci5pc0F1dGhUaW1lb3V0KCkpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdEVycm9yID0gZXJyO1xuICAgICAgICB9XG4gICAgICAgIC8vIGZhbGx0aHJvdWdoIGhlcmVcbiAgICAgICAgaWYgKCFlcnIuaXNQZXJtaXNzaW9uRXJyb3IoKSkge1xuICAgICAgICAgICAgdGhpcy5sYXN0RXJyb3IgPSBlcnI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlQXV0aEVycm9yKGVycikge1xuICAgICAgICBpZiAoKHRoaXMubGFzdEVycm9yICYmIGVyci5jb2RlID09PSB0aGlzLmxhc3RFcnJvci5jb2RlKSAmJlxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmlnbm9yZUF1dGhFcnJvckFib3J0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5hYm9ydFJlY29ubmVjdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdEVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RFcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvY2Vzc1BpbmcoKSB7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0LnNlbmQoUE9OR19DTUQpO1xuICAgIH1cbiAgICBwcm9jZXNzUG9uZygpIHtcbiAgICAgICAgY29uc3QgY2IgPSB0aGlzLnBvbmdzLnNoaWZ0KCk7XG4gICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgY2IucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByb2Nlc3NJbmZvKG0pIHtcbiAgICAgICAgY29uc3QgaW5mbyA9IEpTT04ucGFyc2UoKDAsIGVuY29kZXJzXzEuZGVjb2RlKShtKSk7XG4gICAgICAgIHRoaXMuaW5mbyA9IGluZm87XG4gICAgICAgIGNvbnN0IHVwZGF0ZXMgPSB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLmlnbm9yZUNsdXN0ZXJVcGRhdGVzXG4gICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgOiB0aGlzLnNlcnZlcnMudXBkYXRlKGluZm8sIHRoaXMudHJhbnNwb3J0LmlzRW5jcnlwdGVkKCkpO1xuICAgICAgICBpZiAoIXRoaXMuaW5mb1JlY2VpdmVkKSB7XG4gICAgICAgICAgICB0aGlzLmZlYXR1cmVzLnVwZGF0ZSgoMCwgc2VtdmVyXzEucGFyc2VTZW1WZXIpKGluZm8udmVyc2lvbikpO1xuICAgICAgICAgICAgdGhpcy5pbmZvUmVjZWl2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRoaXMudHJhbnNwb3J0LmlzRW5jcnlwdGVkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlcnZlcnMudXBkYXRlVExTTmFtZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc2VuZCBjb25uZWN0XG4gICAgICAgICAgICBjb25zdCB7IHZlcnNpb24sIGxhbmcgfSA9IHRoaXMudHJhbnNwb3J0O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gbmV3IENvbm5lY3QoeyB2ZXJzaW9uLCBsYW5nIH0sIHRoaXMub3B0aW9ucywgaW5mby5ub25jZSk7XG4gICAgICAgICAgICAgICAgaWYgKGluZm8uaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICBjLmhlYWRlcnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjLm5vX3Jlc3BvbmRlcnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjcyA9IEpTT04uc3RyaW5naWZ5KGMpO1xuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnNlbmQoKDAsIGVuY29kZXJzXzEuZW5jb2RlKShgQ09OTkVDVCAke2NzfSR7dHJhbnNwb3J0XzEuQ1JfTEZ9YCkpO1xuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnNlbmQoUElOR19DTUQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIC8vIGlmIHdlIGFyZSBkeWluZyBoZXJlLCB0aGlzIGlzIGxpa2VseSBzb21lIGFuIGF1dGhlbnRpY2F0b3IgYmxvd2luZyB1cFxuICAgICAgICAgICAgICAgIHRoaXMuX2Nsb3NlKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVwZGF0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0dXMoeyB0eXBlOiBjb3JlXzEuRXZlbnRzLlVwZGF0ZSwgZGF0YTogdXBkYXRlcyB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsZG0gPSBpbmZvLmxkbSAhPT0gdW5kZWZpbmVkID8gaW5mby5sZG0gOiBmYWxzZTtcbiAgICAgICAgaWYgKGxkbSkge1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaFN0YXR1cyh7XG4gICAgICAgICAgICAgICAgdHlwZTogY29yZV8xLkV2ZW50cy5MRE0sXG4gICAgICAgICAgICAgICAgZGF0YTogdGhpcy5zZXJ2ZXJzLmdldEN1cnJlbnRTZXJ2ZXIoKS50b1N0cmluZygpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVzaChlKSB7XG4gICAgICAgIHN3aXRjaCAoZS5raW5kKSB7XG4gICAgICAgICAgICBjYXNlIHBhcnNlcl8xLktpbmQuTVNHOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBtc2csIGRhdGEgfSA9IGU7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzTXNnKG1zZywgZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHBhcnNlcl8xLktpbmQuT0s6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHBhcnNlcl8xLktpbmQuRVJSOlxuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc0Vycm9yKGUuZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHBhcnNlcl8xLktpbmQuUElORzpcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NQaW5nKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHBhcnNlcl8xLktpbmQuUE9ORzpcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NQb25nKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHBhcnNlcl8xLktpbmQuSU5GTzpcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NJbmZvKGUuZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2VuZENvbW1hbmQoY21kLCAuLi5wYXlsb2Fkcykge1xuICAgICAgICBjb25zdCBsZW4gPSB0aGlzLm91dGJvdW5kLmxlbmd0aCgpO1xuICAgICAgICBsZXQgYnVmO1xuICAgICAgICBpZiAodHlwZW9mIGNtZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgYnVmID0gKDAsIGVuY29kZXJzXzEuZW5jb2RlKShjbWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYnVmID0gY21kO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3V0Ym91bmQuZmlsbChidWYsIC4uLnBheWxvYWRzKTtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgcXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZmx1c2hQZW5kaW5nKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLm91dGJvdW5kLnNpemUoKSA+PSB0aGlzLnBlbmRpbmdMaW1pdCkge1xuICAgICAgICAgICAgLy8gZmx1c2ggaW5saW5lXG4gICAgICAgICAgICB0aGlzLmZsdXNoUGVuZGluZygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHB1Ymxpc2goc3ViamVjdCwgcGF5bG9hZCA9IGVuY29kZXJzXzEuRW1wdHksIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IGRhdGE7XG4gICAgICAgIGlmIChwYXlsb2FkIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgICAgZGF0YSA9IHBheWxvYWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBheWxvYWQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGRhdGEgPSBlbmNvZGVyc18xLlRFLmVuY29kZShwYXlsb2FkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGNvcmVfMS5OYXRzRXJyb3IuZXJyb3JGb3JDb2RlKGNvcmVfMS5FcnJvckNvZGUuQmFkUGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxlbiA9IGRhdGEubGVuZ3RoO1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgb3B0aW9ucy5yZXBseSA9IG9wdGlvbnMucmVwbHkgfHwgXCJcIjtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSBlbmNvZGVyc18xLkVtcHR5O1xuICAgICAgICBsZXQgaGxlbiA9IDA7XG4gICAgICAgIGlmIChvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmluZm8gJiYgIXRoaXMuaW5mby5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGNvcmVfMS5OYXRzRXJyb3IoXCJoZWFkZXJzXCIsIGNvcmVfMS5FcnJvckNvZGUuU2VydmVyT3B0aW9uTm90QXZhaWxhYmxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGhkcnMgPSBvcHRpb25zLmhlYWRlcnM7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGRycy5lbmNvZGUoKTtcbiAgICAgICAgICAgIGhsZW4gPSBoZWFkZXJzLmxlbmd0aDtcbiAgICAgICAgICAgIGxlbiA9IGRhdGEubGVuZ3RoICsgaGxlbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbmZvICYmIGxlbiA+IHRoaXMuaW5mby5tYXhfcGF5bG9hZCkge1xuICAgICAgICAgICAgdGhyb3cgY29yZV8xLk5hdHNFcnJvci5lcnJvckZvckNvZGUoY29yZV8xLkVycm9yQ29kZS5NYXhQYXlsb2FkRXhjZWVkZWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3V0Qnl0ZXMgKz0gbGVuO1xuICAgICAgICB0aGlzLm91dE1zZ3MrKztcbiAgICAgICAgbGV0IHByb3RvO1xuICAgICAgICBpZiAob3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5yZXBseSkge1xuICAgICAgICAgICAgICAgIHByb3RvID0gYEhQVUIgJHtzdWJqZWN0fSAke29wdGlvbnMucmVwbHl9ICR7aGxlbn0gJHtsZW59XFxyXFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHByb3RvID0gYEhQVUIgJHtzdWJqZWN0fSAke2hsZW59ICR7bGVufVxcclxcbmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNlbmRDb21tYW5kKHByb3RvLCBoZWFkZXJzLCBkYXRhLCB0cmFuc3BvcnRfMS5DUkxGKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnJlcGx5KSB7XG4gICAgICAgICAgICAgICAgcHJvdG8gPSBgUFVCICR7c3ViamVjdH0gJHtvcHRpb25zLnJlcGx5fSAke2xlbn1cXHJcXG5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJvdG8gPSBgUFVCICR7c3ViamVjdH0gJHtsZW59XFxyXFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2VuZENvbW1hbmQocHJvdG8sIGRhdGEsIHRyYW5zcG9ydF8xLkNSTEYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlcXVlc3Qocikge1xuICAgICAgICB0aGlzLmluaXRNdXgoKTtcbiAgICAgICAgdGhpcy5tdXhTdWJzY3JpcHRpb25zLmFkZChyKTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfVxuICAgIHN1YnNjcmliZShzKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQocyk7XG4gICAgICAgIHRoaXMuX3N1YnVuc3ViKHMpO1xuICAgICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgX3N1YihzKSB7XG4gICAgICAgIGlmIChzLnF1ZXVlKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRDb21tYW5kKGBTVUIgJHtzLnN1YmplY3R9ICR7cy5xdWV1ZX0gJHtzLnNpZH1cXHJcXG5gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZENvbW1hbmQoYFNVQiAke3Muc3ViamVjdH0gJHtzLnNpZH1cXHJcXG5gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfc3VidW5zdWIocykge1xuICAgICAgICB0aGlzLl9zdWIocyk7XG4gICAgICAgIGlmIChzLm1heCkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZShzLCBzLm1heCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuICAgIHVuc3Vic2NyaWJlKHMsIG1heCkge1xuICAgICAgICB0aGlzLnVuc3ViKHMsIG1heCk7XG4gICAgICAgIGlmIChzLm1heCA9PT0gdW5kZWZpbmVkIHx8IHMucmVjZWl2ZWQgPj0gcy5tYXgpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5jYW5jZWwocyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdW5zdWIocywgbWF4KSB7XG4gICAgICAgIGlmICghcyB8fCB0aGlzLmlzQ2xvc2VkKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4KSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRDb21tYW5kKGBVTlNVQiAke3Muc2lkfSAke21heH1cXHJcXG5gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZENvbW1hbmQoYFVOU1VCICR7cy5zaWR9XFxyXFxuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcy5tYXggPSBtYXg7XG4gICAgfVxuICAgIHJlc3ViKHMsIHN1YmplY3QpIHtcbiAgICAgICAgaWYgKCFzIHx8IHRoaXMuaXNDbG9zZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHMuc3ViamVjdCA9IHN1YmplY3Q7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5yZXN1YihzKTtcbiAgICAgICAgLy8gd2UgZG9uJ3QgYXV0by11bnN1YiBoZXJlIGJlY2F1c2Ugd2UgZG9uJ3RcbiAgICAgICAgLy8gcmVhbGx5IGtub3cgXCJwcm9jZXNzZWRcIlxuICAgICAgICB0aGlzLl9zdWIocyk7XG4gICAgfVxuICAgIGZsdXNoKHApIHtcbiAgICAgICAgaWYgKCFwKSB7XG4gICAgICAgICAgICBwID0gKDAsIHV0aWxfMS5kZWZlcnJlZCkoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBvbmdzLnB1c2gocCk7XG4gICAgICAgIHRoaXMub3V0Ym91bmQuZmlsbChQSU5HX0NNRCk7XG4gICAgICAgIHRoaXMuZmx1c2hQZW5kaW5nKCk7XG4gICAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgICBzZW5kU3Vic2NyaXB0aW9ucygpIHtcbiAgICAgICAgY29uc3QgY21kcyA9IFtdO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuYWxsKCkuZm9yRWFjaCgocykgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3ViID0gcztcbiAgICAgICAgICAgIGlmIChzdWIucXVldWUpIHtcbiAgICAgICAgICAgICAgICBjbWRzLnB1c2goYFNVQiAke3N1Yi5zdWJqZWN0fSAke3N1Yi5xdWV1ZX0gJHtzdWIuc2lkfSR7dHJhbnNwb3J0XzEuQ1JfTEZ9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbWRzLnB1c2goYFNVQiAke3N1Yi5zdWJqZWN0fSAke3N1Yi5zaWR9JHt0cmFuc3BvcnRfMS5DUl9MRn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjbWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQuc2VuZCgoMCwgZW5jb2RlcnNfMS5lbmNvZGUpKGNtZHMuam9pbihcIlwiKSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9jbG9zZShlcnIpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLndoeUNsb3NlZCA9IG5ldyBFcnJvcihcImNsb3NlIHRyYWNlXCIpLnN0YWNrIHx8IFwiXCI7XG4gICAgICAgICAgICB0aGlzLmhlYXJ0YmVhdHMuY2FuY2VsKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0RXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RFcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdEVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tdXhTdWJzY3JpcHRpb25zLmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goKGwpID0+IHtcbiAgICAgICAgICAgICAgICBsLnN0b3AoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMudHJhbnNwb3J0LmNsb3NlKGVycik7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmNsb3NlZC5yZXNvbHZlKGVycik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nsb3NlKCk7XG4gICAgfVxuICAgIGlzQ2xvc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvc2VkO1xuICAgIH1cbiAgICBkcmFpbigpIHtcbiAgICAgICAgY29uc3Qgc3VicyA9IHRoaXMuc3Vic2NyaXB0aW9ucy5hbGwoKTtcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgc3Vicy5mb3JFYWNoKChzdWIpID0+IHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goc3ViLmRyYWluKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdGhpcy5ub01vcmVQdWJsaXNoaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZmx1c2goKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pKVxuICAgICAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgIC8vIGNhbm5vdCBoYXBwZW5cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZsdXNoUGVuZGluZygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmluZm9SZWNlaXZlZCB8fCAhdGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vdXRib3VuZC5zaXplKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGQgPSB0aGlzLm91dGJvdW5kLmRyYWluKCk7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5zZW5kKGQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluaXRNdXgoKSB7XG4gICAgICAgIGNvbnN0IG11eCA9IHRoaXMuc3Vic2NyaXB0aW9ucy5nZXRNdXgoKTtcbiAgICAgICAgaWYgKCFtdXgpIHtcbiAgICAgICAgICAgIGNvbnN0IGluYm94ID0gdGhpcy5tdXhTdWJzY3JpcHRpb25zLmluaXQodGhpcy5vcHRpb25zLmluYm94UHJlZml4KTtcbiAgICAgICAgICAgIC8vIGRvdCBpcyBhbHJlYWR5IHBhcnQgb2YgbXV4XG4gICAgICAgICAgICBjb25zdCBzdWIgPSBuZXcgU3Vic2NyaXB0aW9uSW1wbCh0aGlzLCBgJHtpbmJveH0qYCk7XG4gICAgICAgICAgICBzdWIuY2FsbGJhY2sgPSB0aGlzLm11eFN1YnNjcmlwdGlvbnMuZGlzcGF0Y2hlcigpO1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnNldE11eChzdWIpO1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmUoc3ViKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZWxlY3RTZXJ2ZXIoKSB7XG4gICAgICAgIGNvbnN0IHNlcnZlciA9IHRoaXMuc2VydmVycy5zZWxlY3RTZXJ2ZXIoKTtcbiAgICAgICAgaWYgKHNlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBsYWNlIGluIGNsaWVudCBjb250ZXh0LlxuICAgICAgICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VydmVyO1xuICAgIH1cbiAgICBnZXRTZXJ2ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZlcjtcbiAgICB9XG59XG5leHBvcnRzLlByb3RvY29sSGFuZGxlciA9IFByb3RvY29sSGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3RvY29sLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/protocol.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/queued_iterator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/queued_iterator.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.QueuedIteratorImpl = void 0;\n/*\n * Copyright 2020-2022 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/nats/lib/nats-base-client/util.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nclass QueuedIteratorImpl {\n    constructor() {\n        this.inflight = 0;\n        this.filtered = 0;\n        this.pendingFiltered = 0;\n        this.processed = 0;\n        this.received = 0;\n        this.noIterator = false;\n        this.done = false;\n        this.signal = (0, util_1.deferred)();\n        this.yields = [];\n        this.iterClosed = (0, util_1.deferred)();\n        this.time = 0;\n        this.yielding = false;\n    }\n    [Symbol.asyncIterator]() {\n        return this.iterate();\n    }\n    push(v) {\n        if (this.done) {\n            return;\n        }\n        if (typeof v === \"function\") {\n            this.yields.push(v);\n            this.signal.resolve();\n            return;\n        }\n        const { ingest, protocol } = this.ingestionFilterFn\n            ? this.ingestionFilterFn(v, this.ctx || this)\n            : { ingest: true, protocol: false };\n        if (ingest) {\n            if (protocol) {\n                this.filtered++;\n                this.pendingFiltered++;\n            }\n            this.yields.push(v);\n            this.signal.resolve();\n        }\n    }\n    iterate() {\n        return __asyncGenerator(this, arguments, function* iterate_1() {\n            if (this.noIterator) {\n                throw new core_1.NatsError(\"unsupported iterator\", core_1.ErrorCode.ApiError);\n            }\n            if (this.yielding) {\n                throw new core_1.NatsError(\"already yielding\", core_1.ErrorCode.ApiError);\n            }\n            this.yielding = true;\n            try {\n                while (true) {\n                    if (this.yields.length === 0) {\n                        yield __await(this.signal);\n                    }\n                    if (this.err) {\n                        throw this.err;\n                    }\n                    const yields = this.yields;\n                    this.inflight = yields.length;\n                    this.yields = [];\n                    for (let i = 0; i < yields.length; i++) {\n                        if (typeof yields[i] === \"function\") {\n                            const fn = yields[i];\n                            try {\n                                fn();\n                            }\n                            catch (err) {\n                                // failed on the invocation - fail the iterator\n                                // so they know to fix the callback\n                                throw err;\n                            }\n                            // fn could have also set an error\n                            if (this.err) {\n                                throw this.err;\n                            }\n                            continue;\n                        }\n                        // only pass messages that pass the filter\n                        const ok = this.protocolFilterFn\n                            ? this.protocolFilterFn(yields[i])\n                            : true;\n                        if (ok) {\n                            this.processed++;\n                            const start = Date.now();\n                            yield yield __await(yields[i]);\n                            this.time = Date.now() - start;\n                            if (this.dispatchedFn && yields[i]) {\n                                this.dispatchedFn(yields[i]);\n                            }\n                        }\n                        else {\n                            this.pendingFiltered--;\n                        }\n                        this.inflight--;\n                    }\n                    // yielding could have paused and microtask\n                    // could have added messages. Prevent allocations\n                    // if possible\n                    if (this.done) {\n                        break;\n                    }\n                    else if (this.yields.length === 0) {\n                        yields.length = 0;\n                        this.yields = yields;\n                        this.signal = (0, util_1.deferred)();\n                    }\n                }\n            }\n            finally {\n                // the iterator used break/return\n                this.stop();\n            }\n        });\n    }\n    stop(err) {\n        if (this.done) {\n            return;\n        }\n        this.err = err;\n        this.done = true;\n        this.signal.resolve();\n        this.iterClosed.resolve();\n    }\n    getProcessed() {\n        return this.noIterator ? this.received : this.processed;\n    }\n    getPending() {\n        return this.yields.length + this.inflight - this.pendingFiltered;\n    }\n    getReceived() {\n        return this.received - this.filtered;\n    }\n}\nexports.QueuedIteratorImpl = QueuedIteratorImpl;\n//# sourceMappingURL=queued_iterator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/queued_iterator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/request.js":
/*!***********************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/request.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RequestOne = exports.RequestMany = exports.BaseRequest = void 0;\n/*\n * Copyright 2020-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/nats/lib/nats-base-client/util.js\");\nconst nuid_1 = __webpack_require__(/*! ./nuid */ \"(rsc)/./node_modules/nats/lib/nats-base-client/nuid.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nclass BaseRequest {\n    constructor(mux, requestSubject, asyncTraces = true) {\n        this.mux = mux;\n        this.requestSubject = requestSubject;\n        this.received = 0;\n        this.token = nuid_1.nuid.next();\n        if (asyncTraces) {\n            this.ctx = new Error();\n        }\n    }\n}\nexports.BaseRequest = BaseRequest;\n/**\n * Request expects multiple message response\n * the request ends when the timer expires,\n * an error arrives or an expected count of messages\n * arrives, end is signaled by a null message\n */\nclass RequestMany extends BaseRequest {\n    constructor(mux, requestSubject, opts = { maxWait: 1000 }) {\n        super(mux, requestSubject);\n        this.opts = opts;\n        if (typeof this.opts.callback !== \"function\") {\n            throw new Error(\"callback is required\");\n        }\n        this.callback = this.opts.callback;\n        this.max = typeof opts.maxMessages === \"number\" && opts.maxMessages > 0\n            ? opts.maxMessages\n            : -1;\n        this.done = (0, util_1.deferred)();\n        this.done.then(() => {\n            this.callback(null, null);\n        });\n        // @ts-ignore: node is not a number\n        this.timer = setTimeout(() => {\n            this.cancel();\n        }, opts.maxWait);\n    }\n    cancel(err) {\n        if (err) {\n            this.callback(err, null);\n        }\n        clearTimeout(this.timer);\n        this.mux.cancel(this);\n        this.done.resolve();\n    }\n    resolver(err, msg) {\n        if (err) {\n            if (this.ctx) {\n                err.stack += `\\n\\n${this.ctx.stack}`;\n            }\n            this.cancel(err);\n        }\n        else {\n            this.callback(null, msg);\n            if (this.opts.strategy === core_1.RequestStrategy.Count) {\n                this.max--;\n                if (this.max === 0) {\n                    this.cancel();\n                }\n            }\n            if (this.opts.strategy === core_1.RequestStrategy.JitterTimer) {\n                clearTimeout(this.timer);\n                // @ts-ignore: node is not a number\n                this.timer = setTimeout(() => {\n                    this.cancel();\n                }, this.opts.jitter || 300);\n            }\n            if (this.opts.strategy === core_1.RequestStrategy.SentinelMsg) {\n                if (msg && msg.data.length === 0) {\n                    this.cancel();\n                }\n            }\n        }\n    }\n}\nexports.RequestMany = RequestMany;\nclass RequestOne extends BaseRequest {\n    constructor(mux, requestSubject, opts = { timeout: 1000 }, asyncTraces = true) {\n        super(mux, requestSubject, asyncTraces);\n        // extend(this, opts);\n        this.deferred = (0, util_1.deferred)();\n        this.timer = (0, util_1.timeout)(opts.timeout, asyncTraces);\n    }\n    resolver(err, msg) {\n        if (this.timer) {\n            this.timer.cancel();\n        }\n        if (err) {\n            if (this.ctx) {\n                err.stack += `\\n\\n${this.ctx.stack}`;\n            }\n            this.deferred.reject(err);\n        }\n        else {\n            this.deferred.resolve(msg);\n        }\n        this.cancel();\n    }\n    cancel(err) {\n        if (this.timer) {\n            this.timer.cancel();\n        }\n        this.mux.cancel(this);\n        this.deferred.reject(err ? err : core_1.NatsError.errorForCode(core_1.ErrorCode.Cancelled));\n    }\n}\nexports.RequestOne = RequestOne;\n//# sourceMappingURL=request.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9yZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixHQUFHLG1CQUFtQixHQUFHLG1CQUFtQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLHNFQUFRO0FBQy9CLGVBQWUsbUJBQU8sQ0FBQyxzRUFBUTtBQUMvQixlQUFlLG1CQUFPLENBQUMsc0VBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxlQUFlO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGVBQWU7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0EsOENBQThDLGVBQWU7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxlQUFlO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC9yZXF1ZXN0LmpzPzhjZDIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlcXVlc3RPbmUgPSBleHBvcnRzLlJlcXVlc3RNYW55ID0gZXhwb3J0cy5CYXNlUmVxdWVzdCA9IHZvaWQgMDtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMC0yMDIzIFRoZSBOQVRTIEF1dGhvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuY29uc3QgbnVpZF8xID0gcmVxdWlyZShcIi4vbnVpZFwiKTtcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCIuL2NvcmVcIik7XG5jbGFzcyBCYXNlUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IobXV4LCByZXF1ZXN0U3ViamVjdCwgYXN5bmNUcmFjZXMgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMubXV4ID0gbXV4O1xuICAgICAgICB0aGlzLnJlcXVlc3RTdWJqZWN0ID0gcmVxdWVzdFN1YmplY3Q7XG4gICAgICAgIHRoaXMucmVjZWl2ZWQgPSAwO1xuICAgICAgICB0aGlzLnRva2VuID0gbnVpZF8xLm51aWQubmV4dCgpO1xuICAgICAgICBpZiAoYXN5bmNUcmFjZXMpIHtcbiAgICAgICAgICAgIHRoaXMuY3R4ID0gbmV3IEVycm9yKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkJhc2VSZXF1ZXN0ID0gQmFzZVJlcXVlc3Q7XG4vKipcbiAqIFJlcXVlc3QgZXhwZWN0cyBtdWx0aXBsZSBtZXNzYWdlIHJlc3BvbnNlXG4gKiB0aGUgcmVxdWVzdCBlbmRzIHdoZW4gdGhlIHRpbWVyIGV4cGlyZXMsXG4gKiBhbiBlcnJvciBhcnJpdmVzIG9yIGFuIGV4cGVjdGVkIGNvdW50IG9mIG1lc3NhZ2VzXG4gKiBhcnJpdmVzLCBlbmQgaXMgc2lnbmFsZWQgYnkgYSBudWxsIG1lc3NhZ2VcbiAqL1xuY2xhc3MgUmVxdWVzdE1hbnkgZXh0ZW5kcyBCYXNlUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IobXV4LCByZXF1ZXN0U3ViamVjdCwgb3B0cyA9IHsgbWF4V2FpdDogMTAwMCB9KSB7XG4gICAgICAgIHN1cGVyKG11eCwgcmVxdWVzdFN1YmplY3QpO1xuICAgICAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0cy5jYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYWxsYmFjayBpcyByZXF1aXJlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhbGxiYWNrID0gdGhpcy5vcHRzLmNhbGxiYWNrO1xuICAgICAgICB0aGlzLm1heCA9IHR5cGVvZiBvcHRzLm1heE1lc3NhZ2VzID09PSBcIm51bWJlclwiICYmIG9wdHMubWF4TWVzc2FnZXMgPiAwXG4gICAgICAgICAgICA/IG9wdHMubWF4TWVzc2FnZXNcbiAgICAgICAgICAgIDogLTE7XG4gICAgICAgIHRoaXMuZG9uZSA9ICgwLCB1dGlsXzEuZGVmZXJyZWQpKCk7XG4gICAgICAgIHRoaXMuZG9uZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2sobnVsbCwgbnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBAdHMtaWdub3JlOiBub2RlIGlzIG5vdCBhIG51bWJlclxuICAgICAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNhbmNlbCgpO1xuICAgICAgICB9LCBvcHRzLm1heFdhaXQpO1xuICAgIH1cbiAgICBjYW5jZWwoZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7XG4gICAgICAgIHRoaXMubXV4LmNhbmNlbCh0aGlzKTtcbiAgICAgICAgdGhpcy5kb25lLnJlc29sdmUoKTtcbiAgICB9XG4gICAgcmVzb2x2ZXIoZXJyLCBtc2cpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3R4KSB7XG4gICAgICAgICAgICAgICAgZXJyLnN0YWNrICs9IGBcXG5cXG4ke3RoaXMuY3R4LnN0YWNrfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNhbmNlbChlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWxsYmFjayhudWxsLCBtc2cpO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5zdHJhdGVneSA9PT0gY29yZV8xLlJlcXVlc3RTdHJhdGVneS5Db3VudCkge1xuICAgICAgICAgICAgICAgIHRoaXMubWF4LS07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWF4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5zdHJhdGVneSA9PT0gY29yZV8xLlJlcXVlc3RTdHJhdGVneS5KaXR0ZXJUaW1lcikge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlOiBub2RlIGlzIG5vdCBhIG51bWJlclxuICAgICAgICAgICAgICAgIHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW5jZWwoKTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzLm9wdHMuaml0dGVyIHx8IDMwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnN0cmF0ZWd5ID09PSBjb3JlXzEuUmVxdWVzdFN0cmF0ZWd5LlNlbnRpbmVsTXNnKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1zZyAmJiBtc2cuZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW5jZWwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlJlcXVlc3RNYW55ID0gUmVxdWVzdE1hbnk7XG5jbGFzcyBSZXF1ZXN0T25lIGV4dGVuZHMgQmFzZVJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKG11eCwgcmVxdWVzdFN1YmplY3QsIG9wdHMgPSB7IHRpbWVvdXQ6IDEwMDAgfSwgYXN5bmNUcmFjZXMgPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKG11eCwgcmVxdWVzdFN1YmplY3QsIGFzeW5jVHJhY2VzKTtcbiAgICAgICAgLy8gZXh0ZW5kKHRoaXMsIG9wdHMpO1xuICAgICAgICB0aGlzLmRlZmVycmVkID0gKDAsIHV0aWxfMS5kZWZlcnJlZCkoKTtcbiAgICAgICAgdGhpcy50aW1lciA9ICgwLCB1dGlsXzEudGltZW91dCkob3B0cy50aW1lb3V0LCBhc3luY1RyYWNlcyk7XG4gICAgfVxuICAgIHJlc29sdmVyKGVyciwgbXNnKSB7XG4gICAgICAgIGlmICh0aGlzLnRpbWVyKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVyLmNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN0eCkge1xuICAgICAgICAgICAgICAgIGVyci5zdGFjayArPSBgXFxuXFxuJHt0aGlzLmN0eC5zdGFja31gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZWZlcnJlZC5yZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVmZXJyZWQucmVzb2x2ZShtc2cpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgfVxuICAgIGNhbmNlbChlcnIpIHtcbiAgICAgICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgICAgICAgIHRoaXMudGltZXIuY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tdXguY2FuY2VsKHRoaXMpO1xuICAgICAgICB0aGlzLmRlZmVycmVkLnJlamVjdChlcnIgPyBlcnIgOiBjb3JlXzEuTmF0c0Vycm9yLmVycm9yRm9yQ29kZShjb3JlXzEuRXJyb3JDb2RlLkNhbmNlbGxlZCkpO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVxdWVzdE9uZSA9IFJlcXVlc3RPbmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/semver.js":
/*!**********************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/semver.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2022-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Features = exports.Feature = exports.compare = exports.parseSemVer = void 0;\nfunction parseSemVer(s = \"\") {\n    const m = s.match(/(\\d+).(\\d+).(\\d+)/);\n    if (m) {\n        return {\n            major: parseInt(m[1]),\n            minor: parseInt(m[2]),\n            micro: parseInt(m[3]),\n        };\n    }\n    throw new Error(`'${s}' is not a semver value`);\n}\nexports.parseSemVer = parseSemVer;\nfunction compare(a, b) {\n    if (a.major < b.major)\n        return -1;\n    if (a.major > b.major)\n        return 1;\n    if (a.minor < b.minor)\n        return -1;\n    if (a.minor > b.minor)\n        return 1;\n    if (a.micro < b.micro)\n        return -1;\n    if (a.micro > b.micro)\n        return 1;\n    return 0;\n}\nexports.compare = compare;\nvar Feature;\n(function (Feature) {\n    Feature[\"JS_KV\"] = \"js_kv\";\n    Feature[\"JS_OBJECTSTORE\"] = \"js_objectstore\";\n    Feature[\"JS_PULL_MAX_BYTES\"] = \"js_pull_max_bytes\";\n    Feature[\"JS_NEW_CONSUMER_CREATE_API\"] = \"js_new_consumer_create\";\n    Feature[\"JS_ALLOW_DIRECT\"] = \"js_allow_direct\";\n    Feature[\"JS_MULTIPLE_CONSUMER_FILTER\"] = \"js_multiple_consumer_filter\";\n    Feature[\"JS_SIMPLIFICATION\"] = \"js_simplification\";\n    Feature[\"JS_STREAM_CONSUMER_METADATA\"] = \"js_stream_consumer_metadata\";\n    Feature[\"JS_CONSUMER_FILTER_SUBJECTS\"] = \"js_consumer_filter_subjects\";\n    Feature[\"JS_STREAM_FIRST_SEQ\"] = \"js_stream_first_seq\";\n    Feature[\"JS_STREAM_SUBJECT_TRANSFORM\"] = \"js_stream_subject_transform\";\n    Feature[\"JS_STREAM_SOURCE_SUBJECT_TRANSFORM\"] = \"js_stream_source_subject_transform\";\n    Feature[\"JS_STREAM_COMPRESSION\"] = \"js_stream_compression\";\n    Feature[\"JS_DEFAULT_CONSUMER_LIMITS\"] = \"js_default_consumer_limits\";\n})(Feature || (exports.Feature = Feature = {}));\nclass Features {\n    constructor(v) {\n        this.features = new Map();\n        this.disabled = [];\n        this.update(v);\n    }\n    /**\n     * Removes all disabled entries\n     */\n    resetDisabled() {\n        this.disabled.length = 0;\n        this.update(this.server);\n    }\n    /**\n     * Disables a particular feature.\n     * @param f\n     */\n    disable(f) {\n        this.disabled.push(f);\n        this.update(this.server);\n    }\n    isDisabled(f) {\n        return this.disabled.indexOf(f) !== -1;\n    }\n    update(v) {\n        if (typeof v === \"string\") {\n            v = parseSemVer(v);\n        }\n        this.server = v;\n        this.set(Feature.JS_KV, \"2.6.2\");\n        this.set(Feature.JS_OBJECTSTORE, \"2.6.3\");\n        this.set(Feature.JS_PULL_MAX_BYTES, \"2.8.3\");\n        this.set(Feature.JS_NEW_CONSUMER_CREATE_API, \"2.9.0\");\n        this.set(Feature.JS_ALLOW_DIRECT, \"2.9.0\");\n        this.set(Feature.JS_MULTIPLE_CONSUMER_FILTER, \"2.10.0\");\n        this.set(Feature.JS_SIMPLIFICATION, \"2.9.4\");\n        this.set(Feature.JS_STREAM_CONSUMER_METADATA, \"2.10.0\");\n        this.set(Feature.JS_CONSUMER_FILTER_SUBJECTS, \"2.10.0\");\n        this.set(Feature.JS_STREAM_FIRST_SEQ, \"2.10.0\");\n        this.set(Feature.JS_STREAM_SUBJECT_TRANSFORM, \"2.10.0\");\n        this.set(Feature.JS_STREAM_SOURCE_SUBJECT_TRANSFORM, \"2.10.0\");\n        this.set(Feature.JS_STREAM_COMPRESSION, \"2.10.0\");\n        this.set(Feature.JS_DEFAULT_CONSUMER_LIMITS, \"2.10.0\");\n        this.disabled.forEach((f) => {\n            this.features.delete(f);\n        });\n    }\n    /**\n     * Register a feature that requires a particular server version.\n     * @param f\n     * @param requires\n     */\n    set(f, requires) {\n        this.features.set(f, {\n            min: requires,\n            ok: compare(this.server, parseSemVer(requires)) >= 0,\n        });\n    }\n    /**\n     * Returns whether the feature is available and the min server\n     * version that supports it.\n     * @param f\n     */\n    get(f) {\n        return this.features.get(f) || { min: \"unknown\", ok: false };\n    }\n    /**\n     * Returns true if the feature is supported\n     * @param f\n     */\n    supports(f) {\n        var _a;\n        return ((_a = this.get(f)) === null || _a === void 0 ? void 0 : _a.ok) || false;\n    }\n    /**\n     * Returns true if the server is at least the specified version\n     * @param v\n     */\n    require(v) {\n        if (typeof v === \"string\") {\n            v = parseSemVer(v);\n        }\n        return compare(this.server, v) >= 0;\n    }\n}\nexports.Features = Features;\n//# sourceMappingURL=semver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/semver.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/servers.js":
/*!***********************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/servers.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Servers = exports.ServerImpl = exports.hostPort = exports.isIPV4OrHostname = void 0;\n/*\n * Copyright 2018-2022 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst transport_1 = __webpack_require__(/*! ./transport */ \"(rsc)/./node_modules/nats/lib/nats-base-client/transport.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/nats/lib/nats-base-client/util.js\");\nconst ipparser_1 = __webpack_require__(/*! ./ipparser */ \"(rsc)/./node_modules/nats/lib/nats-base-client/ipparser.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nfunction isIPV4OrHostname(hp) {\n    if (hp.indexOf(\".\") !== -1) {\n        return true;\n    }\n    if (hp.indexOf(\"[\") !== -1 || hp.indexOf(\"::\") !== -1) {\n        return false;\n    }\n    // if we have a plain hostname or host:port\n    if (hp.split(\":\").length <= 2) {\n        return true;\n    }\n    return false;\n}\nexports.isIPV4OrHostname = isIPV4OrHostname;\nfunction isIPV6(hp) {\n    return !isIPV4OrHostname(hp);\n}\nfunction filterIpv6MappedToIpv4(hp) {\n    const prefix = \"::FFFF:\";\n    const idx = hp.toUpperCase().indexOf(prefix);\n    if (idx !== -1 && hp.indexOf(\".\") !== -1) {\n        // we have something like: ::FFFF:127.0.0.1 or [::FFFF:127.0.0.1]:4222\n        let ip = hp.substring(idx + prefix.length);\n        ip = ip.replace(\"[\", \"\");\n        return ip.replace(\"]\", \"\");\n    }\n    return hp;\n}\nfunction hostPort(u) {\n    u = u.trim();\n    // remove any protocol that may have been provided\n    if (u.match(/^(.*:\\/\\/)(.*)/m)) {\n        u = u.replace(/^(.*:\\/\\/)(.*)/gm, \"$2\");\n    }\n    // in web environments, URL may not be a living standard\n    // that means that protocols other than HTTP/S are not\n    // parsable correctly.\n    // the third complication is that we may have been given\n    // an IPv6 or worse IPv6 mapping an Ipv4\n    u = filterIpv6MappedToIpv4(u);\n    // we only wrap cases where they gave us a plain ipv6\n    // and we are not already bracketed\n    if (isIPV6(u) && u.indexOf(\"[\") === -1) {\n        u = `[${u}]`;\n    }\n    // if we have ipv6, we expect port after ']:' otherwise after ':'\n    const op = isIPV6(u) ? u.match(/(]:)(\\d+)/) : u.match(/(:)(\\d+)/);\n    const port = op && op.length === 3 && op[1] && op[2]\n        ? parseInt(op[2])\n        : core_1.DEFAULT_PORT;\n    // the next complication is that new URL() may\n    // eat ports which match the protocol - so for example\n    // port 80 may be eliminated - so we flip the protocol\n    // so that it always yields a value\n    const protocol = port === 80 ? \"https\" : \"http\";\n    const url = new URL(`${protocol}://${u}`);\n    url.port = `${port}`;\n    let hostname = url.hostname;\n    // if we are bracketed, we need to rip it out\n    if (hostname.charAt(0) === \"[\") {\n        hostname = hostname.substring(1, hostname.length - 1);\n    }\n    const listen = url.host;\n    return { listen, hostname, port };\n}\nexports.hostPort = hostPort;\n/**\n * @hidden\n */\nclass ServerImpl {\n    constructor(u, gossiped = false) {\n        this.src = u;\n        this.tlsName = \"\";\n        const v = hostPort(u);\n        this.listen = v.listen;\n        this.hostname = v.hostname;\n        this.port = v.port;\n        this.didConnect = false;\n        this.reconnects = 0;\n        this.lastConnect = 0;\n        this.gossiped = gossiped;\n    }\n    toString() {\n        return this.listen;\n    }\n    resolve(opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!opts.fn) {\n                // we cannot resolve - transport doesn't support it\n                // don't add - to resolves or we get a circ reference\n                return [this];\n            }\n            const buf = [];\n            if ((0, ipparser_1.isIP)(this.hostname)) {\n                // don't add - to resolves or we get a circ reference\n                return [this];\n            }\n            else {\n                // resolve the hostname to ips\n                const ips = yield opts.fn(this.hostname);\n                if (opts.debug) {\n                    console.log(`resolve ${this.hostname} = ${ips.join(\",\")}`);\n                }\n                for (const ip of ips) {\n                    // letting URL handle the details of representing IPV6 ip with a port, etc\n                    // careful to make sure the protocol doesn't line with standard ports or they\n                    // get swallowed\n                    const proto = this.port === 80 ? \"https\" : \"http\";\n                    // ipv6 won't be bracketed here, because it came from resolve\n                    const url = new URL(`${proto}://${isIPV6(ip) ? \"[\" + ip + \"]\" : ip}`);\n                    url.port = `${this.port}`;\n                    const ss = new ServerImpl(url.host, false);\n                    ss.tlsName = this.hostname;\n                    buf.push(ss);\n                }\n            }\n            if (opts.randomize) {\n                (0, util_1.shuffle)(buf);\n            }\n            this.resolves = buf;\n            return buf;\n        });\n    }\n}\nexports.ServerImpl = ServerImpl;\n/**\n * @hidden\n */\nclass Servers {\n    constructor(listens = [], opts = {}) {\n        this.firstSelect = true;\n        this.servers = [];\n        this.tlsName = \"\";\n        this.randomize = opts.randomize || false;\n        const urlParseFn = (0, transport_1.getUrlParseFn)();\n        if (listens) {\n            listens.forEach((hp) => {\n                hp = urlParseFn ? urlParseFn(hp) : hp;\n                this.servers.push(new ServerImpl(hp));\n            });\n            if (this.randomize) {\n                this.servers = (0, util_1.shuffle)(this.servers);\n            }\n        }\n        if (this.servers.length === 0) {\n            this.addServer(`${core_1.DEFAULT_HOST}:${(0, transport_1.defaultPort)()}`, false);\n        }\n        this.currentServer = this.servers[0];\n    }\n    clear() {\n        this.servers.length = 0;\n    }\n    updateTLSName() {\n        const cs = this.getCurrentServer();\n        if (!(0, ipparser_1.isIP)(cs.hostname)) {\n            this.tlsName = cs.hostname;\n            this.servers.forEach((s) => {\n                if (s.gossiped) {\n                    s.tlsName = this.tlsName;\n                }\n            });\n        }\n    }\n    getCurrentServer() {\n        return this.currentServer;\n    }\n    addServer(u, implicit = false) {\n        const urlParseFn = (0, transport_1.getUrlParseFn)();\n        u = urlParseFn ? urlParseFn(u) : u;\n        const s = new ServerImpl(u, implicit);\n        if ((0, ipparser_1.isIP)(s.hostname)) {\n            s.tlsName = this.tlsName;\n        }\n        this.servers.push(s);\n    }\n    selectServer() {\n        // allow using select without breaking the order of the servers\n        if (this.firstSelect) {\n            this.firstSelect = false;\n            return this.currentServer;\n        }\n        const t = this.servers.shift();\n        if (t) {\n            this.servers.push(t);\n            this.currentServer = t;\n        }\n        return t;\n    }\n    removeCurrentServer() {\n        this.removeServer(this.currentServer);\n    }\n    removeServer(server) {\n        if (server) {\n            const index = this.servers.indexOf(server);\n            this.servers.splice(index, 1);\n        }\n    }\n    length() {\n        return this.servers.length;\n    }\n    next() {\n        return this.servers.length ? this.servers[0] : undefined;\n    }\n    getServers() {\n        return this.servers;\n    }\n    update(info, encrypted) {\n        const added = [];\n        let deleted = [];\n        const urlParseFn = (0, transport_1.getUrlParseFn)();\n        const discovered = new Map();\n        if (info.connect_urls && info.connect_urls.length > 0) {\n            info.connect_urls.forEach((hp) => {\n                hp = urlParseFn ? urlParseFn(hp, encrypted) : hp;\n                const s = new ServerImpl(hp, true);\n                discovered.set(hp, s);\n            });\n        }\n        // remove gossiped servers that are no longer reported\n        const toDelete = [];\n        this.servers.forEach((s, index) => {\n            const u = s.listen;\n            if (s.gossiped && this.currentServer.listen !== u &&\n                discovered.get(u) === undefined) {\n                // server was removed\n                toDelete.push(index);\n            }\n            // remove this entry from reported\n            discovered.delete(u);\n        });\n        // perform the deletion\n        toDelete.reverse();\n        toDelete.forEach((index) => {\n            const removed = this.servers.splice(index, 1);\n            deleted = deleted.concat(removed[0].listen);\n        });\n        // remaining servers are new\n        discovered.forEach((v, k) => {\n            this.servers.push(v);\n            added.push(k);\n        });\n        return { added, deleted };\n    }\n}\nexports.Servers = Servers;\n//# sourceMappingURL=servers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/servers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/service.js":
/*!***********************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/service.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServiceImpl = exports.ServiceGroupImpl = exports.ServiceMsgImpl = exports.ServiceApiPrefix = void 0;\n/*\n * Copyright 2022-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/nats/lib/nats-base-client/util.js\");\nconst headers_1 = __webpack_require__(/*! ./headers */ \"(rsc)/./node_modules/nats/lib/nats-base-client/headers.js\");\nconst codec_1 = __webpack_require__(/*! ./codec */ \"(rsc)/./node_modules/nats/lib/nats-base-client/codec.js\");\nconst nuid_1 = __webpack_require__(/*! ./nuid */ \"(rsc)/./node_modules/nats/lib/nats-base-client/nuid.js\");\nconst queued_iterator_1 = __webpack_require__(/*! ./queued_iterator */ \"(rsc)/./node_modules/nats/lib/nats-base-client/queued_iterator.js\");\nconst jsutil_1 = __webpack_require__(/*! ../jetstream/jsutil */ \"(rsc)/./node_modules/nats/lib/jetstream/jsutil.js\");\nconst semver_1 = __webpack_require__(/*! ./semver */ \"(rsc)/./node_modules/nats/lib/nats-base-client/semver.js\");\nconst encoders_1 = __webpack_require__(/*! ./encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\n/**\n * Services have common backplane subject pattern:\n *\n * `$SRV.PING|STATS|INFO` - pings or retrieves status for all services\n * `$SRV.PING|STATS|INFO.<name>` - pings or retrieves status for all services having the specified name\n * `$SRV.PING|STATS|INFO.<name>.<id>` - pings or retrieves status of a particular service\n *\n * Note that <name> and <id> are upper-cased.\n */\nexports.ServiceApiPrefix = \"$SRV\";\nclass ServiceMsgImpl {\n    constructor(msg) {\n        this.msg = msg;\n    }\n    get data() {\n        return this.msg.data;\n    }\n    get sid() {\n        return this.msg.sid;\n    }\n    get subject() {\n        return this.msg.subject;\n    }\n    get reply() {\n        return this.msg.reply || \"\";\n    }\n    get headers() {\n        return this.msg.headers;\n    }\n    respond(data, opts) {\n        return this.msg.respond(data, opts);\n    }\n    respondError(code, description, data, opts) {\n        var _a, _b;\n        opts = opts || {};\n        opts.headers = opts.headers || (0, headers_1.headers)();\n        (_a = opts.headers) === null || _a === void 0 ? void 0 : _a.set(core_1.ServiceErrorCodeHeader, `${code}`);\n        (_b = opts.headers) === null || _b === void 0 ? void 0 : _b.set(core_1.ServiceErrorHeader, description);\n        return this.msg.respond(data, opts);\n    }\n    json(reviver) {\n        return this.msg.json(reviver);\n    }\n    string() {\n        return this.msg.string();\n    }\n}\nexports.ServiceMsgImpl = ServiceMsgImpl;\nclass ServiceGroupImpl {\n    constructor(parent, name = \"\", queue = \"\") {\n        if (name !== \"\") {\n            validInternalToken(\"service group\", name);\n        }\n        let root = \"\";\n        if (parent instanceof ServiceImpl) {\n            this.srv = parent;\n            root = \"\";\n        }\n        else if (parent instanceof ServiceGroupImpl) {\n            const sg = parent;\n            this.srv = sg.srv;\n            if (queue === \"\" && sg.queue !== \"\") {\n                queue = sg.queue;\n            }\n            root = sg.subject;\n        }\n        else {\n            throw new Error(\"unknown ServiceGroup type\");\n        }\n        this.subject = this.calcSubject(root, name);\n        this.queue = queue;\n    }\n    calcSubject(root, name = \"\") {\n        if (name === \"\") {\n            return root;\n        }\n        return root !== \"\" ? `${root}.${name}` : name;\n    }\n    addEndpoint(name = \"\", opts) {\n        opts = opts || { subject: name };\n        const args = typeof opts === \"function\"\n            ? { handler: opts, subject: name }\n            : opts;\n        (0, jsutil_1.validateName)(\"endpoint\", name);\n        let { subject, handler, metadata, queue } = args;\n        subject = subject || name;\n        queue = queue || this.queue;\n        validSubjectName(\"endpoint subject\", subject);\n        subject = this.calcSubject(this.subject, subject);\n        const ne = { name, subject, queue, handler, metadata };\n        return this.srv._addEndpoint(ne);\n    }\n    addGroup(name = \"\", queue = \"\") {\n        return new ServiceGroupImpl(this, name, queue);\n    }\n}\nexports.ServiceGroupImpl = ServiceGroupImpl;\nfunction validSubjectName(context, subj) {\n    if (subj === \"\") {\n        throw new Error(`${context} cannot be empty`);\n    }\n    if (subj.indexOf(\" \") !== -1) {\n        throw new Error(`${context} cannot contain spaces: '${subj}'`);\n    }\n    const tokens = subj.split(\".\");\n    tokens.forEach((v, idx) => {\n        if (v === \">\" && idx !== tokens.length - 1) {\n            throw new Error(`${context} cannot have internal '>': '${subj}'`);\n        }\n    });\n}\nfunction validInternalToken(context, subj) {\n    if (subj.indexOf(\" \") !== -1) {\n        throw new Error(`${context} cannot contain spaces: '${subj}'`);\n    }\n    const tokens = subj.split(\".\");\n    tokens.forEach((v) => {\n        if (v === \">\") {\n            throw new Error(`${context} name cannot contain internal '>': '${subj}'`);\n        }\n    });\n}\nclass ServiceImpl {\n    /**\n     * @param verb\n     * @param name\n     * @param id\n     * @param prefix - this is only supplied by tooling when building control subject that crosses an account\n     */\n    static controlSubject(verb, name = \"\", id = \"\", prefix) {\n        // the prefix is used as is, because it is an\n        // account boundary permission\n        const pre = prefix !== null && prefix !== void 0 ? prefix : exports.ServiceApiPrefix;\n        if (name === \"\" && id === \"\") {\n            return `${pre}.${verb}`;\n        }\n        (0, jsutil_1.validateName)(\"control subject name\", name);\n        if (id !== \"\") {\n            (0, jsutil_1.validateName)(\"control subject id\", id);\n            return `${pre}.${verb}.${name}.${id}`;\n        }\n        return `${pre}.${verb}.${name}`;\n    }\n    constructor(nc, config = { name: \"\", version: \"\" }) {\n        this.nc = nc;\n        this.config = Object.assign({}, config);\n        if (!this.config.queue) {\n            this.config.queue = \"q\";\n        }\n        // this will throw if no name\n        (0, jsutil_1.validateName)(\"name\", this.config.name);\n        (0, jsutil_1.validateName)(\"queue\", this.config.queue);\n        // this will throw if not semver\n        (0, semver_1.parseSemVer)(this.config.version);\n        this._id = nuid_1.nuid.next();\n        this.internal = [];\n        this._done = (0, util_1.deferred)();\n        this._stopped = false;\n        this.handlers = [];\n        this.started = new Date().toISOString();\n        // initialize the stats\n        this.reset();\n        // close if the connection closes\n        this.nc.closed()\n            .then(() => {\n            this.close().catch();\n        })\n            .catch((err) => {\n            this.close(err).catch();\n        });\n    }\n    get subjects() {\n        return this.handlers.filter((s) => {\n            return s.internal === false;\n        }).map((s) => {\n            return s.subject;\n        });\n    }\n    get id() {\n        return this._id;\n    }\n    get name() {\n        return this.config.name;\n    }\n    get description() {\n        var _a;\n        return (_a = this.config.description) !== null && _a !== void 0 ? _a : \"\";\n    }\n    get version() {\n        return this.config.version;\n    }\n    get metadata() {\n        return this.config.metadata;\n    }\n    errorToHeader(err) {\n        const h = (0, headers_1.headers)();\n        if (err instanceof core_1.ServiceError) {\n            const se = err;\n            h.set(core_1.ServiceErrorHeader, se.message);\n            h.set(core_1.ServiceErrorCodeHeader, `${se.code}`);\n        }\n        else {\n            h.set(core_1.ServiceErrorHeader, err.message);\n            h.set(core_1.ServiceErrorCodeHeader, \"500\");\n        }\n        return h;\n    }\n    setupHandler(h, internal = false) {\n        // internals don't use a queue\n        const queue = internal ? \"\" : (h.queue ? h.queue : this.config.queue);\n        const { name, subject, handler } = h;\n        const sv = h;\n        sv.internal = internal;\n        if (internal) {\n            this.internal.push(sv);\n        }\n        sv.stats = new NamedEndpointStatsImpl(name, subject, queue);\n        sv.queue = queue;\n        const callback = handler\n            ? (err, msg) => {\n                if (err) {\n                    this.close(err);\n                    return;\n                }\n                const start = Date.now();\n                try {\n                    handler(err, new ServiceMsgImpl(msg));\n                }\n                catch (err) {\n                    sv.stats.countError(err);\n                    msg === null || msg === void 0 ? void 0 : msg.respond(encoders_1.Empty, { headers: this.errorToHeader(err) });\n                }\n                finally {\n                    sv.stats.countLatency(start);\n                }\n            }\n            : undefined;\n        sv.sub = this.nc.subscribe(subject, {\n            callback,\n            queue,\n        });\n        sv.sub.closed\n            .then(() => {\n            if (!this._stopped) {\n                this.close(new Error(`required subscription ${h.subject} stopped`))\n                    .catch();\n            }\n        })\n            .catch((err) => {\n            if (!this._stopped) {\n                const ne = new Error(`required subscription ${h.subject} errored: ${err.message}`);\n                ne.stack = err.stack;\n                this.close(ne).catch();\n            }\n        });\n        return sv;\n    }\n    info() {\n        return {\n            type: core_1.ServiceResponseType.INFO,\n            name: this.name,\n            id: this.id,\n            version: this.version,\n            description: this.description,\n            metadata: this.metadata,\n            endpoints: this.endpoints(),\n        };\n    }\n    endpoints() {\n        return this.handlers.map((v) => {\n            const { subject, metadata, name, queue } = v;\n            return { subject, metadata, name, queue_group: queue };\n        });\n    }\n    stats() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const endpoints = [];\n            for (const h of this.handlers) {\n                if (typeof this.config.statsHandler === \"function\") {\n                    try {\n                        h.stats.data = yield this.config.statsHandler(h);\n                    }\n                    catch (err) {\n                        h.stats.countError(err);\n                    }\n                }\n                endpoints.push(h.stats.stats(h.qi));\n            }\n            return {\n                type: core_1.ServiceResponseType.STATS,\n                name: this.name,\n                id: this.id,\n                version: this.version,\n                started: this.started,\n                metadata: this.metadata,\n                endpoints,\n            };\n        });\n    }\n    addInternalHandler(verb, handler) {\n        const v = `${verb}`.toUpperCase();\n        this._doAddInternalHandler(`${v}-all`, verb, handler);\n        this._doAddInternalHandler(`${v}-kind`, verb, handler, this.name);\n        this._doAddInternalHandler(`${v}`, verb, handler, this.name, this.id);\n    }\n    _doAddInternalHandler(name, verb, handler, kind = \"\", id = \"\") {\n        const endpoint = {};\n        endpoint.name = name;\n        endpoint.subject = ServiceImpl.controlSubject(verb, kind, id);\n        endpoint.handler = handler;\n        this.setupHandler(endpoint, true);\n    }\n    start() {\n        const jc = (0, codec_1.JSONCodec)();\n        const statsHandler = (err, msg) => {\n            if (err) {\n                this.close(err);\n                return Promise.reject(err);\n            }\n            return this.stats().then((s) => {\n                msg === null || msg === void 0 ? void 0 : msg.respond(jc.encode(s));\n                return Promise.resolve();\n            });\n        };\n        const infoHandler = (err, msg) => {\n            if (err) {\n                this.close(err);\n                return Promise.reject(err);\n            }\n            msg === null || msg === void 0 ? void 0 : msg.respond(jc.encode(this.info()));\n            return Promise.resolve();\n        };\n        const ping = jc.encode(this.ping());\n        const pingHandler = (err, msg) => {\n            if (err) {\n                this.close(err).then().catch();\n                return Promise.reject(err);\n            }\n            msg.respond(ping);\n            return Promise.resolve();\n        };\n        this.addInternalHandler(core_1.ServiceVerb.PING, pingHandler);\n        this.addInternalHandler(core_1.ServiceVerb.STATS, statsHandler);\n        this.addInternalHandler(core_1.ServiceVerb.INFO, infoHandler);\n        // now the actual service\n        this.handlers.forEach((h) => {\n            const { subject } = h;\n            if (typeof subject !== \"string\") {\n                return;\n            }\n            // this is expected in cases where main subject is just\n            // a root subject for multiple endpoints - user can disable\n            // listening to the root endpoint, by specifying null\n            if (h.handler === null) {\n                return;\n            }\n            this.setupHandler(h);\n        });\n        return Promise.resolve(this);\n    }\n    close(err) {\n        if (this._stopped) {\n            return this._done;\n        }\n        this._stopped = true;\n        let buf = [];\n        if (!this.nc.isClosed()) {\n            buf = this.handlers.concat(this.internal).map((h) => {\n                return h.sub.drain();\n            });\n        }\n        Promise.allSettled(buf)\n            .then(() => {\n            this._done.resolve(err ? err : null);\n        });\n        return this._done;\n    }\n    get stopped() {\n        return this._done;\n    }\n    get isStopped() {\n        return this._stopped;\n    }\n    stop(err) {\n        return this.close(err);\n    }\n    ping() {\n        return {\n            type: core_1.ServiceResponseType.PING,\n            name: this.name,\n            id: this.id,\n            version: this.version,\n            metadata: this.metadata,\n        };\n    }\n    reset() {\n        // pretend we restarted\n        this.started = new Date().toISOString();\n        if (this.handlers) {\n            for (const h of this.handlers) {\n                h.stats.reset(h.qi);\n            }\n        }\n    }\n    addGroup(name, queue) {\n        return new ServiceGroupImpl(this, name, queue);\n    }\n    addEndpoint(name, handler) {\n        const sg = new ServiceGroupImpl(this);\n        return sg.addEndpoint(name, handler);\n    }\n    _addEndpoint(e) {\n        const qi = new queued_iterator_1.QueuedIteratorImpl();\n        qi.noIterator = typeof e.handler === \"function\";\n        if (!qi.noIterator) {\n            e.handler = (err, msg) => {\n                err ? this.stop(err).catch() : qi.push(new ServiceMsgImpl(msg));\n            };\n            // close the service if the iterator closes\n            qi.iterClosed.then(() => {\n                this.close().catch();\n            });\n        }\n        // track the iterator for stats\n        const ss = this.setupHandler(e, false);\n        ss.qi = qi;\n        this.handlers.push(ss);\n        return qi;\n    }\n}\nexports.ServiceImpl = ServiceImpl;\nclass NamedEndpointStatsImpl {\n    constructor(name, subject, queue = \"\") {\n        this.name = name;\n        this.subject = subject;\n        this.average_processing_time = 0;\n        this.num_errors = 0;\n        this.num_requests = 0;\n        this.processing_time = 0;\n        this.queue = queue;\n    }\n    reset(qi) {\n        this.num_requests = 0;\n        this.processing_time = 0;\n        this.average_processing_time = 0;\n        this.num_errors = 0;\n        this.last_error = undefined;\n        this.data = undefined;\n        const qii = qi;\n        if (qii) {\n            qii.time = 0;\n            qii.processed = 0;\n        }\n    }\n    countLatency(start) {\n        this.num_requests++;\n        this.processing_time += (0, jsutil_1.nanos)(Date.now() - start);\n        this.average_processing_time = Math.round(this.processing_time / this.num_requests);\n    }\n    countError(err) {\n        this.num_errors++;\n        this.last_error = err.message;\n    }\n    _stats() {\n        const { name, subject, average_processing_time, num_errors, num_requests, processing_time, last_error, data, queue, } = this;\n        return {\n            name,\n            subject,\n            average_processing_time,\n            num_errors,\n            num_requests,\n            processing_time,\n            last_error,\n            data,\n            queue_group: queue,\n        };\n    }\n    stats(qi) {\n        const qii = qi;\n        if ((qii === null || qii === void 0 ? void 0 : qii.noIterator) === false) {\n            // grab stats in the iterator\n            this.processing_time = qii.time;\n            this.num_requests = qii.processed;\n            this.average_processing_time =\n                this.processing_time > 0 && this.num_requests > 0\n                    ? this.processing_time / this.num_requests\n                    : 0;\n        }\n        return this._stats();\n    }\n}\n//# sourceMappingURL=service.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/service.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/serviceclient.js":
/*!*****************************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/serviceclient.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServiceClientImpl = void 0;\n/*\n * Copyright 2022-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst encoders_1 = __webpack_require__(/*! ./encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nconst codec_1 = __webpack_require__(/*! ./codec */ \"(rsc)/./node_modules/nats/lib/nats-base-client/codec.js\");\nconst queued_iterator_1 = __webpack_require__(/*! ./queued_iterator */ \"(rsc)/./node_modules/nats/lib/nats-base-client/queued_iterator.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nconst service_1 = __webpack_require__(/*! ./service */ \"(rsc)/./node_modules/nats/lib/nats-base-client/service.js\");\nconst core_2 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nclass ServiceClientImpl {\n    constructor(nc, opts = {\n        strategy: core_2.RequestStrategy.JitterTimer,\n        maxWait: 2000,\n    }, prefix) {\n        this.nc = nc;\n        this.prefix = prefix;\n        this.opts = opts;\n    }\n    ping(name = \"\", id = \"\") {\n        return this.q(core_1.ServiceVerb.PING, name, id);\n    }\n    stats(name = \"\", id = \"\") {\n        return this.q(core_1.ServiceVerb.STATS, name, id);\n    }\n    info(name = \"\", id = \"\") {\n        return this.q(core_1.ServiceVerb.INFO, name, id);\n    }\n    q(v, name = \"\", id = \"\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            const iter = new queued_iterator_1.QueuedIteratorImpl();\n            const jc = (0, codec_1.JSONCodec)();\n            const subj = service_1.ServiceImpl.controlSubject(v, name, id, this.prefix);\n            const responses = yield this.nc.requestMany(subj, encoders_1.Empty, this.opts);\n            (() => __awaiter(this, void 0, void 0, function* () {\n                var _a, e_1, _b, _c;\n                try {\n                    for (var _d = true, responses_1 = __asyncValues(responses), responses_1_1; responses_1_1 = yield responses_1.next(), _a = responses_1_1.done, !_a; _d = true) {\n                        _c = responses_1_1.value;\n                        _d = false;\n                        const m = _c;\n                        try {\n                            const s = jc.decode(m.data);\n                            iter.push(s);\n                        }\n                        catch (err) {\n                            // @ts-ignore: pushing fn\n                            iter.push(() => {\n                                iter.stop(err);\n                            });\n                        }\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (!_d && !_a && (_b = responses_1.return)) yield _b.call(responses_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n                //@ts-ignore: push a fn\n                iter.push(() => {\n                    iter.stop();\n                });\n            }))().catch((err) => {\n                iter.stop(err);\n            });\n            return iter;\n        });\n    }\n}\nexports.ServiceClientImpl = ServiceClientImpl;\n//# sourceMappingURL=serviceclient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/serviceclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/sha256.js":
/*!**********************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/sha256.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// deno-fmt-ignore-file\n// deno-lint-ignore-file\n// This code was bundled using `deno bundle` and it's not recommended to edit it manually\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sha256 = exports.SHA256 = exports.BYTES = void 0;\n// deno bundle https://deno.land/x/sha256@v1.0.2/mod.ts\n// The MIT License (MIT)\n//\n// Original work (c) Marco Paland (marco@paland.com) 2015-2018, PALANDesign Hannover, Germany\n//\n// Deno port Copyright (c) 2019 Noah Anabiik Schwarz\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nfunction getLengths(b64) {\n    const len = b64.length;\n    let validLen = b64.indexOf(\"=\");\n    if (validLen === -1) {\n        validLen = len;\n    }\n    const placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n    return [\n        validLen,\n        placeHoldersLen\n    ];\n}\nfunction init(lookup, revLookup, urlsafe = false) {\n    function _byteLength(validLen, placeHoldersLen) {\n        return Math.floor((validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen);\n    }\n    function tripletToBase64(num) {\n        return lookup[num >> 18 & 0x3f] + lookup[num >> 12 & 0x3f] + lookup[num >> 6 & 0x3f] + lookup[num & 0x3f];\n    }\n    function encodeChunk(buf, start, end) {\n        const out = new Array((end - start) / 3);\n        for (let i = start, curTriplet = 0; i < end; i += 3) {\n            out[curTriplet++] = tripletToBase64((buf[i] << 16) + (buf[i + 1] << 8) + buf[i + 2]);\n        }\n        return out.join(\"\");\n    }\n    return {\n        byteLength(b64) {\n            return _byteLength.apply(null, getLengths(b64));\n        },\n        toUint8Array(b64) {\n            const [validLen, placeHoldersLen] = getLengths(b64);\n            const buf = new Uint8Array(_byteLength(validLen, placeHoldersLen));\n            const len = placeHoldersLen ? validLen - 4 : validLen;\n            let tmp;\n            let curByte = 0;\n            let i;\n            for (i = 0; i < len; i += 4) {\n                tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n                buf[curByte++] = tmp >> 16 & 0xff;\n                buf[curByte++] = tmp >> 8 & 0xff;\n                buf[curByte++] = tmp & 0xff;\n            }\n            if (placeHoldersLen === 2) {\n                tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n                buf[curByte++] = tmp & 0xff;\n            }\n            else if (placeHoldersLen === 1) {\n                tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n                buf[curByte++] = tmp >> 8 & 0xff;\n                buf[curByte++] = tmp & 0xff;\n            }\n            return buf;\n        },\n        fromUint8Array(buf) {\n            const maxChunkLength = 16383;\n            const len = buf.length;\n            const extraBytes = len % 3;\n            const len2 = len - extraBytes;\n            const parts = new Array(Math.ceil(len2 / 16383) + (extraBytes ? 1 : 0));\n            let curChunk = 0;\n            let chunkEnd;\n            for (let i = 0; i < len2; i += maxChunkLength) {\n                chunkEnd = i + maxChunkLength;\n                parts[curChunk++] = encodeChunk(buf, i, chunkEnd > len2 ? len2 : chunkEnd);\n            }\n            let tmp;\n            if (extraBytes === 1) {\n                tmp = buf[len2];\n                parts[curChunk] = lookup[tmp >> 2] + lookup[tmp << 4 & 0x3f];\n                if (!urlsafe)\n                    parts[curChunk] += \"==\";\n            }\n            else if (extraBytes === 2) {\n                tmp = buf[len2] << 8 | buf[len2 + 1] & 0xff;\n                parts[curChunk] = lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3f] + lookup[tmp << 2 & 0x3f];\n                if (!urlsafe)\n                    parts[curChunk] += \"=\";\n            }\n            return parts.join(\"\");\n        }\n    };\n}\nconst lookup = [];\nconst revLookup = [];\nconst code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\nfor (let i = 0, l = code.length; i < l; ++i) {\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n}\nconst { byteLength, toUint8Array, fromUint8Array } = init(lookup, revLookup, true);\nconst decoder = new TextDecoder();\nconst encoder = new TextEncoder();\nfunction toHexString(buf) {\n    return buf.reduce((hex, __byte) => `${hex}${__byte < 16 ? \"0\" : \"\"}${__byte.toString(16)}`, \"\");\n}\nfunction fromHexString(hex) {\n    const len = hex.length;\n    if (len % 2 || !/^[0-9a-fA-F]+$/.test(hex)) {\n        throw new TypeError(\"Invalid hex string.\");\n    }\n    hex = hex.toLowerCase();\n    const buf = new Uint8Array(Math.floor(len / 2));\n    const end = len / 2;\n    for (let i = 0; i < end; ++i) {\n        buf[i] = parseInt(hex.substr(i * 2, 2), 16);\n    }\n    return buf;\n}\nfunction decode(buf, encoding = \"utf8\") {\n    if (/^utf-?8$/i.test(encoding)) {\n        return decoder.decode(buf);\n    }\n    else if (/^base64$/i.test(encoding)) {\n        return fromUint8Array(buf);\n    }\n    else if (/^hex(?:adecimal)?$/i.test(encoding)) {\n        return toHexString(buf);\n    }\n    else {\n        throw new TypeError(\"Unsupported string encoding.\");\n    }\n}\nfunction encode(str, encoding = \"utf8\") {\n    if (/^utf-?8$/i.test(encoding)) {\n        return encoder.encode(str);\n    }\n    else if (/^base64$/i.test(encoding)) {\n        return toUint8Array(str);\n    }\n    else if (/^hex(?:adecimal)?$/i.test(encoding)) {\n        return fromHexString(str);\n    }\n    else {\n        throw new TypeError(\"Unsupported string encoding.\");\n    }\n}\nconst BYTES = 32;\nexports.BYTES = BYTES;\nclass SHA256 {\n    constructor() {\n        this.hashSize = 32;\n        this._buf = new Uint8Array(64);\n        this._K = new Uint32Array([\n            0x428a2f98,\n            0x71374491,\n            0xb5c0fbcf,\n            0xe9b5dba5,\n            0x3956c25b,\n            0x59f111f1,\n            0x923f82a4,\n            0xab1c5ed5,\n            0xd807aa98,\n            0x12835b01,\n            0x243185be,\n            0x550c7dc3,\n            0x72be5d74,\n            0x80deb1fe,\n            0x9bdc06a7,\n            0xc19bf174,\n            0xe49b69c1,\n            0xefbe4786,\n            0x0fc19dc6,\n            0x240ca1cc,\n            0x2de92c6f,\n            0x4a7484aa,\n            0x5cb0a9dc,\n            0x76f988da,\n            0x983e5152,\n            0xa831c66d,\n            0xb00327c8,\n            0xbf597fc7,\n            0xc6e00bf3,\n            0xd5a79147,\n            0x06ca6351,\n            0x14292967,\n            0x27b70a85,\n            0x2e1b2138,\n            0x4d2c6dfc,\n            0x53380d13,\n            0x650a7354,\n            0x766a0abb,\n            0x81c2c92e,\n            0x92722c85,\n            0xa2bfe8a1,\n            0xa81a664b,\n            0xc24b8b70,\n            0xc76c51a3,\n            0xd192e819,\n            0xd6990624,\n            0xf40e3585,\n            0x106aa070,\n            0x19a4c116,\n            0x1e376c08,\n            0x2748774c,\n            0x34b0bcb5,\n            0x391c0cb3,\n            0x4ed8aa4a,\n            0x5b9cca4f,\n            0x682e6ff3,\n            0x748f82ee,\n            0x78a5636f,\n            0x84c87814,\n            0x8cc70208,\n            0x90befffa,\n            0xa4506ceb,\n            0xbef9a3f7,\n            0xc67178f2\n        ]);\n        this.init();\n    }\n    init() {\n        this._H = new Uint32Array([\n            0x6a09e667,\n            0xbb67ae85,\n            0x3c6ef372,\n            0xa54ff53a,\n            0x510e527f,\n            0x9b05688c,\n            0x1f83d9ab,\n            0x5be0cd19\n        ]);\n        this._bufIdx = 0;\n        this._count = new Uint32Array(2);\n        this._buf.fill(0);\n        this._finalized = false;\n        return this;\n    }\n    update(msg, inputEncoding) {\n        if (msg === null) {\n            throw new TypeError(\"msg must be a string or Uint8Array.\");\n        }\n        else if (typeof msg === \"string\") {\n            msg = encode(msg, inputEncoding);\n        }\n        for (let i = 0, len = msg.length; i < len; i++) {\n            this._buf[this._bufIdx++] = msg[i];\n            if (this._bufIdx === 64) {\n                this._transform();\n                this._bufIdx = 0;\n            }\n        }\n        const c = this._count;\n        if ((c[0] += msg.length << 3) < msg.length << 3) {\n            c[1]++;\n        }\n        c[1] += msg.length >>> 29;\n        return this;\n    }\n    digest(outputEncoding) {\n        if (this._finalized) {\n            throw new Error(\"digest has already been called.\");\n        }\n        this._finalized = true;\n        const b = this._buf;\n        let idx = this._bufIdx;\n        b[idx++] = 0x80;\n        while (idx !== 56) {\n            if (idx === 64) {\n                this._transform();\n                idx = 0;\n            }\n            b[idx++] = 0;\n        }\n        const c = this._count;\n        b[56] = c[1] >>> 24 & 0xff;\n        b[57] = c[1] >>> 16 & 0xff;\n        b[58] = c[1] >>> 8 & 0xff;\n        b[59] = c[1] >>> 0 & 0xff;\n        b[60] = c[0] >>> 24 & 0xff;\n        b[61] = c[0] >>> 16 & 0xff;\n        b[62] = c[0] >>> 8 & 0xff;\n        b[63] = c[0] >>> 0 & 0xff;\n        this._transform();\n        const hash = new Uint8Array(32);\n        for (let i = 0; i < 8; i++) {\n            hash[(i << 2) + 0] = this._H[i] >>> 24 & 0xff;\n            hash[(i << 2) + 1] = this._H[i] >>> 16 & 0xff;\n            hash[(i << 2) + 2] = this._H[i] >>> 8 & 0xff;\n            hash[(i << 2) + 3] = this._H[i] >>> 0 & 0xff;\n        }\n        this.init();\n        return outputEncoding ? decode(hash, outputEncoding) : hash;\n    }\n    _transform() {\n        const h = this._H;\n        let h0 = h[0];\n        let h1 = h[1];\n        let h2 = h[2];\n        let h3 = h[3];\n        let h4 = h[4];\n        let h5 = h[5];\n        let h6 = h[6];\n        let h7 = h[7];\n        const w = new Uint32Array(16);\n        let i;\n        for (i = 0; i < 16; i++) {\n            w[i] = this._buf[(i << 2) + 3] | this._buf[(i << 2) + 2] << 8 | this._buf[(i << 2) + 1] << 16 | this._buf[i << 2] << 24;\n        }\n        for (i = 0; i < 64; i++) {\n            let tmp;\n            if (i < 16) {\n                tmp = w[i];\n            }\n            else {\n                let a = w[i + 1 & 15];\n                let b = w[i + 14 & 15];\n                tmp = w[i & 15] = (a >>> 7 ^ a >>> 18 ^ a >>> 3 ^ a << 25 ^ a << 14) + (b >>> 17 ^ b >>> 19 ^ b >>> 10 ^ b << 15 ^ b << 13) + w[i & 15] + w[i + 9 & 15] | 0;\n            }\n            tmp = tmp + h7 + (h4 >>> 6 ^ h4 >>> 11 ^ h4 >>> 25 ^ h4 << 26 ^ h4 << 21 ^ h4 << 7) + (h6 ^ h4 & (h5 ^ h6)) + this._K[i] | 0;\n            h7 = h6;\n            h6 = h5;\n            h5 = h4;\n            h4 = h3 + tmp;\n            h3 = h2;\n            h2 = h1;\n            h1 = h0;\n            h0 = tmp + (h1 & h2 ^ h3 & (h1 ^ h2)) + (h1 >>> 2 ^ h1 >>> 13 ^ h1 >>> 22 ^ h1 << 30 ^ h1 << 19 ^ h1 << 10) | 0;\n        }\n        h[0] = h[0] + h0 | 0;\n        h[1] = h[1] + h1 | 0;\n        h[2] = h[2] + h2 | 0;\n        h[3] = h[3] + h3 | 0;\n        h[4] = h[4] + h4 | 0;\n        h[5] = h[5] + h5 | 0;\n        h[6] = h[6] + h6 | 0;\n        h[7] = h[7] + h7 | 0;\n    }\n}\nexports.SHA256 = SHA256;\nfunction sha256(msg, inputEncoding, outputEncoding) {\n    return new SHA256().update(msg, inputEncoding).digest(outputEncoding);\n}\nexports.sha256 = sha256;\n//# sourceMappingURL=sha256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/sha256.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/transport.js":
/*!*************************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/transport.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.extractProtocolMessage = exports.protoLen = exports.LF = exports.CR = exports.CRLF = exports.CR_LF_LEN = exports.CR_LF = exports.getResolveFn = exports.newTransport = exports.getUrlParseFn = exports.defaultPort = exports.setTransportFactory = void 0;\n/*\n * Copyright 2020-2021 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst encoders_1 = __webpack_require__(/*! ./encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nconst databuffer_1 = __webpack_require__(/*! ./databuffer */ \"(rsc)/./node_modules/nats/lib/nats-base-client/databuffer.js\");\nlet transportConfig;\nfunction setTransportFactory(config) {\n    transportConfig = config;\n}\nexports.setTransportFactory = setTransportFactory;\nfunction defaultPort() {\n    return transportConfig !== undefined &&\n        transportConfig.defaultPort !== undefined\n        ? transportConfig.defaultPort\n        : core_1.DEFAULT_PORT;\n}\nexports.defaultPort = defaultPort;\nfunction getUrlParseFn() {\n    return transportConfig !== undefined && transportConfig.urlParseFn\n        ? transportConfig.urlParseFn\n        : undefined;\n}\nexports.getUrlParseFn = getUrlParseFn;\nfunction newTransport() {\n    if (!transportConfig || typeof transportConfig.factory !== \"function\") {\n        throw new Error(\"transport fn is not set\");\n    }\n    return transportConfig.factory();\n}\nexports.newTransport = newTransport;\nfunction getResolveFn() {\n    return transportConfig !== undefined && transportConfig.dnsResolveFn\n        ? transportConfig.dnsResolveFn\n        : undefined;\n}\nexports.getResolveFn = getResolveFn;\nexports.CR_LF = \"\\r\\n\";\nexports.CR_LF_LEN = exports.CR_LF.length;\nexports.CRLF = databuffer_1.DataBuffer.fromAscii(exports.CR_LF);\nexports.CR = new Uint8Array(exports.CRLF)[0]; // 13\nexports.LF = new Uint8Array(exports.CRLF)[1]; // 10\nfunction protoLen(ba) {\n    for (let i = 0; i < ba.length; i++) {\n        const n = i + 1;\n        if (ba.byteLength > n && ba[i] === exports.CR && ba[n] === exports.LF) {\n            return n + 1;\n        }\n    }\n    return 0;\n}\nexports.protoLen = protoLen;\nfunction extractProtocolMessage(a) {\n    // protocol messages are ascii, so Uint8Array\n    const len = protoLen(a);\n    if (len > 0) {\n        const ba = new Uint8Array(a);\n        const out = ba.slice(0, len);\n        return encoders_1.TD.decode(out);\n    }\n    return \"\";\n}\nexports.extractProtocolMessage = extractProtocolMessage;\n//# sourceMappingURL=transport.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC90cmFuc3BvcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCLEdBQUcsZ0JBQWdCLEdBQUcsVUFBVSxHQUFHLFVBQVUsR0FBRyxZQUFZLEdBQUcsaUJBQWlCLEdBQUcsYUFBYSxHQUFHLG9CQUFvQixHQUFHLG9CQUFvQixHQUFHLHFCQUFxQixHQUFHLG1CQUFtQixHQUFHLDJCQUEyQjtBQUN4UDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMsOEVBQVk7QUFDdkMsZUFBZSxtQkFBTyxDQUFDLHNFQUFRO0FBQy9CLHFCQUFxQixtQkFBTyxDQUFDLGtGQUFjO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCLGFBQWE7QUFDYixpQkFBaUI7QUFDakIsWUFBWTtBQUNaLFVBQVUsb0NBQW9DO0FBQzlDLFVBQVUsb0NBQW9DO0FBQzlDO0FBQ0Esb0JBQW9CLGVBQWU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9uYXRzL2xpYi9uYXRzLWJhc2UtY2xpZW50L3RyYW5zcG9ydC5qcz84OTdmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5leHRyYWN0UHJvdG9jb2xNZXNzYWdlID0gZXhwb3J0cy5wcm90b0xlbiA9IGV4cG9ydHMuTEYgPSBleHBvcnRzLkNSID0gZXhwb3J0cy5DUkxGID0gZXhwb3J0cy5DUl9MRl9MRU4gPSBleHBvcnRzLkNSX0xGID0gZXhwb3J0cy5nZXRSZXNvbHZlRm4gPSBleHBvcnRzLm5ld1RyYW5zcG9ydCA9IGV4cG9ydHMuZ2V0VXJsUGFyc2VGbiA9IGV4cG9ydHMuZGVmYXVsdFBvcnQgPSBleHBvcnRzLnNldFRyYW5zcG9ydEZhY3RvcnkgPSB2b2lkIDA7XG4vKlxuICogQ29weXJpZ2h0IDIwMjAtMjAyMSBUaGUgTkFUUyBBdXRob3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY29uc3QgZW5jb2RlcnNfMSA9IHJlcXVpcmUoXCIuL2VuY29kZXJzXCIpO1xuY29uc3QgY29yZV8xID0gcmVxdWlyZShcIi4vY29yZVwiKTtcbmNvbnN0IGRhdGFidWZmZXJfMSA9IHJlcXVpcmUoXCIuL2RhdGFidWZmZXJcIik7XG5sZXQgdHJhbnNwb3J0Q29uZmlnO1xuZnVuY3Rpb24gc2V0VHJhbnNwb3J0RmFjdG9yeShjb25maWcpIHtcbiAgICB0cmFuc3BvcnRDb25maWcgPSBjb25maWc7XG59XG5leHBvcnRzLnNldFRyYW5zcG9ydEZhY3RvcnkgPSBzZXRUcmFuc3BvcnRGYWN0b3J5O1xuZnVuY3Rpb24gZGVmYXVsdFBvcnQoKSB7XG4gICAgcmV0dXJuIHRyYW5zcG9ydENvbmZpZyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIHRyYW5zcG9ydENvbmZpZy5kZWZhdWx0UG9ydCAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gdHJhbnNwb3J0Q29uZmlnLmRlZmF1bHRQb3J0XG4gICAgICAgIDogY29yZV8xLkRFRkFVTFRfUE9SVDtcbn1cbmV4cG9ydHMuZGVmYXVsdFBvcnQgPSBkZWZhdWx0UG9ydDtcbmZ1bmN0aW9uIGdldFVybFBhcnNlRm4oKSB7XG4gICAgcmV0dXJuIHRyYW5zcG9ydENvbmZpZyAhPT0gdW5kZWZpbmVkICYmIHRyYW5zcG9ydENvbmZpZy51cmxQYXJzZUZuXG4gICAgICAgID8gdHJhbnNwb3J0Q29uZmlnLnVybFBhcnNlRm5cbiAgICAgICAgOiB1bmRlZmluZWQ7XG59XG5leHBvcnRzLmdldFVybFBhcnNlRm4gPSBnZXRVcmxQYXJzZUZuO1xuZnVuY3Rpb24gbmV3VHJhbnNwb3J0KCkge1xuICAgIGlmICghdHJhbnNwb3J0Q29uZmlnIHx8IHR5cGVvZiB0cmFuc3BvcnRDb25maWcuZmFjdG9yeSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyYW5zcG9ydCBmbiBpcyBub3Qgc2V0XCIpO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNwb3J0Q29uZmlnLmZhY3RvcnkoKTtcbn1cbmV4cG9ydHMubmV3VHJhbnNwb3J0ID0gbmV3VHJhbnNwb3J0O1xuZnVuY3Rpb24gZ2V0UmVzb2x2ZUZuKCkge1xuICAgIHJldHVybiB0cmFuc3BvcnRDb25maWcgIT09IHVuZGVmaW5lZCAmJiB0cmFuc3BvcnRDb25maWcuZG5zUmVzb2x2ZUZuXG4gICAgICAgID8gdHJhbnNwb3J0Q29uZmlnLmRuc1Jlc29sdmVGblxuICAgICAgICA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydHMuZ2V0UmVzb2x2ZUZuID0gZ2V0UmVzb2x2ZUZuO1xuZXhwb3J0cy5DUl9MRiA9IFwiXFxyXFxuXCI7XG5leHBvcnRzLkNSX0xGX0xFTiA9IGV4cG9ydHMuQ1JfTEYubGVuZ3RoO1xuZXhwb3J0cy5DUkxGID0gZGF0YWJ1ZmZlcl8xLkRhdGFCdWZmZXIuZnJvbUFzY2lpKGV4cG9ydHMuQ1JfTEYpO1xuZXhwb3J0cy5DUiA9IG5ldyBVaW50OEFycmF5KGV4cG9ydHMuQ1JMRilbMF07IC8vIDEzXG5leHBvcnRzLkxGID0gbmV3IFVpbnQ4QXJyYXkoZXhwb3J0cy5DUkxGKVsxXTsgLy8gMTBcbmZ1bmN0aW9uIHByb3RvTGVuKGJhKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBuID0gaSArIDE7XG4gICAgICAgIGlmIChiYS5ieXRlTGVuZ3RoID4gbiAmJiBiYVtpXSA9PT0gZXhwb3J0cy5DUiAmJiBiYVtuXSA9PT0gZXhwb3J0cy5MRikge1xuICAgICAgICAgICAgcmV0dXJuIG4gKyAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuZXhwb3J0cy5wcm90b0xlbiA9IHByb3RvTGVuO1xuZnVuY3Rpb24gZXh0cmFjdFByb3RvY29sTWVzc2FnZShhKSB7XG4gICAgLy8gcHJvdG9jb2wgbWVzc2FnZXMgYXJlIGFzY2lpLCBzbyBVaW50OEFycmF5XG4gICAgY29uc3QgbGVuID0gcHJvdG9MZW4oYSk7XG4gICAgaWYgKGxlbiA+IDApIHtcbiAgICAgICAgY29uc3QgYmEgPSBuZXcgVWludDhBcnJheShhKTtcbiAgICAgICAgY29uc3Qgb3V0ID0gYmEuc2xpY2UoMCwgbGVuKTtcbiAgICAgICAgcmV0dXJuIGVuY29kZXJzXzEuVEQuZGVjb2RlKG91dCk7XG4gICAgfVxuICAgIHJldHVybiBcIlwiO1xufVxuZXhwb3J0cy5leHRyYWN0UHJvdG9jb2xNZXNzYWdlID0gZXh0cmFjdFByb3RvY29sTWVzc2FnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zcG9ydC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/transport.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/typedsub.js":
/*!************************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/typedsub.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright 2021 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TypedSubscription = exports.checkFn = void 0;\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/nats/lib/nats-base-client/util.js\");\nconst queued_iterator_1 = __webpack_require__(/*! ./queued_iterator */ \"(rsc)/./node_modules/nats/lib/nats-base-client/queued_iterator.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nfunction checkFn(fn, name, required = false) {\n    if (required === true && !fn) {\n        throw core_1.NatsError.errorForCode(core_1.ErrorCode.ApiError, new Error(`${name} is not a function`));\n    }\n    if (fn && typeof fn !== \"function\") {\n        throw core_1.NatsError.errorForCode(core_1.ErrorCode.ApiError, new Error(`${name} is not a function`));\n    }\n}\nexports.checkFn = checkFn;\n/**\n * TypedSubscription wraps a subscription to provide payload specific\n * subscription semantics. That is messages are a transport\n * for user data, and the data is presented as application specific\n * data to the client.\n */\nclass TypedSubscription extends queued_iterator_1.QueuedIteratorImpl {\n    constructor(nc, subject, opts) {\n        super();\n        checkFn(opts.adapter, \"adapter\", true);\n        this.adapter = opts.adapter;\n        if (opts.callback) {\n            checkFn(opts.callback, \"callback\");\n        }\n        this.noIterator = typeof opts.callback === \"function\";\n        if (opts.ingestionFilterFn) {\n            checkFn(opts.ingestionFilterFn, \"ingestionFilterFn\");\n            this.ingestionFilterFn = opts.ingestionFilterFn;\n        }\n        if (opts.protocolFilterFn) {\n            checkFn(opts.protocolFilterFn, \"protocolFilterFn\");\n            this.protocolFilterFn = opts.protocolFilterFn;\n        }\n        if (opts.dispatchedFn) {\n            checkFn(opts.dispatchedFn, \"dispatchedFn\");\n            this.dispatchedFn = opts.dispatchedFn;\n        }\n        if (opts.cleanupFn) {\n            checkFn(opts.cleanupFn, \"cleanupFn\");\n        }\n        let callback = (err, msg) => {\n            this.callback(err, msg);\n        };\n        if (opts.callback) {\n            const uh = opts.callback;\n            callback = (err, msg) => {\n                const [jer, tm] = this.adapter(err, msg);\n                if (jer) {\n                    uh(jer, null);\n                    return;\n                }\n                const { ingest } = this.ingestionFilterFn\n                    ? this.ingestionFilterFn(tm, this)\n                    : { ingest: true };\n                if (ingest) {\n                    const ok = this.protocolFilterFn ? this.protocolFilterFn(tm) : true;\n                    if (ok) {\n                        uh(jer, tm);\n                        if (this.dispatchedFn && tm) {\n                            this.dispatchedFn(tm);\n                        }\n                    }\n                }\n            };\n        }\n        const { max, queue, timeout } = opts;\n        const sopts = { queue, timeout, callback };\n        if (max && max > 0) {\n            sopts.max = max;\n        }\n        this.sub = nc.subscribe(subject, sopts);\n        if (opts.cleanupFn) {\n            this.sub.cleanupFn = opts.cleanupFn;\n        }\n        if (!this.noIterator) {\n            this.iterClosed.then(() => {\n                this.unsubscribe();\n            });\n        }\n        this.subIterDone = (0, util_1.deferred)();\n        Promise.all([this.sub.closed, this.iterClosed])\n            .then(() => {\n            this.subIterDone.resolve();\n        })\n            .catch(() => {\n            this.subIterDone.resolve();\n        });\n        ((s) => __awaiter(this, void 0, void 0, function* () {\n            yield s.closed;\n            this.stop();\n        }))(this.sub).then().catch();\n    }\n    unsubscribe(max) {\n        this.sub.unsubscribe(max);\n    }\n    drain() {\n        return this.sub.drain();\n    }\n    isDraining() {\n        return this.sub.isDraining();\n    }\n    isClosed() {\n        return this.sub.isClosed();\n    }\n    callback(e, msg) {\n        this.sub.cancelTimeout();\n        const [err, tm] = this.adapter(e, msg);\n        if (err) {\n            this.stop(err);\n        }\n        if (tm) {\n            this.push(tm);\n        }\n    }\n    getSubject() {\n        return this.sub.getSubject();\n    }\n    getReceived() {\n        return this.sub.getReceived();\n    }\n    getProcessed() {\n        return this.sub.getProcessed();\n    }\n    getPending() {\n        return this.sub.getPending();\n    }\n    getID() {\n        return this.sub.getID();\n    }\n    getMax() {\n        return this.sub.getMax();\n    }\n    get closed() {\n        return this.sub.closed;\n    }\n}\nexports.TypedSubscription = TypedSubscription;\n//# sourceMappingURL=typedsub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/typedsub.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/types.js":
/*!*********************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/types.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Empty = exports.NatsError = void 0;\nvar core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nObject.defineProperty(exports, \"NatsError\", ({ enumerable: true, get: function () { return core_1.NatsError; } }));\nvar encoders_1 = __webpack_require__(/*! ./encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nObject.defineProperty(exports, \"Empty\", ({ enumerable: true, get: function () { return encoders_1.Empty; } }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLEdBQUcsaUJBQWlCO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQyxzRUFBUTtBQUM3Qiw2Q0FBNEMsRUFBRSxxQ0FBcUMsNEJBQTRCLEVBQUM7QUFDaEgsaUJBQWlCLG1CQUFPLENBQUMsOEVBQVk7QUFDckMseUNBQXdDLEVBQUUscUNBQXFDLDRCQUE0QixFQUFDO0FBQzVHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvbmF0cy1iYXNlLWNsaWVudC90eXBlcy5qcz83NWM4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FbXB0eSA9IGV4cG9ydHMuTmF0c0Vycm9yID0gdm9pZCAwO1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCIuL2NvcmVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOYXRzRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmVfMS5OYXRzRXJyb3I7IH0gfSk7XG52YXIgZW5jb2RlcnNfMSA9IHJlcXVpcmUoXCIuL2VuY29kZXJzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRW1wdHlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZXJzXzEuRW1wdHk7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/nats-base-client/util.js":
/*!********************************************************!*\
  !*** ./node_modules/nats/lib/nats-base-client/util.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.backoff = exports.jitter = exports.SimpleMutex = exports.Perf = exports.collect = exports.shuffle = exports.debugDeferred = exports.deferred = exports.deadline = exports.delay = exports.timeout = exports.render = exports.extend = void 0;\n/*\n * Copyright 2018-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// deno-lint-ignore-file no-explicit-any\nconst encoders_1 = __webpack_require__(/*! ./encoders */ \"(rsc)/./node_modules/nats/lib/nats-base-client/encoders.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/nats/lib/nats-base-client/core.js\");\nfunction extend(a, ...b) {\n    for (let i = 0; i < b.length; i++) {\n        const o = b[i];\n        Object.keys(o).forEach(function (k) {\n            a[k] = o[k];\n        });\n    }\n    return a;\n}\nexports.extend = extend;\nfunction render(frame) {\n    const cr = \"␍\";\n    const lf = \"␊\";\n    return encoders_1.TD.decode(frame)\n        .replace(/\\n/g, lf)\n        .replace(/\\r/g, cr);\n}\nexports.render = render;\nfunction timeout(ms, asyncTraces = true) {\n    // by generating the stack here to help identify what timed out\n    const err = asyncTraces ? core_1.NatsError.errorForCode(core_1.ErrorCode.Timeout) : null;\n    let methods;\n    let timer;\n    const p = new Promise((_resolve, reject) => {\n        const cancel = () => {\n            if (timer) {\n                clearTimeout(timer);\n            }\n        };\n        methods = { cancel };\n        // @ts-ignore: node is not a number\n        timer = setTimeout(() => {\n            if (err === null) {\n                reject(core_1.NatsError.errorForCode(core_1.ErrorCode.Timeout));\n            }\n            else {\n                reject(err);\n            }\n        }, ms);\n    });\n    // noinspection JSUnusedAssignment\n    return Object.assign(p, methods);\n}\nexports.timeout = timeout;\nfunction delay(ms = 0) {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve();\n        }, ms);\n    });\n}\nexports.delay = delay;\nfunction deadline(p, millis = 1000) {\n    const err = new Error(`deadline exceeded`);\n    const d = deferred();\n    const timer = setTimeout(() => d.reject(err), millis);\n    return Promise.race([p, d]).finally(() => clearTimeout(timer));\n}\nexports.deadline = deadline;\n/**\n * Returns a Promise that has a resolve/reject methods that can\n * be used to resolve and defer the Deferred.\n */\nfunction deferred() {\n    let methods = {};\n    const p = new Promise((resolve, reject) => {\n        methods = { resolve, reject };\n    });\n    return Object.assign(p, methods);\n}\nexports.deferred = deferred;\nfunction debugDeferred() {\n    let methods = {};\n    const p = new Promise((resolve, reject) => {\n        methods = {\n            resolve: (v) => {\n                console.trace(\"resolve\", v);\n                resolve(v);\n            },\n            reject: (err) => {\n                console.trace(\"reject\");\n                reject(err);\n            },\n        };\n    });\n    return Object.assign(p, methods);\n}\nexports.debugDeferred = debugDeferred;\nfunction shuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\nexports.shuffle = shuffle;\nfunction collect(iter) {\n    var _a, iter_1, iter_1_1;\n    var _b, e_1, _c, _d;\n    return __awaiter(this, void 0, void 0, function* () {\n        const buf = [];\n        try {\n            for (_a = true, iter_1 = __asyncValues(iter); iter_1_1 = yield iter_1.next(), _b = iter_1_1.done, !_b; _a = true) {\n                _d = iter_1_1.value;\n                _a = false;\n                const v = _d;\n                buf.push(v);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (!_a && !_b && (_c = iter_1.return)) yield _c.call(iter_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return buf;\n    });\n}\nexports.collect = collect;\nclass Perf {\n    constructor() {\n        this.timers = new Map();\n        this.measures = new Map();\n    }\n    mark(key) {\n        this.timers.set(key, performance.now());\n    }\n    measure(key, startKey, endKey) {\n        const s = this.timers.get(startKey);\n        if (s === undefined) {\n            throw new Error(`${startKey} is not defined`);\n        }\n        const e = this.timers.get(endKey);\n        if (e === undefined) {\n            throw new Error(`${endKey} is not defined`);\n        }\n        this.measures.set(key, e - s);\n    }\n    getEntries() {\n        const values = [];\n        this.measures.forEach((v, k) => {\n            values.push({ name: k, duration: v });\n        });\n        return values;\n    }\n}\nexports.Perf = Perf;\nclass SimpleMutex {\n    /**\n     * @param max number of concurrent operations\n     */\n    constructor(max = 1) {\n        this.max = max;\n        this.current = 0;\n        this.waiting = [];\n    }\n    /**\n     * Returns a promise that resolves when the mutex is acquired\n     */\n    lock() {\n        // increment the count\n        this.current++;\n        // if we have runners, resolve it\n        if (this.current <= this.max) {\n            return Promise.resolve();\n        }\n        // otherwise defer it\n        const d = deferred();\n        this.waiting.push(d);\n        return d;\n    }\n    /**\n     * Release an acquired mutex - must be called\n     */\n    unlock() {\n        // decrement the count\n        this.current--;\n        // if we have deferred, resolve one\n        const d = this.waiting.pop();\n        d === null || d === void 0 ? void 0 : d.resolve();\n    }\n}\nexports.SimpleMutex = SimpleMutex;\n/**\n * Returns a new number between  .5*n and 1.5*n.\n * If the n is 0, returns 0.\n * @param n\n */\nfunction jitter(n) {\n    if (n === 0) {\n        return 0;\n    }\n    return Math.floor(n / 2 + Math.random() * n);\n}\nexports.jitter = jitter;\n/**\n * Returns a Backoff with the specified interval policy set.\n * @param policy\n */\nfunction backoff(policy = [0, 250, 250, 500, 500, 3000, 5000]) {\n    if (!Array.isArray(policy)) {\n        policy = [0, 250, 250, 500, 500, 3000, 5000];\n    }\n    const max = policy.length - 1;\n    return {\n        backoff(attempt) {\n            return jitter(attempt > max ? policy[max] : policy[attempt]);\n        },\n    };\n}\nexports.backoff = backoff;\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/nats-base-client/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/src/connect.js":
/*!**********************************************!*\
  !*** ./node_modules/nats/lib/src/connect.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.connect = void 0;\n/*\n * Copyright 2020 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst node_transport_1 = __webpack_require__(/*! ./node_transport */ \"(rsc)/./node_modules/nats/lib/src/node_transport.js\");\nconst nats_base_client_1 = __webpack_require__(/*! ./nats-base-client */ \"(rsc)/./node_modules/nats/lib/src/nats-base-client.js\");\nfunction connect(opts = {}) {\n    (0, nats_base_client_1.setTransportFactory)({\n        factory: () => {\n            return new node_transport_1.NodeTransport();\n        },\n        dnsResolveFn: node_transport_1.nodeResolveHost,\n    });\n    return nats_base_client_1.NatsConnectionImpl.connect(opts);\n}\nexports.connect = connect;\n//# sourceMappingURL=connect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvc3JjL2Nvbm5lY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsbUJBQU8sQ0FBQyw2RUFBa0I7QUFDbkQsMkJBQTJCLG1CQUFPLENBQUMsaUZBQW9CO0FBQ3ZELDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL25hdHMvbGliL3NyYy9jb25uZWN0LmpzP2ZlNDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbm5lY3QgPSB2b2lkIDA7XG4vKlxuICogQ29weXJpZ2h0IDIwMjAgVGhlIE5BVFMgQXV0aG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNvbnN0IG5vZGVfdHJhbnNwb3J0XzEgPSByZXF1aXJlKFwiLi9ub2RlX3RyYW5zcG9ydFwiKTtcbmNvbnN0IG5hdHNfYmFzZV9jbGllbnRfMSA9IHJlcXVpcmUoXCIuL25hdHMtYmFzZS1jbGllbnRcIik7XG5mdW5jdGlvbiBjb25uZWN0KG9wdHMgPSB7fSkge1xuICAgICgwLCBuYXRzX2Jhc2VfY2xpZW50XzEuc2V0VHJhbnNwb3J0RmFjdG9yeSkoe1xuICAgICAgICBmYWN0b3J5OiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IG5vZGVfdHJhbnNwb3J0XzEuTm9kZVRyYW5zcG9ydCgpO1xuICAgICAgICB9LFxuICAgICAgICBkbnNSZXNvbHZlRm46IG5vZGVfdHJhbnNwb3J0XzEubm9kZVJlc29sdmVIb3N0LFxuICAgIH0pO1xuICAgIHJldHVybiBuYXRzX2Jhc2VfY2xpZW50XzEuTmF0c0Nvbm5lY3Rpb25JbXBsLmNvbm5lY3Qob3B0cyk7XG59XG5leHBvcnRzLmNvbm5lY3QgPSBjb25uZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29ubmVjdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/src/connect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/src/mod.js":
/*!******************************************!*\
  !*** ./node_modules/nats/lib/src/mod.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.connect = void 0;\n/*\n * Copyright 2020-2022 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nif (typeof TextEncoder === \"undefined\") {\n    const { TextEncoder, TextDecoder } = __webpack_require__(/*! util */ \"util\");\n    global.TextEncoder = TextEncoder;\n    global.TextDecoder = TextDecoder;\n}\nif (typeof globalThis.crypto === \"undefined\") {\n    const c = __webpack_require__(/*! crypto */ \"crypto\");\n    // this will patch to undefined if webcrypto is not available (node 14)\n    // views will toss if crypto is not available\n    global.crypto = c.webcrypto;\n}\nif (typeof globalThis.ReadableStream === \"undefined\") {\n    // @ts-ignore: node global\n    const chunks = process.versions.node.split(\".\");\n    const v = parseInt(chunks[0]);\n    if (v >= 16) {\n        // this won't mess up fetch\n        const streams = __webpack_require__(/*! stream/web */ \"stream/web\");\n        // views will toss if ReadableStream is not available\n        global.ReadableStream = streams.ReadableStream;\n    }\n}\nvar connect_1 = __webpack_require__(/*! ./connect */ \"(rsc)/./node_modules/nats/lib/src/connect.js\");\nObject.defineProperty(exports, \"connect\", ({ enumerable: true, get: function () { return connect_1.connect; } }));\n__exportStar(__webpack_require__(/*! ../nats-base-client/mod */ \"(rsc)/./node_modules/nats/lib/nats-base-client/mod.js\"), exports);\n__exportStar(__webpack_require__(/*! ../jetstream/mod */ \"(rsc)/./node_modules/nats/lib/jetstream/mod.js\"), exports);\n//# sourceMappingURL=mod.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvc3JjL21vZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwyQkFBMkIsRUFBRSxtQkFBTyxDQUFDLGtCQUFNO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLHNCQUFRO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLG1CQUFPLENBQUMsOEJBQVk7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsbUJBQU8sQ0FBQywrREFBVztBQUNuQywyQ0FBMEMsRUFBRSxxQ0FBcUMsNkJBQTZCLEVBQUM7QUFDL0csYUFBYSxtQkFBTyxDQUFDLHNGQUF5QjtBQUM5QyxhQUFhLG1CQUFPLENBQUMsd0VBQWtCO0FBQ3ZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvc3JjL21vZC5qcz8yMTAwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbm5lY3QgPSB2b2lkIDA7XG4vKlxuICogQ29weXJpZ2h0IDIwMjAtMjAyMiBUaGUgTkFUUyBBdXRob3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaWYgKHR5cGVvZiBUZXh0RW5jb2RlciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNvbnN0IHsgVGV4dEVuY29kZXIsIFRleHREZWNvZGVyIH0gPSByZXF1aXJlKFwidXRpbFwiKTtcbiAgICBnbG9iYWwuVGV4dEVuY29kZXIgPSBUZXh0RW5jb2RlcjtcbiAgICBnbG9iYWwuVGV4dERlY29kZXIgPSBUZXh0RGVjb2Rlcjtcbn1cbmlmICh0eXBlb2YgZ2xvYmFsVGhpcy5jcnlwdG8gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjb25zdCBjID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbiAgICAvLyB0aGlzIHdpbGwgcGF0Y2ggdG8gdW5kZWZpbmVkIGlmIHdlYmNyeXB0byBpcyBub3QgYXZhaWxhYmxlIChub2RlIDE0KVxuICAgIC8vIHZpZXdzIHdpbGwgdG9zcyBpZiBjcnlwdG8gaXMgbm90IGF2YWlsYWJsZVxuICAgIGdsb2JhbC5jcnlwdG8gPSBjLndlYmNyeXB0bztcbn1cbmlmICh0eXBlb2YgZ2xvYmFsVGhpcy5SZWFkYWJsZVN0cmVhbSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIC8vIEB0cy1pZ25vcmU6IG5vZGUgZ2xvYmFsXG4gICAgY29uc3QgY2h1bmtzID0gcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLnNwbGl0KFwiLlwiKTtcbiAgICBjb25zdCB2ID0gcGFyc2VJbnQoY2h1bmtzWzBdKTtcbiAgICBpZiAodiA+PSAxNikge1xuICAgICAgICAvLyB0aGlzIHdvbid0IG1lc3MgdXAgZmV0Y2hcbiAgICAgICAgY29uc3Qgc3RyZWFtcyA9IHJlcXVpcmUoXCJzdHJlYW0vd2ViXCIpO1xuICAgICAgICAvLyB2aWV3cyB3aWxsIHRvc3MgaWYgUmVhZGFibGVTdHJlYW0gaXMgbm90IGF2YWlsYWJsZVxuICAgICAgICBnbG9iYWwuUmVhZGFibGVTdHJlYW0gPSBzdHJlYW1zLlJlYWRhYmxlU3RyZWFtO1xuICAgIH1cbn1cbnZhciBjb25uZWN0XzEgPSByZXF1aXJlKFwiLi9jb25uZWN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29ubmVjdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdF8xLmNvbm5lY3Q7IH0gfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4uL25hdHMtYmFzZS1jbGllbnQvbW9kXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi4vamV0c3RyZWFtL21vZFwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/src/mod.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/src/nats-base-client.js":
/*!*******************************************************!*\
  !*** ./node_modules/nats/lib/src/nats-base-client.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/*\n * Copyright 2020 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n__exportStar(__webpack_require__(/*! ../nats-base-client/internal_mod */ \"(rsc)/./node_modules/nats/lib/nats-base-client/internal_mod.js\"), exports);\n__exportStar(__webpack_require__(/*! ../jetstream/internal_mod */ \"(rsc)/./node_modules/nats/lib/jetstream/internal_mod.js\"), exports);\n//# sourceMappingURL=nats-base-client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmF0cy9saWIvc3JjL25hdHMtYmFzZS1jbGllbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyx3R0FBa0M7QUFDdkQsYUFBYSxtQkFBTyxDQUFDLDBGQUEyQjtBQUNoRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL25hdHMvbGliL3NyYy9uYXRzLWJhc2UtY2xpZW50LmpzPzRiMTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBUaGUgTkFUUyBBdXRob3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuLi9uYXRzLWJhc2UtY2xpZW50L2ludGVybmFsX21vZFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4uL2pldHN0cmVhbS9pbnRlcm5hbF9tb2RcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmF0cy1iYXNlLWNsaWVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/src/nats-base-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nats/lib/src/node_transport.js":
/*!*****************************************************!*\
  !*** ./node_modules/nats/lib/src/node_transport.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __await = (void 0) && (void 0).__await || function(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n};\nvar __asyncGenerator = (void 0) && (void 0).__asyncGenerator || function(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function awaitReturn(f) {\n        return function(v) {\n            return Promise.resolve(v).then(f, reject);\n        };\n    }\n    function verb(n, f) {\n        if (g[n]) {\n            i[n] = function(v) {\n                return new Promise(function(a, b) {\n                    q.push([\n                        n,\n                        v,\n                        a,\n                        b\n                    ]) > 1 || resume(n, v);\n                });\n            };\n            if (f) i[n] = f(i[n]);\n        }\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.nodeResolveHost = exports.NodeTransport = void 0;\n/*\n * Copyright 2020-2023 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const nats_base_client_1 = __webpack_require__(/*! ./nats-base-client */ \"(rsc)/./node_modules/nats/lib/src/nats-base-client.js\");\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst util_1 = __webpack_require__(/*! ../nats-base-client/util */ \"(rsc)/./node_modules/nats/lib/nats-base-client/util.js\");\nconst tls_1 = __webpack_require__(/*! tls */ \"tls\");\nconst { resolve } = __webpack_require__(/*! path */ \"path\");\nconst { readFile, existsSync } = __webpack_require__(/*! fs */ \"fs\");\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst VERSION = \"2.19.0\";\nconst LANG = \"nats.js\";\nclass NodeTransport {\n    constructor(){\n        this.yields = [];\n        this.signal = (0, nats_base_client_1.deferred)();\n        this.closedNotification = (0, nats_base_client_1.deferred)();\n        this.connected = false;\n        this.tlsName = \"\";\n        this.done = false;\n        this.lang = LANG;\n        this.version = VERSION;\n    }\n    connect(hp, options) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this.tlsName = hp.tlsName;\n            this.options = options;\n            try {\n                this.socket = yield this.dial(hp);\n                const info = yield this.peekInfo();\n                (0, nats_base_client_1.checkOptions)(info, options);\n                const { tls_required: tlsRequired, tls_available: tlsAvailable } = info;\n                const desired = tlsAvailable === true && options.tls !== null;\n                if (tlsRequired || desired) {\n                    this.socket = yield this.startTLS();\n                }\n                //@ts-ignore: this is possibly a TlsSocket\n                if (tlsRequired && this.socket.encrypted !== true) {\n                    throw new nats_base_client_1.NatsError(\"tls\", nats_base_client_1.ErrorCode.ServerOptionNotAvailable);\n                }\n                this.connected = true;\n                this.setupHandlers();\n                this.signal.resolve();\n                return Promise.resolve();\n            } catch (err) {\n                if (!err) {\n                    // this seems to be possible in Kubernetes\n                    // where an error is thrown, but it is undefined\n                    // when something like istio-init is booting up\n                    err = nats_base_client_1.NatsError.errorForCode(nats_base_client_1.ErrorCode.ConnectionRefused, new Error(\"node provided an undefined error!\"));\n                }\n                const { code } = err;\n                const perr = code === \"ECONNREFUSED\" ? nats_base_client_1.NatsError.errorForCode(nats_base_client_1.ErrorCode.ConnectionRefused, err) : err;\n                if (this.socket) {\n                    this.socket.destroy();\n                }\n                throw perr;\n            }\n        });\n    }\n    dial(hp) {\n        const d = (0, nats_base_client_1.deferred)();\n        let dialError;\n        const socket = (0, net_1.createConnection)(hp.port, hp.hostname, ()=>{\n            d.resolve(socket);\n            socket.removeAllListeners();\n        });\n        socket.on(\"error\", (err)=>{\n            dialError = err;\n        });\n        socket.on(\"close\", ()=>{\n            socket.removeAllListeners();\n            d.reject(dialError);\n        });\n        socket.setNoDelay(true);\n        return d;\n    }\n    get isClosed() {\n        return this.done;\n    }\n    close(err) {\n        return this._closed(err, false);\n    }\n    peekInfo() {\n        const d = (0, nats_base_client_1.deferred)();\n        let peekError;\n        this.socket.on(\"data\", (frame)=>{\n            this.yields.push(frame);\n            const t = nats_base_client_1.DataBuffer.concat(...this.yields);\n            const pm = (0, nats_base_client_1.extractProtocolMessage)(t);\n            if (pm !== \"\") {\n                try {\n                    const m = nats_base_client_1.INFO.exec(pm);\n                    if (!m) {\n                        throw new Error(\"unexpected response from server\");\n                    }\n                    const info = JSON.parse(m[1]);\n                    d.resolve(info);\n                } catch (err) {\n                    d.reject(err);\n                } finally{\n                    this.socket.removeAllListeners();\n                }\n            }\n        });\n        this.socket.on(\"error\", (err)=>{\n            peekError = err;\n        });\n        this.socket.on(\"close\", ()=>{\n            this.socket.removeAllListeners();\n            d.reject(peekError);\n        });\n        return d;\n    }\n    loadFile(fn) {\n        if (!fn) {\n            return Promise.resolve();\n        }\n        const d = (0, nats_base_client_1.deferred)();\n        try {\n            fn = resolve(fn);\n            if (!existsSync(fn)) {\n                d.reject(new Error(`${fn} doesn't exist`));\n            }\n            readFile(fn, (err, data)=>{\n                if (err) {\n                    return d.reject(err);\n                }\n                d.resolve(data);\n            });\n        } catch (err) {\n            d.reject(err);\n        }\n        return d;\n    }\n    loadClientCerts() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const tlsOpts = {};\n            const { certFile, cert, caFile, ca, keyFile, key } = this.options.tls;\n            try {\n                if (certFile) {\n                    const data = yield this.loadFile(certFile);\n                    if (data) {\n                        tlsOpts.cert = data;\n                    }\n                } else if (cert) {\n                    tlsOpts.cert = cert;\n                }\n                if (keyFile) {\n                    const data = yield this.loadFile(keyFile);\n                    if (data) {\n                        tlsOpts.key = data;\n                    }\n                } else if (key) {\n                    tlsOpts.key = key;\n                }\n                if (caFile) {\n                    const data = yield this.loadFile(caFile);\n                    if (data) {\n                        tlsOpts.ca = [\n                            data\n                        ];\n                    }\n                } else if (ca) {\n                    tlsOpts.ca = ca;\n                }\n                return Promise.resolve(tlsOpts);\n            } catch (err) {\n                return Promise.reject(err);\n            }\n        });\n    }\n    startTLS() {\n        return __awaiter(this, void 0, void 0, function*() {\n            let tlsError;\n            let tlsOpts = {\n                socket: this.socket,\n                servername: this.tlsName,\n                rejectUnauthorized: true\n            };\n            if (typeof this.options.tls === \"object\") {\n                try {\n                    const certOpts = (yield this.loadClientCerts()) || {};\n                    tlsOpts = (0, util_1.extend)(tlsOpts, this.options.tls, certOpts);\n                } catch (err) {\n                    return Promise.reject(new nats_base_client_1.NatsError(err.message, nats_base_client_1.ErrorCode.Tls, err));\n                }\n            }\n            const d = (0, nats_base_client_1.deferred)();\n            try {\n                const tlsSocket = (0, tls_1.connect)(tlsOpts, ()=>{\n                    tlsSocket.removeAllListeners();\n                    d.resolve(tlsSocket);\n                });\n                tlsSocket.on(\"error\", (err)=>{\n                    tlsError = err;\n                });\n                tlsSocket.on(\"secureConnect\", ()=>{\n                    // socket won't be authorized, if the user disabled it\n                    if (tlsOpts.rejectUnauthorized === false) {\n                        return;\n                    }\n                    if (!tlsSocket.authorized) {\n                        throw tlsSocket.authorizationError;\n                    }\n                });\n                tlsSocket.on(\"close\", ()=>{\n                    d.reject(tlsError);\n                    tlsSocket.removeAllListeners();\n                });\n            } catch (err) {\n                // tls throws errors on bad certs see nats.js#310\n                d.reject(nats_base_client_1.NatsError.errorForCode(nats_base_client_1.ErrorCode.Tls, err));\n            }\n            return d;\n        });\n    }\n    setupHandlers() {\n        let connError;\n        this.socket.on(\"data\", (frame)=>{\n            this.yields.push(frame);\n            return this.signal.resolve();\n        });\n        this.socket.on(\"error\", (err)=>{\n            connError = err;\n        });\n        this.socket.on(\"end\", ()=>{\n            var _a, _b;\n            if ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.destroyed) {\n                return;\n            }\n            (_b = this.socket) === null || _b === void 0 ? void 0 : _b.write(new Uint8Array(0), ()=>{\n                var _a;\n                (_a = this.socket) === null || _a === void 0 ? void 0 : _a.end();\n            });\n        });\n        this.socket.on(\"close\", ()=>{\n            this._closed(connError, false);\n        });\n    }\n    [Symbol.asyncIterator]() {\n        return this.iterate();\n    }\n    iterate() {\n        return __asyncGenerator(this, arguments, function* iterate_1() {\n            const debug = this.options.debug;\n            while(true){\n                if (this.yields.length === 0) {\n                    yield __await(this.signal);\n                }\n                const yields = this.yields;\n                this.yields = [];\n                for(let i = 0; i < yields.length; i++){\n                    if (debug) {\n                        console.info(`> ${(0, nats_base_client_1.render)(yields[i])}`);\n                    }\n                    yield yield __await(yields[i]);\n                }\n                // yielding could have paused and microtask\n                // could have added messages. Prevent allocations\n                // if possible\n                if (this.done) {\n                    break;\n                } else if (this.yields.length === 0) {\n                    yields.length = 0;\n                    this.yields = yields;\n                    this.signal = (0, nats_base_client_1.deferred)();\n                }\n            }\n        });\n    }\n    discard() {\n    // ignored - this is not required, as there's no throttling\n    }\n    disconnect() {\n        this._closed(undefined, true).then().catch();\n    }\n    isEncrypted() {\n        return this.socket instanceof tls_1.TLSSocket;\n    }\n    _send(frame) {\n        if (this.isClosed || this.socket === undefined) {\n            return Promise.resolve();\n        }\n        if (this.options.debug) {\n            console.info(`< ${(0, nats_base_client_1.render)(frame)}`);\n        }\n        const d = (0, nats_base_client_1.deferred)();\n        try {\n            this.socket.write(frame, (err)=>{\n                if (err) {\n                    if (this.options.debug) {\n                        console.error(`!!! ${(0, nats_base_client_1.render)(frame)}: ${err}`);\n                    }\n                    return d.reject(err);\n                }\n                return d.resolve();\n            });\n        } catch (err) {\n            if (this.options.debug) {\n                console.error(`!!! ${(0, nats_base_client_1.render)(frame)}: ${err}`);\n            }\n            d.reject(err);\n        }\n        return d;\n    }\n    send(frame) {\n        const p = this._send(frame);\n        p.catch((_err)=>{\n        // we ignore write errors because client will\n        // fail on a read or when the heartbeat timer\n        // detects a stale connection\n        });\n    }\n    _closed(err, internal = true) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // if this connection didn't succeed, then ignore it.\n            if (!this.connected) return;\n            if (this.done) return;\n            this.closeError = err;\n            // only try to flush the outbound buffer if we got no error and\n            // the close is internal, if the transport closed, we are done.\n            if (!err && this.socket && internal) {\n                try {\n                    yield this._send(new TextEncoder().encode(\"\"));\n                } catch (err) {\n                    if (this.options.debug) {\n                        console.log(\"transport close terminated with an error\", err);\n                    }\n                }\n            }\n            try {\n                if (this.socket) {\n                    this.socket.removeAllListeners();\n                    this.socket.destroy();\n                    this.socket = undefined;\n                }\n            } catch (err) {\n                console.log(err);\n            }\n            this.done = true;\n            this.closedNotification.resolve(this.closeError);\n        });\n    }\n    closed() {\n        return this.closedNotification;\n    }\n}\nexports.NodeTransport = NodeTransport;\nfunction nodeResolveHost(s) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const a = (0, nats_base_client_1.deferred)();\n        const aaaa = (0, nats_base_client_1.deferred)();\n        dns.resolve4(s, (err, records)=>{\n            if (err) {\n                a.resolve(err);\n            } else {\n                a.resolve(records);\n            }\n        });\n        dns.resolve6(s, (err, records)=>{\n            if (err) {\n                aaaa.resolve(err);\n            } else {\n                aaaa.resolve(records);\n            }\n        });\n        const ips = [];\n        const da = yield a;\n        if (Array.isArray(da)) {\n            ips.push(...da);\n        }\n        const daaaa = yield aaaa;\n        if (Array.isArray(daaaa)) {\n            ips.push(...daaaa);\n        }\n        if (ips.length === 0) {\n            ips.push(s);\n        }\n        return ips;\n    });\n}\nexports.nodeResolveHost = nodeResolveHost; //# sourceMappingURL=node_transport.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nats/lib/src/node_transport.js\n");

/***/ })

};
;